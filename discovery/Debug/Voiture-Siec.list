
Voiture-Siec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007a20  08007a20  00017a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  20000000  08007b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
  7 .bss          0000032c  200000b8  200000b8  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  200003e4  200003e4  000200b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b167  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004531  00000000  00000000  0004b24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011707  00000000  00000000  0004f780  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014b0  00000000  00000000  00060e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013d0  00000000  00000000  00062338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002073c  00000000  00000000  00063708  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000120f1  00000000  00000000  00083e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a833e  00000000  00000000  00095f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013e273  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004058  00000000  00000000  0013e2f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000024  00000000  00000000  00142348  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000003f  00000000  00000000  0014236c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a04 	.word	0x08007a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	08007a04 	.word	0x08007a04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <invSqrt>:
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));*/

	unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 8000b48:	ee10 2a10 	vmov	r2, s0
	float tmp = *(float*)&i;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <invSqrt+0x2c>)
 8000b4e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8000b52:	ee07 3a10 	vmov	s14, r3
	float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8000b56:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000b78 <invSqrt+0x30>
 8000b5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b66:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000b7c <invSqrt+0x34>
 8000b6a:	ee30 0a67 	vsub.f32	s0, s0, s15
	return y;
	//return 1/sqrt(x);
}
 8000b6e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8000b72:	4770      	bx	lr
 8000b74:	5f1f1412 	.word	0x5f1f1412
 8000b78:	3f36d312 	.word	0x3f36d312
 8000b7c:	3fd851ff 	.word	0x3fd851ff

08000b80 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	ed2d 8b0a 	vpush	{d8-d12}
 8000b86:	eef0 8a61 	vmov.f32	s17, s3
 8000b8a:	eeb0 9a42 	vmov.f32	s18, s4
 8000b8e:	eeb0 8a62 	vmov.f32	s16, s5
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 8000b92:	4ad4      	ldr	r2, [pc, #848]	; (8000ee4 <MadgwickAHRSupdateIMU+0x364>)
 8000b94:	ed92 ba00 	vldr	s22, [r2]
 8000b98:	ee2b ba40 	vnmul.f32	s22, s22, s0
 8000b9c:	4bd2      	ldr	r3, [pc, #840]	; (8000ee8 <MadgwickAHRSupdateIMU+0x368>)
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8000ba6:	ee3b ba67 	vsub.f32	s22, s22, s15
 8000baa:	48d0      	ldr	r0, [pc, #832]	; (8000eec <MadgwickAHRSupdateIMU+0x36c>)
 8000bac:	edd0 7a00 	vldr	s15, [r0]
 8000bb0:	ee67 7a81 	vmul.f32	s15, s15, s2
 8000bb4:	ee3b ba67 	vsub.f32	s22, s22, s15
 8000bb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000bbc:	ee2b ba07 	vmul.f32	s22, s22, s14
	qDot2 = 0.5f * ((q0 * gx) + (q2 * gz) - (q3 * gy));
 8000bc0:	49cb      	ldr	r1, [pc, #812]	; (8000ef0 <MadgwickAHRSupdateIMU+0x370>)
 8000bc2:	edd1 aa00 	vldr	s21, [r1]
 8000bc6:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8000bca:	edd3 7a00 	vldr	s15, [r3]
 8000bce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8000bd2:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8000bd6:	edd0 7a00 	vldr	s15, [r0]
 8000bda:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000bde:	ee7a aae7 	vsub.f32	s21, s21, s15
 8000be2:	ee6a aa87 	vmul.f32	s21, s21, s14
	qDot3 = 0.5f * ((q0 * gy) - (q1 * gz) + (q3 * gx));
 8000be6:	ed91 aa00 	vldr	s20, [r1]
 8000bea:	ee20 aa8a 	vmul.f32	s20, s1, s20
 8000bee:	edd2 7a00 	vldr	s15, [r2]
 8000bf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8000bf6:	ee3a aa67 	vsub.f32	s20, s20, s15
 8000bfa:	edd0 7a00 	vldr	s15, [r0]
 8000bfe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000c02:	ee3a aa27 	vadd.f32	s20, s20, s15
 8000c06:	ee2a aa07 	vmul.f32	s20, s20, s14
	qDot4 = 0.5f * ((q0 * gz) + (q1 * gy) - (q2 * gx));
 8000c0a:	edd1 9a00 	vldr	s19, [r1]
 8000c0e:	ee61 9a29 	vmul.f32	s19, s2, s19
 8000c12:	ed92 1a00 	vldr	s2, [r2]
 8000c16:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000c1a:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000c26:	ee79 9ac0 	vsub.f32	s19, s19, s0
 8000c2a:	ee69 9a87 	vmul.f32	s19, s19, s14
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000c2e:	eef5 1a40 	vcmp.f32	s3, #0.0
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	d10a      	bne.n	8000c4e <MadgwickAHRSupdateIMU+0xce>
 8000c38:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	d105      	bne.n	8000c4e <MadgwickAHRSupdateIMU+0xce>
 8000c42:	eef5 2a40 	vcmp.f32	s5, #0.0
 8000c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4a:	f000 80e9 	beq.w	8000e20 <MadgwickAHRSupdateIMU+0x2a0>
		recipNorm = invSqrt((ax * ax) + (ay * ay) + (az * az));
 8000c4e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8000c52:	ee29 0a09 	vmul.f32	s0, s18, s18
 8000c56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000c5a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8000c5e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000c62:	f7ff ff71 	bl	8000b48 <invSqrt>
		ax *= recipNorm;
 8000c66:	ee28 5a80 	vmul.f32	s10, s17, s0
		ay *= recipNorm;
 8000c6a:	ee29 6a00 	vmul.f32	s12, s18, s0
		az *= recipNorm;
 8000c6e:	ee28 0a00 	vmul.f32	s0, s16, s0
		_2q0 = 2.0f * q0;
 8000c72:	489f      	ldr	r0, [pc, #636]	; (8000ef0 <MadgwickAHRSupdateIMU+0x370>)
 8000c74:	ed90 3a00 	vldr	s6, [r0]
 8000c78:	ee33 3a03 	vadd.f32	s6, s6, s6
		_2q1 = 2.0f * q1;
 8000c7c:	4a99      	ldr	r2, [pc, #612]	; (8000ee4 <MadgwickAHRSupdateIMU+0x364>)
 8000c7e:	ed92 4a00 	vldr	s8, [r2]
 8000c82:	ee34 4a04 	vadd.f32	s8, s8, s8
		_2q2 = 2.0f * q2;
 8000c86:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <MadgwickAHRSupdateIMU+0x368>)
 8000c88:	edd3 5a00 	vldr	s11, [r3]
 8000c8c:	ee75 5aa5 	vadd.f32	s11, s11, s11
		_2q3 = 2.0f * q3;
 8000c90:	4996      	ldr	r1, [pc, #600]	; (8000eec <MadgwickAHRSupdateIMU+0x36c>)
 8000c92:	edd1 3a00 	vldr	s7, [r1]
 8000c96:	ee73 3aa3 	vadd.f32	s7, s7, s7
		_4q0 = 4.0f * q0;
 8000c9a:	ed90 ca00 	vldr	s24, [r0]
 8000c9e:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000ca2:	ee2c ca24 	vmul.f32	s24, s24, s9
		_4q1 = 4.0f * q1;
 8000ca6:	edd2 1a00 	vldr	s3, [r2]
 8000caa:	ee61 1aa4 	vmul.f32	s3, s3, s9
		_4q2 = 4.0f * q2;
 8000cae:	edd3 2a00 	vldr	s5, [r3]
 8000cb2:	ee62 2aa4 	vmul.f32	s5, s5, s9
		_8q1 = 8.0f * q1;
 8000cb6:	edd2 0a00 	vldr	s1, [r2]
 8000cba:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8000cbe:	ee60 0aa7 	vmul.f32	s1, s1, s15
		_8q2 = 8.0f * q2;
 8000cc2:	ed93 2a00 	vldr	s4, [r3]
 8000cc6:	ee22 2a27 	vmul.f32	s4, s4, s15
		q0q0 = q0 * q0;
 8000cca:	ed90 7a00 	vldr	s14, [r0]
 8000cce:	edd0 7a00 	vldr	s15, [r0]
 8000cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
		q1q1 = q1 * q1;
 8000cd6:	edd2 6a00 	vldr	s13, [r2]
 8000cda:	edd2 7a00 	vldr	s15, [r2]
 8000cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q2q2 = q2 * q2;
 8000ce2:	edd3 8a00 	vldr	s17, [r3]
 8000ce6:	edd3 6a00 	vldr	s13, [r3]
 8000cea:	ee68 6aa6 	vmul.f32	s13, s17, s13
		q3q3 = q3 * q3;
 8000cee:	ed91 8a00 	vldr	s16, [r1]
 8000cf2:	ed91 1a00 	vldr	s2, [r1]
 8000cf6:	ee28 1a01 	vmul.f32	s2, s16, s2
		s0 = (_4q0 * q2q2) + (_2q2 * ax) + (_4q0 * q1q1) - (_2q1 * ay);
 8000cfa:	ee6c ba26 	vmul.f32	s23, s24, s13
 8000cfe:	ee25 8a25 	vmul.f32	s16, s10, s11
 8000d02:	ee7b ba88 	vadd.f32	s23, s23, s16
 8000d06:	ee2c ca27 	vmul.f32	s24, s24, s15
 8000d0a:	ee7b ba8c 	vadd.f32	s23, s23, s24
 8000d0e:	ee26 8a04 	vmul.f32	s16, s12, s8
 8000d12:	ee7b bac8 	vsub.f32	s23, s23, s16
		s1 = (_4q1 * q3q3) - (_2q3 * ax) + (4.0f * q0q0 * q1) - (_2q0 * ay) - _4q1 + (_8q1 * q1q1) + (_8q1 * q2q2) + (_4q1 * az);
 8000d16:	ee21 9a81 	vmul.f32	s18, s3, s2
 8000d1a:	ee25 8a23 	vmul.f32	s16, s10, s7
 8000d1e:	ee39 9a48 	vsub.f32	s18, s18, s16
 8000d22:	ee27 7a24 	vmul.f32	s14, s14, s9
 8000d26:	ed92 8a00 	vldr	s16, [r2]
 8000d2a:	ee27 8a08 	vmul.f32	s16, s14, s16
 8000d2e:	ee39 9a08 	vadd.f32	s18, s18, s16
 8000d32:	ee26 8a03 	vmul.f32	s16, s12, s6
 8000d36:	ee39 9a48 	vsub.f32	s18, s18, s16
 8000d3a:	ee39 9a61 	vsub.f32	s18, s18, s3
 8000d3e:	ee20 8aa7 	vmul.f32	s16, s1, s15
 8000d42:	ee39 9a08 	vadd.f32	s18, s18, s16
 8000d46:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8000d4a:	ee39 9a20 	vadd.f32	s18, s18, s1
 8000d4e:	ee60 1a21 	vmul.f32	s3, s0, s3
 8000d52:	ee39 9a21 	vadd.f32	s18, s18, s3
		s2 = (4.0f * q0q0 * q2) + (_2q0 * ax) + (_4q2 * q3q3) - (_2q3 * ay) - _4q2 + (_8q2 * q1q1) + (_8q2 * q2q2) + (_4q2 * az);
 8000d56:	ed93 8a00 	vldr	s16, [r3]
 8000d5a:	ee27 7a08 	vmul.f32	s14, s14, s16
 8000d5e:	ee25 8a03 	vmul.f32	s16, s10, s6
 8000d62:	ee37 7a08 	vadd.f32	s14, s14, s16
 8000d66:	ee22 8a81 	vmul.f32	s16, s5, s2
 8000d6a:	ee37 8a08 	vadd.f32	s16, s14, s16
 8000d6e:	ee66 3a23 	vmul.f32	s7, s12, s7
 8000d72:	ee38 8a63 	vsub.f32	s16, s16, s7
 8000d76:	ee38 8a62 	vsub.f32	s16, s16, s5
 8000d7a:	ee22 7a27 	vmul.f32	s14, s4, s15
 8000d7e:	ee38 8a07 	vadd.f32	s16, s16, s14
 8000d82:	ee22 2a26 	vmul.f32	s4, s4, s13
 8000d86:	ee38 8a02 	vadd.f32	s16, s16, s4
 8000d8a:	ee20 0a22 	vmul.f32	s0, s0, s5
 8000d8e:	ee38 8a00 	vadd.f32	s16, s16, s0
		s3 = (4.0f * q1q1 * q3) - (_2q1 * ax) + (4.0f * q2q2 * q3) - (_2q2 * ay);
 8000d92:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000d96:	edd1 8a00 	vldr	s17, [r1]
 8000d9a:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8000d9e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8000da2:	ee78 8ac5 	vsub.f32	s17, s17, s10
 8000da6:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8000daa:	ed91 7a00 	vldr	s14, [r1]
 8000dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8000db6:	ee26 6a25 	vmul.f32	s12, s12, s11
 8000dba:	ee78 8ac6 	vsub.f32	s17, s17, s12
		recipNorm = invSqrt((s0 * s0) + (s1 * s1) + (s2 * s2) + (s3 * s3)); // normalise step magnitude
 8000dbe:	ee6b 7aab 	vmul.f32	s15, s23, s23
 8000dc2:	ee29 0a09 	vmul.f32	s0, s18, s18
 8000dc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000dca:	ee28 0a08 	vmul.f32	s0, s16, s16
 8000dce:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000dd2:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8000dd6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000dda:	f7ff feb5 	bl	8000b48 <invSqrt>
		s0 *= recipNorm;
 8000dde:	ee6b ba80 	vmul.f32	s23, s23, s0
		s1 *= recipNorm;
 8000de2:	ee29 9a00 	vmul.f32	s18, s18, s0
		s2 *= recipNorm;
 8000de6:	ee28 8a00 	vmul.f32	s16, s16, s0
		s3 *= recipNorm;
 8000dea:	ee68 8a80 	vmul.f32	s17, s17, s0
		qDot1 -= (beta * s0);
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <MadgwickAHRSupdateIMU+0x374>)
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	ee6b baa7 	vmul.f32	s23, s23, s15
 8000df8:	ee3b ba6b 	vsub.f32	s22, s22, s23
		qDot2 -= (beta * s1);
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ee29 9a27 	vmul.f32	s18, s18, s15
 8000e04:	ee7a aac9 	vsub.f32	s21, s21, s18
		qDot3 -= (beta * s2);
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e10:	ee3a aa48 	vsub.f32	s20, s20, s16
		qDot4 -= (beta * s3);
 8000e14:	ed93 0a00 	vldr	s0, [r3]
 8000e18:	ee68 8a80 	vmul.f32	s17, s17, s0
 8000e1c:	ee79 9ae8 	vsub.f32	s19, s19, s17
	q0 += qDot1 * (1.0f / sampleFreq);
 8000e20:	eddf 7a35 	vldr	s15, [pc, #212]	; 8000ef8 <MadgwickAHRSupdateIMU+0x378>
 8000e24:	ee2b ba27 	vmul.f32	s22, s22, s15
 8000e28:	4f31      	ldr	r7, [pc, #196]	; (8000ef0 <MadgwickAHRSupdateIMU+0x370>)
 8000e2a:	ed97 7a00 	vldr	s14, [r7]
 8000e2e:	ee3b ba07 	vadd.f32	s22, s22, s14
 8000e32:	ed87 ba00 	vstr	s22, [r7]
	q1 += qDot2 * (1.0f / sampleFreq);
 8000e36:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8000e3a:	4e2a      	ldr	r6, [pc, #168]	; (8000ee4 <MadgwickAHRSupdateIMU+0x364>)
 8000e3c:	ed96 7a00 	vldr	s14, [r6]
 8000e40:	ee7a aa87 	vadd.f32	s21, s21, s14
 8000e44:	edc6 aa00 	vstr	s21, [r6]
	q2 += qDot3 * (1.0f / sampleFreq);
 8000e48:	ee2a aa27 	vmul.f32	s20, s20, s15
 8000e4c:	4d26      	ldr	r5, [pc, #152]	; (8000ee8 <MadgwickAHRSupdateIMU+0x368>)
 8000e4e:	ed95 7a00 	vldr	s14, [r5]
 8000e52:	ee3a aa07 	vadd.f32	s20, s20, s14
 8000e56:	ed85 aa00 	vstr	s20, [r5]
	q3 += qDot4 * (1.0f / sampleFreq);
 8000e5a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8000e5e:	4c23      	ldr	r4, [pc, #140]	; (8000eec <MadgwickAHRSupdateIMU+0x36c>)
 8000e60:	edd4 7a00 	vldr	s15, [r4]
 8000e64:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8000e68:	edc4 9a00 	vstr	s19, [r4]
	recipNorm = invSqrt((q0 * q0) + (q1 * q1) + (q2 * q2) + (q3 * q3));
 8000e6c:	edd7 7a00 	vldr	s15, [r7]
 8000e70:	ed97 0a00 	vldr	s0, [r7]
 8000e74:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000e78:	ed96 0a00 	vldr	s0, [r6]
 8000e7c:	ed96 7a00 	vldr	s14, [r6]
 8000e80:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000e84:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000e88:	ed95 0a00 	vldr	s0, [r5]
 8000e8c:	ed95 7a00 	vldr	s14, [r5]
 8000e90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000e94:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000e98:	ed94 0a00 	vldr	s0, [r4]
 8000e9c:	ed94 7a00 	vldr	s14, [r4]
 8000ea0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000ea4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000ea8:	f7ff fe4e 	bl	8000b48 <invSqrt>
	q0 *= recipNorm;
 8000eac:	edd7 7a00 	vldr	s15, [r7]
 8000eb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000eb4:	edc7 7a00 	vstr	s15, [r7]
	q1 *= recipNorm;
 8000eb8:	edd6 7a00 	vldr	s15, [r6]
 8000ebc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000ec0:	edc6 7a00 	vstr	s15, [r6]
	q2 *= recipNorm;
 8000ec4:	edd5 7a00 	vldr	s15, [r5]
 8000ec8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000ecc:	edc5 7a00 	vstr	s15, [r5]
	q3 *= recipNorm;
 8000ed0:	edd4 7a00 	vldr	s15, [r4]
 8000ed4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000ed8:	ed84 0a00 	vstr	s0, [r4]
}
 8000edc:	ecbd 8b0a 	vpop	{d8-d12}
 8000ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000d4 	.word	0x200000d4
 8000ee8:	200000d8 	.word	0x200000d8
 8000eec:	200000dc 	.word	0x200000dc
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	3b2c7692 	.word	0x3b2c7692

08000efc <MadgwickAHRSupdate>:
void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	ed2d 8b10 	vpush	{d8-d15}
 8000f02:	b08f      	sub	sp, #60	; 0x3c
 8000f04:	eef0 8a61 	vmov.f32	s17, s3
 8000f08:	eef0 da42 	vmov.f32	s27, s4
 8000f0c:	eef0 ca62 	vmov.f32	s25, s5
 8000f10:	eeb0 ca43 	vmov.f32	s24, s6
 8000f14:	eeb0 ba63 	vmov.f32	s22, s7
 8000f18:	eef0 ba44 	vmov.f32	s23, s8
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000f1c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	d10a      	bne.n	8000f3c <MadgwickAHRSupdate+0x40>
 8000f26:	eef5 3a40 	vcmp.f32	s7, #0.0
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	d105      	bne.n	8000f3c <MadgwickAHRSupdate+0x40>
 8000f30:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	f000 8361 	beq.w	80015fe <MadgwickAHRSupdate+0x702>
	qDot1 = 0.5f * ((-q1 * gx) - (q2 * gy) - (q3 * gz));
 8000f3c:	4af9      	ldr	r2, [pc, #996]	; (8001324 <MadgwickAHRSupdate+0x428>)
 8000f3e:	edd2 aa00 	vldr	s21, [r2]
 8000f42:	ee6a aac0 	vnmul.f32	s21, s21, s0
 8000f46:	4bf8      	ldr	r3, [pc, #992]	; (8001328 <MadgwickAHRSupdate+0x42c>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8000f50:	ee7a aae7 	vsub.f32	s21, s21, s15
 8000f54:	48f5      	ldr	r0, [pc, #980]	; (800132c <MadgwickAHRSupdate+0x430>)
 8000f56:	edd0 7a00 	vldr	s15, [r0]
 8000f5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8000f5e:	ee7a aae7 	vsub.f32	s21, s21, s15
 8000f62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000f66:	ee6a aaa7 	vmul.f32	s21, s21, s15
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f6a:	49f1      	ldr	r1, [pc, #964]	; (8001330 <MadgwickAHRSupdate+0x434>)
 8000f6c:	ed91 aa00 	vldr	s20, [r1]
 8000f70:	ee20 aa0a 	vmul.f32	s20, s0, s20
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	ee21 7a07 	vmul.f32	s14, s2, s14
 8000f7c:	ee3a aa07 	vadd.f32	s20, s20, s14
 8000f80:	ed90 7a00 	vldr	s14, [r0]
 8000f84:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000f88:	ee3a aa47 	vsub.f32	s20, s20, s14
 8000f8c:	ee2a aa27 	vmul.f32	s20, s20, s15
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f90:	edd1 9a00 	vldr	s19, [r1]
 8000f94:	ee60 9aa9 	vmul.f32	s19, s1, s19
 8000f98:	ed92 7a00 	vldr	s14, [r2]
 8000f9c:	ee21 7a07 	vmul.f32	s14, s2, s14
 8000fa0:	ee79 9ac7 	vsub.f32	s19, s19, s14
 8000fa4:	ed90 7a00 	vldr	s14, [r0]
 8000fa8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8000fac:	ee79 9a87 	vadd.f32	s19, s19, s14
 8000fb0:	ee69 9aa7 	vmul.f32	s19, s19, s15
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000fb4:	ed91 9a00 	vldr	s18, [r1]
 8000fb8:	ee21 9a09 	vmul.f32	s18, s2, s18
 8000fbc:	ed92 1a00 	vldr	s2, [r2]
 8000fc0:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000fc4:	ee39 9a20 	vadd.f32	s18, s18, s1
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000fd0:	ee39 9a40 	vsub.f32	s18, s18, s0
 8000fd4:	ee29 9a27 	vmul.f32	s18, s18, s15
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fd8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	d10a      	bne.n	8000ff8 <MadgwickAHRSupdate+0xfc>
 8000fe2:	eef5 da40 	vcmp.f32	s27, #0.0
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	d105      	bne.n	8000ff8 <MadgwickAHRSupdate+0xfc>
 8000fec:	eef5 ca40 	vcmp.f32	s25, #0.0
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	f000 82a1 	beq.w	800153a <MadgwickAHRSupdate+0x63e>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ff8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8000ffc:	ee2d 0aad 	vmul.f32	s0, s27, s27
 8001000:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001004:	ee2c 0aac 	vmul.f32	s0, s25, s25
 8001008:	ee37 0a80 	vadd.f32	s0, s15, s0
 800100c:	f7ff fd9c 	bl	8000b48 <invSqrt>
		ax *= recipNorm;
 8001010:	ee68 7a80 	vmul.f32	s15, s17, s0
 8001014:	edcd 7a01 	vstr	s15, [sp, #4]
		ay *= recipNorm;
 8001018:	ee2d 7a80 	vmul.f32	s14, s27, s0
 800101c:	ed8d 7a02 	vstr	s14, [sp, #8]
		az *= recipNorm;
 8001020:	ee6c 6a80 	vmul.f32	s13, s25, s0
 8001024:	edcd 6a03 	vstr	s13, [sp, #12]
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001028:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 800102c:	ee2b 0a0b 	vmul.f32	s0, s22, s22
 8001030:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001034:	ee2b 0aab 	vmul.f32	s0, s23, s23
 8001038:	ee37 0a80 	vadd.f32	s0, s15, s0
 800103c:	f7ff fd84 	bl	8000b48 <invSqrt>
		mx *= recipNorm;
 8001040:	ee2c ca00 	vmul.f32	s24, s24, s0
		my *= recipNorm;
 8001044:	ee2b ba00 	vmul.f32	s22, s22, s0
		mz *= recipNorm;
 8001048:	ee6b ba80 	vmul.f32	s23, s23, s0
		_2q0mx = 2.0f * q0 * mx;
 800104c:	4fb8      	ldr	r7, [pc, #736]	; (8001330 <MadgwickAHRSupdate+0x434>)
 800104e:	ed97 8a00 	vldr	s16, [r7]
 8001052:	ee38 8a08 	vadd.f32	s16, s16, s16
 8001056:	ee2c 8a08 	vmul.f32	s16, s24, s16
		_2q0my = 2.0f * q0 * my;
 800105a:	edd7 7a00 	vldr	s15, [r7]
 800105e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001062:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8001066:	eeb0 6a67 	vmov.f32	s12, s15
		_2q0mz = 2.0f * q0 * mz;
 800106a:	edd7 6a00 	vldr	s13, [r7]
 800106e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8001072:	ee6b 6aa6 	vmul.f32	s13, s23, s13
		_2q1mx = 2.0f * q1 * mx;
 8001076:	4eab      	ldr	r6, [pc, #684]	; (8001324 <MadgwickAHRSupdate+0x428>)
 8001078:	edd6 7a00 	vldr	s15, [r6]
 800107c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001080:	ee6c 7a27 	vmul.f32	s15, s24, s15
 8001084:	eef0 5a67 	vmov.f32	s11, s15
		_2q0 = 2.0f * q0;
 8001088:	edd7 7a00 	vldr	s15, [r7]
 800108c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001090:	edcd 7a06 	vstr	s15, [sp, #24]
		_2q1 = 2.0f * q1;
 8001094:	edd6 8a00 	vldr	s17, [r6]
 8001098:	ee78 8aa8 	vadd.f32	s17, s17, s17
		_2q2 = 2.0f * q2;
 800109c:	4ca2      	ldr	r4, [pc, #648]	; (8001328 <MadgwickAHRSupdate+0x42c>)
 800109e:	edd4 da00 	vldr	s27, [r4]
 80010a2:	ee7d daad 	vadd.f32	s27, s27, s27
		_2q3 = 2.0f * q3;
 80010a6:	4da1      	ldr	r5, [pc, #644]	; (800132c <MadgwickAHRSupdate+0x430>)
 80010a8:	edd5 7a00 	vldr	s15, [r5]
 80010ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010b0:	ed8d 7a07 	vstr	s14, [sp, #28]
		_2q0q2 = 2.0f * q0 * q2;
 80010b4:	edd7 7a00 	vldr	s15, [r7]
 80010b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010bc:	ed94 7a00 	vldr	s14, [r4]
 80010c0:	ee27 5a87 	vmul.f32	s10, s15, s14
 80010c4:	ed8d 5a08 	vstr	s10, [sp, #32]
		_2q2q3 = 2.0f * q2 * q3;
 80010c8:	edd4 7a00 	vldr	s15, [r4]
 80010cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010d0:	ed95 7a00 	vldr	s14, [r5]
 80010d4:	ee67 4a87 	vmul.f32	s9, s15, s14
 80010d8:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
		q0q0 = q0 * q0;
 80010dc:	edd7 ea00 	vldr	s29, [r7]
 80010e0:	edd7 7a00 	vldr	s15, [r7]
 80010e4:	ee6e eaa7 	vmul.f32	s29, s29, s15
		q0q1 = q0 * q1;
 80010e8:	ed97 ea00 	vldr	s28, [r7]
 80010ec:	edd6 7a00 	vldr	s15, [r6]
 80010f0:	ee2e ea27 	vmul.f32	s28, s28, s15
		q0q2 = q0 * q2;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	ed94 fa00 	vldr	s30, [r4]
 80010fc:	ee27 5a8f 	vmul.f32	s10, s15, s30
 8001100:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
		q0q3 = q0 * q3;
 8001104:	ed97 7a00 	vldr	s14, [r7]
 8001108:	edd5 7a00 	vldr	s15, [r5]
 800110c:	ee67 3a27 	vmul.f32	s7, s14, s15
 8001110:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
		q1q1 = q1 * q1;
 8001114:	ed96 da00 	vldr	s26, [r6]
 8001118:	edd6 7a00 	vldr	s15, [r6]
 800111c:	ee2d da27 	vmul.f32	s26, s26, s15
		q1q2 = q1 * q2;
 8001120:	ed96 7a00 	vldr	s14, [r6]
 8001124:	edd4 7a00 	vldr	s15, [r4]
 8001128:	ee67 0a27 	vmul.f32	s1, s14, s15
 800112c:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
		q1q3 = q1 * q3;
 8001130:	ed96 fa00 	vldr	s30, [r6]
 8001134:	edd5 7a00 	vldr	s15, [r5]
 8001138:	ee2f fa27 	vmul.f32	s30, s30, s15
		q2q2 = q2 * q2;
 800113c:	edd4 ca00 	vldr	s25, [r4]
 8001140:	edd4 7a00 	vldr	s15, [r4]
 8001144:	ee6c caa7 	vmul.f32	s25, s25, s15
		q2q3 = q2 * q3;
 8001148:	ed94 7a00 	vldr	s14, [r4]
 800114c:	edd5 7a00 	vldr	s15, [r5]
 8001150:	ee27 0a27 	vmul.f32	s0, s14, s15
 8001154:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
		q3q3 = q3 * q3;
 8001158:	edd5 fa00 	vldr	s31, [r5]
 800115c:	edd5 7a00 	vldr	s15, [r5]
 8001160:	ee6f faa7 	vmul.f32	s31, s31, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001164:	ee2c 7a2e 	vmul.f32	s14, s24, s29
 8001168:	edd5 7a00 	vldr	s15, [r5]
 800116c:	ed8d 6a04 	vstr	s12, [sp, #16]
 8001170:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001178:	edd4 7a00 	vldr	s15, [r4]
 800117c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001184:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 8001188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118c:	ee6b 7a28 	vmul.f32	s15, s22, s17
 8001190:	ed94 6a00 	vldr	s12, [r4]
 8001194:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119c:	ee6b 7aa8 	vmul.f32	s15, s23, s17
 80011a0:	ed95 6a00 	vldr	s12, [r5]
 80011a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80011a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ac:	ee6c 7a2c 	vmul.f32	s15, s24, s25
 80011b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b4:	ee6c 7a2f 	vmul.f32	s15, s24, s31
 80011b8:	ee37 7a67 	vsub.f32	s14, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80011bc:	edd5 7a00 	vldr	s15, [r5]
 80011c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011c4:	ee2b 6a2e 	vmul.f32	s12, s22, s29
 80011c8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80011cc:	ed96 6a00 	vldr	s12, [r6]
 80011d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80011d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80011d8:	edd4 6a00 	vldr	s13, [r4]
 80011dc:	edcd 5a05 	vstr	s11, [sp, #20]
 80011e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80011e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011e8:	ee6b 6a0d 	vmul.f32	s13, s22, s26
 80011ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80011f0:	ee6b 6a2c 	vmul.f32	s13, s22, s25
 80011f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011f8:	ee6b 6aad 	vmul.f32	s13, s23, s27
 80011fc:	ed95 6a00 	vldr	s12, [r5]
 8001200:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001208:	ee6b 6a2f 	vmul.f32	s13, s22, s31
 800120c:	ee77 7ae6 	vsub.f32	s15, s15, s13
		_2bx = sqrt(hx * hx + hy * hy);
 8001210:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001214:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001218:	ee77 6a27 	vadd.f32	s13, s14, s15
 800121c:	ee16 0a90 	vmov	r0, s13
 8001220:	f7ff f93e 	bl	80004a0 <__aeabi_f2d>
 8001224:	ec41 0b10 	vmov	d0, r0, r1
 8001228:	f005 fe30 	bl	8006e8c <sqrt>
 800122c:	ec51 0b10 	vmov	r0, r1, d0
 8001230:	f7ff fc3a 	bl	8000aa8 <__aeabi_d2f>
 8001234:	ee07 0a10 	vmov	s14, r0
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001238:	edd4 7a00 	vldr	s15, [r4]
 800123c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8001240:	ed96 8a00 	vldr	s16, [r6]
 8001244:	ed9d 6a04 	vldr	s12, [sp, #16]
 8001248:	ee26 8a08 	vmul.f32	s16, s12, s16
 800124c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001250:	ee6b eaae 	vmul.f32	s29, s23, s29
 8001254:	ee77 7aae 	vadd.f32	s15, s15, s29
 8001258:	edd5 ea00 	vldr	s29, [r5]
 800125c:	eddd 5a05 	vldr	s11, [sp, #20]
 8001260:	ee65 eaae 	vmul.f32	s29, s11, s29
 8001264:	ee77 7aae 	vadd.f32	s15, s15, s29
 8001268:	ee6b ea8d 	vmul.f32	s29, s23, s26
 800126c:	ee77 7aee 	vsub.f32	s15, s15, s29
 8001270:	ee6b 6a2d 	vmul.f32	s13, s22, s27
 8001274:	ed95 6a00 	vldr	s12, [r5]
 8001278:	ee66 6a86 	vmul.f32	s13, s13, s12
 800127c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001280:	ee6b 6aac 	vmul.f32	s13, s23, s25
 8001284:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001288:	ee6b 6aaf 	vmul.f32	s13, s23, s31
 800128c:	ee77 7aa6 	vadd.f32	s15, s15, s13
		_4bx = 2.0f * _2bx;
 8001290:	ee77 6a07 	vadd.f32	s13, s14, s14
		_4bz = 2.0f * _2bz;
 8001294:	ee77 4aa7 	vadd.f32	s9, s15, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001298:	ee3f 5a0f 	vadd.f32	s10, s30, s30
 800129c:	eddd 5a08 	vldr	s11, [sp, #32]
 80012a0:	ee35 5a65 	vsub.f32	s10, s10, s11
 80012a4:	ed9d 6a01 	vldr	s12, [sp, #4]
 80012a8:	ee35 5a46 	vsub.f32	s10, s10, s12
 80012ac:	ee2d 8ac5 	vnmul.f32	s16, s27, s10
 80012b0:	ee7e 5a0e 	vadd.f32	s11, s28, s28
 80012b4:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 80012b8:	ee74 5a25 	vadd.f32	s11, s8, s11
 80012bc:	ed9d 6a02 	vldr	s12, [sp, #8]
 80012c0:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80012c4:	ee28 6aa5 	vmul.f32	s12, s17, s11
 80012c8:	ee38 8a06 	vadd.f32	s16, s16, s12
 80012cc:	ed94 6a00 	vldr	s12, [r4]
 80012d0:	ee27 4a86 	vmul.f32	s8, s15, s12
 80012d4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80012d8:	ee33 6aec 	vsub.f32	s12, s7, s25
 80012dc:	ee76 fa6f 	vsub.f32	s31, s12, s31
 80012e0:	ee67 fa2f 	vmul.f32	s31, s14, s31
 80012e4:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 80012e8:	ee3f 6a61 	vsub.f32	s12, s30, s3
 80012ec:	ee27 6a86 	vmul.f32	s12, s15, s12
 80012f0:	ee7f fa86 	vadd.f32	s31, s31, s12
 80012f4:	ee3f cacc 	vsub.f32	s24, s31, s24
 80012f8:	ee24 6a0c 	vmul.f32	s12, s8, s24
 80012fc:	ee38 8a46 	vsub.f32	s16, s16, s12
 8001300:	eeb1 6a47 	vneg.f32	s12, s14
 8001304:	ed95 4a00 	vldr	s8, [r5]
 8001308:	ee26 3a04 	vmul.f32	s6, s12, s8
 800130c:	ed96 4a00 	vldr	s8, [r6]
 8001310:	ee27 4a84 	vmul.f32	s8, s15, s8
 8001314:	ee33 4a04 	vadd.f32	s8, s6, s8
 8001318:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
 800131c:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8001320:	e008      	b.n	8001334 <MadgwickAHRSupdate+0x438>
 8001322:	bf00      	nop
 8001324:	200000d4 	.word	0x200000d4
 8001328:	200000d8 	.word	0x200000d8
 800132c:	200000dc 	.word	0x200000dc
 8001330:	20000004 	.word	0x20000004
 8001334:	ee30 3ac1 	vsub.f32	s6, s1, s2
 8001338:	ee27 3a03 	vmul.f32	s6, s14, s6
 800133c:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8001340:	ee3e ea00 	vadd.f32	s28, s28, s0
 8001344:	ee27 ea8e 	vmul.f32	s28, s15, s28
 8001348:	ee33 ea0e 	vadd.f32	s28, s6, s28
 800134c:	ee3e ba4b 	vsub.f32	s22, s28, s22
 8001350:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8001354:	ee38 8a04 	vadd.f32	s16, s16, s8
 8001358:	ed94 4a00 	vldr	s8, [r4]
 800135c:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001360:	ee31 0a8f 	vadd.f32	s0, s3, s30
 8001364:	ee27 0a00 	vmul.f32	s0, s14, s0
 8001368:	ee33 facd 	vsub.f32	s30, s7, s26
 800136c:	ee3f fa6c 	vsub.f32	s30, s30, s25
 8001370:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8001374:	ee30 0a0f 	vadd.f32	s0, s0, s30
 8001378:	ee70 ba6b 	vsub.f32	s23, s0, s23
 800137c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 8001380:	ee38 8a04 	vadd.f32	s16, s16, s8
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001384:	ed9d 2a07 	vldr	s4, [sp, #28]
 8001388:	ee62 ea05 	vmul.f32	s29, s4, s10
 800138c:	eddd 2a06 	vldr	s5, [sp, #24]
 8001390:	ee22 4aa5 	vmul.f32	s8, s5, s11
 8001394:	ee7e ea84 	vadd.f32	s29, s29, s8
 8001398:	ed96 4a00 	vldr	s8, [r6]
 800139c:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 80013a0:	ee24 4a23 	vmul.f32	s8, s8, s7
 80013a4:	ee3d da0d 	vadd.f32	s26, s26, s26
 80013a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013ac:	ee30 da4d 	vsub.f32	s26, s0, s26
 80013b0:	ee7c caac 	vadd.f32	s25, s25, s25
 80013b4:	ee7d ca6c 	vsub.f32	s25, s26, s25
 80013b8:	ed9d 3a03 	vldr	s6, [sp, #12]
 80013bc:	ee3c 0ac3 	vsub.f32	s0, s25, s6
 80013c0:	ee24 4a00 	vmul.f32	s8, s8, s0
 80013c4:	ee7e eac4 	vsub.f32	s29, s29, s8
 80013c8:	ed95 4a00 	vldr	s8, [r5]
 80013cc:	ee27 4a84 	vmul.f32	s8, s15, s8
 80013d0:	ee2c 4a04 	vmul.f32	s8, s24, s8
 80013d4:	ee7e ea84 	vadd.f32	s29, s29, s8
 80013d8:	ed94 4a00 	vldr	s8, [r4]
 80013dc:	ee27 4a04 	vmul.f32	s8, s14, s8
 80013e0:	ed97 3a00 	vldr	s6, [r7]
 80013e4:	ee27 3a83 	vmul.f32	s6, s15, s6
 80013e8:	ee34 4a03 	vadd.f32	s8, s8, s6
 80013ec:	ee2b 4a04 	vmul.f32	s8, s22, s8
 80013f0:	ee7e ea84 	vadd.f32	s29, s29, s8
 80013f4:	ed95 4a00 	vldr	s8, [r5]
 80013f8:	ee27 4a04 	vmul.f32	s8, s14, s8
 80013fc:	ed96 3a00 	vldr	s6, [r6]
 8001400:	ee24 3a83 	vmul.f32	s6, s9, s6
 8001404:	ee34 4a43 	vsub.f32	s8, s8, s6
 8001408:	ee2b 4a84 	vmul.f32	s8, s23, s8
 800140c:	ee7e ea84 	vadd.f32	s29, s29, s8
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001410:	ee62 cac5 	vnmul.f32	s25, s5, s10
 8001414:	ee22 4a25 	vmul.f32	s8, s4, s11
 8001418:	ee7c ca84 	vadd.f32	s25, s25, s8
 800141c:	ed94 4a00 	vldr	s8, [r4]
 8001420:	ee64 3a23 	vmul.f32	s7, s8, s7
 8001424:	ee20 0a23 	vmul.f32	s0, s0, s7
 8001428:	ee7c cac0 	vsub.f32	s25, s25, s0
 800142c:	eef1 6a66 	vneg.f32	s13, s13
 8001430:	ed94 4a00 	vldr	s8, [r4]
 8001434:	ee26 4a84 	vmul.f32	s8, s13, s8
 8001438:	edd7 3a00 	vldr	s7, [r7]
 800143c:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8001440:	ee34 4a63 	vsub.f32	s8, s8, s7
 8001444:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8001448:	ee7c ca84 	vadd.f32	s25, s25, s8
 800144c:	ed96 4a00 	vldr	s8, [r6]
 8001450:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001454:	edd5 3a00 	vldr	s7, [r5]
 8001458:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800145c:	ee34 4a23 	vadd.f32	s8, s8, s7
 8001460:	ee2b 4a04 	vmul.f32	s8, s22, s8
 8001464:	ee7c ca84 	vadd.f32	s25, s25, s8
 8001468:	ed97 4a00 	vldr	s8, [r7]
 800146c:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001470:	edd4 3a00 	vldr	s7, [r4]
 8001474:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8001478:	ee74 4a64 	vsub.f32	s9, s8, s9
 800147c:	ee6b 4aa4 	vmul.f32	s9, s23, s9
 8001480:	ee7c caa4 	vadd.f32	s25, s25, s9
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001484:	ee68 8a85 	vmul.f32	s17, s17, s10
 8001488:	ee6d daa5 	vmul.f32	s27, s27, s11
 800148c:	ee78 8aad 	vadd.f32	s17, s17, s27
 8001490:	edd5 5a00 	vldr	s11, [r5]
 8001494:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001498:	edd6 5a00 	vldr	s11, [r6]
 800149c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80014a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80014a4:	ee2c ca26 	vmul.f32	s24, s24, s13
 80014a8:	ee78 8a8c 	vadd.f32	s17, s17, s24
 80014ac:	edd7 6a00 	vldr	s13, [r7]
 80014b0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80014b4:	edd4 6a00 	vldr	s13, [r4]
 80014b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80014c0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80014c4:	ee78 7a8b 	vadd.f32	s15, s17, s22
 80014c8:	edd6 6a00 	vldr	s13, [r6]
 80014cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014d0:	ee6b ba87 	vmul.f32	s23, s23, s14
 80014d4:	ee77 baab 	vadd.f32	s23, s15, s23
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80014d8:	ee68 7a08 	vmul.f32	s15, s16, s16
 80014dc:	ee2e 0aae 	vmul.f32	s0, s29, s29
 80014e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80014e4:	ee2c 0aac 	vmul.f32	s0, s25, s25
 80014e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80014ec:	ee2b 0aab 	vmul.f32	s0, s23, s23
 80014f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80014f4:	f7ff fb28 	bl	8000b48 <invSqrt>
		s0 *= recipNorm;
 80014f8:	ee28 8a00 	vmul.f32	s16, s16, s0
		s1 *= recipNorm;
 80014fc:	ee6e ea80 	vmul.f32	s29, s29, s0
		s2 *= recipNorm;
 8001500:	ee6c ca80 	vmul.f32	s25, s25, s0
		s3 *= recipNorm;
 8001504:	ee6b ba80 	vmul.f32	s23, s23, s0
		qDot1 -= beta * s0;
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <MadgwickAHRSupdate+0x708>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001512:	ee7a aac8 	vsub.f32	s21, s21, s16
		qDot2 -= beta * s1;
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 800151e:	ee3a aa6e 	vsub.f32	s20, s20, s29
		qDot3 -= beta * s2;
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee6c caa7 	vmul.f32	s25, s25, s15
 800152a:	ee79 9aec 	vsub.f32	s19, s19, s25
		qDot4 -= beta * s3;
 800152e:	ed93 0a00 	vldr	s0, [r3]
 8001532:	ee6b ba80 	vmul.f32	s23, s23, s0
 8001536:	ee39 9a6b 	vsub.f32	s18, s18, s23
	q0 += qDot1 * (1.0f / sampleFreq);
 800153a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8001608 <MadgwickAHRSupdate+0x70c>
 800153e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8001542:	4f32      	ldr	r7, [pc, #200]	; (800160c <MadgwickAHRSupdate+0x710>)
 8001544:	ed97 7a00 	vldr	s14, [r7]
 8001548:	ee7a aa87 	vadd.f32	s21, s21, s14
 800154c:	edc7 aa00 	vstr	s21, [r7]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001550:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001554:	4e2e      	ldr	r6, [pc, #184]	; (8001610 <MadgwickAHRSupdate+0x714>)
 8001556:	ed96 7a00 	vldr	s14, [r6]
 800155a:	ee3a aa07 	vadd.f32	s20, s20, s14
 800155e:	ed86 aa00 	vstr	s20, [r6]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001562:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8001566:	4d2b      	ldr	r5, [pc, #172]	; (8001614 <MadgwickAHRSupdate+0x718>)
 8001568:	ed95 7a00 	vldr	s14, [r5]
 800156c:	ee79 9a87 	vadd.f32	s19, s19, s14
 8001570:	edc5 9a00 	vstr	s19, [r5]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001574:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001578:	4c27      	ldr	r4, [pc, #156]	; (8001618 <MadgwickAHRSupdate+0x71c>)
 800157a:	edd4 7a00 	vldr	s15, [r4]
 800157e:	ee39 9a27 	vadd.f32	s18, s18, s15
 8001582:	ed84 9a00 	vstr	s18, [r4]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001586:	edd7 7a00 	vldr	s15, [r7]
 800158a:	ed97 0a00 	vldr	s0, [r7]
 800158e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001592:	ed96 0a00 	vldr	s0, [r6]
 8001596:	ed96 7a00 	vldr	s14, [r6]
 800159a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800159e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80015a2:	ed95 0a00 	vldr	s0, [r5]
 80015a6:	ed95 7a00 	vldr	s14, [r5]
 80015aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80015ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80015b2:	ed94 0a00 	vldr	s0, [r4]
 80015b6:	ed94 7a00 	vldr	s14, [r4]
 80015ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80015be:	ee37 0a80 	vadd.f32	s0, s15, s0
 80015c2:	f7ff fac1 	bl	8000b48 <invSqrt>
	q0 *= recipNorm;
 80015c6:	edd7 7a00 	vldr	s15, [r7]
 80015ca:	ee60 7a27 	vmul.f32	s15, s0, s15
 80015ce:	edc7 7a00 	vstr	s15, [r7]
	q1 *= recipNorm;
 80015d2:	edd6 7a00 	vldr	s15, [r6]
 80015d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80015da:	edc6 7a00 	vstr	s15, [r6]
	q2 *= recipNorm;
 80015de:	edd5 7a00 	vldr	s15, [r5]
 80015e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80015e6:	edc5 7a00 	vstr	s15, [r5]
	q3 *= recipNorm;
 80015ea:	edd4 7a00 	vldr	s15, [r4]
 80015ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80015f2:	ed84 0a00 	vstr	s0, [r4]
}
 80015f6:	b00f      	add	sp, #60	; 0x3c
 80015f8:	ecbd 8b10 	vpop	{d8-d15}
 80015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80015fe:	f7ff fabf 	bl	8000b80 <MadgwickAHRSupdateIMU>
		return;
 8001602:	e7f8      	b.n	80015f6 <MadgwickAHRSupdate+0x6fa>
 8001604:	20000000 	.word	0x20000000
 8001608:	3b2c7692 	.word	0x3b2c7692
 800160c:	20000004 	.word	0x20000004
 8001610:	200000d4 	.word	0x200000d4
 8001614:	200000d8 	.word	0x200000d8
 8001618:	200000dc 	.word	0x200000dc

0800161c <readAllSensors>:
    quatBuf[1] = q1;
    quatBuf[2] = q2;
    quatBuf[3] = q3;
}

void readAllSensors(uint8_t *GyroTempBuf, uint8_t *AccTempBuf, uint8_t *MagTempBuf) {
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	460d      	mov	r5, r1
 8001620:	4614      	mov	r4, r2
    L3GD20_Read(GyroTempBuf, L3GD20_OUT_X_L_ADDR, 6);
 8001622:	2206      	movs	r2, #6
 8001624:	2128      	movs	r1, #40	; 0x28
 8001626:	f000 fd1b 	bl	8002060 <L3GD20_Read>
    LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A, AccTempBuf, 6);
 800162a:	2306      	movs	r3, #6
 800162c:	462a      	mov	r2, r5
 800162e:	2128      	movs	r1, #40	; 0x28
 8001630:	2032      	movs	r0, #50	; 0x32
 8001632:	f000 fea9 	bl	8002388 <LSM303DLHC_Read>
    LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M, MagTempBuf, 6);
 8001636:	2306      	movs	r3, #6
 8001638:	4622      	mov	r2, r4
 800163a:	2103      	movs	r1, #3
 800163c:	203c      	movs	r0, #60	; 0x3c
 800163e:	f000 fea3 	bl	8002388 <LSM303DLHC_Read>
 8001642:	bd38      	pop	{r3, r4, r5, pc}

08001644 <readRawGyro>:
}

void readRawGyro(uint8_t *GyroTempBuf) {
 8001644:	b508      	push	{r3, lr}
    L3GD20_Read(GyroTempBuf, L3GD20_OUT_X_L_ADDR, 6);
 8001646:	2206      	movs	r2, #6
 8001648:	2128      	movs	r1, #40	; 0x28
 800164a:	f000 fd09 	bl	8002060 <L3GD20_Read>
 800164e:	bd08      	pop	{r3, pc}

08001650 <Demo_GyroConfig>:
 * @brief  Configure the Mems to gyroscope application.
 * @param  None
 * @retval None
 */
void Demo_GyroConfig(void)
{
 8001650:	b530      	push	{r4, r5, lr}
 8001652:	b085      	sub	sp, #20
    L3GD20_InitTypeDef L3GD20_InitStructure;
    L3GD20_FilterConfigTypeDef L3GD20_FilterStructure;

    /* Configure Mems L3GD20 */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001654:	2508      	movs	r5, #8
 8001656:	f88d 5008 	strb.w	r5, [sp, #8]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_3;
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	f88d 3009 	strb.w	r3, [sp, #9]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001660:	2207      	movs	r2, #7
 8001662:	f88d 200a 	strb.w	r2, [sp, #10]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	f88d 200b 	strb.w	r2, [sp, #11]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Single;
 800166c:	f88d 300c 	strb.w	r3, [sp, #12]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001670:	2400      	movs	r4, #0
 8001672:	f88d 400d 	strb.w	r4, [sp, #13]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_250;
 8001676:	f88d 400e 	strb.w	r4, [sp, #14]
    L3GD20_Init(&L3GD20_InitStructure);
 800167a:	eb0d 0005 	add.w	r0, sp, r5
 800167e:	f000 fcc1 	bl	8002004 <L3GD20_Init>

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_REF_SIGNAL;
 8001682:	2310      	movs	r3, #16
 8001684:	f88d 3004 	strb.w	r3, [sp, #4]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_5;
 8001688:	2305      	movs	r3, #5
 800168a:	f88d 3005 	strb.w	r3, [sp, #5]
    L3GD20_FilterConfig(&L3GD20_FilterStructure) ;
 800168e:	a801      	add	r0, sp, #4
 8001690:	f000 fd30 	bl	80020f4 <L3GD20_FilterConfig>

    L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_DISABLE);
 8001694:	4620      	mov	r0, r4
 8001696:	f000 fd48 	bl	800212a <L3GD20_FilterCmd>

    L3GD20_INT2InterruptCmd(L3GD20_INT2INTERRUPT_ENABLE);
 800169a:	4628      	mov	r0, r5
 800169c:	f000 fd12 	bl	80020c4 <L3GD20_INT2InterruptCmd>

    uint8_t tmpreg = 0;
 80016a0:	a804      	add	r0, sp, #16
 80016a2:	f800 4d0d 	strb.w	r4, [r0, #-13]!
    L3GD20_Read(&tmpreg, L3GD20_CTRL_REG4_ADDR, 1);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2123      	movs	r1, #35	; 0x23
 80016aa:	f000 fcd9 	bl	8002060 <L3GD20_Read>
    /* Switch the sensitivity value set in the CRTL4 */
    switch(tmpreg & 0x30)
 80016ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80016b2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80016b6:	2a10      	cmp	r2, #16
 80016b8:	d00c      	beq.n	80016d4 <Demo_GyroConfig+0x84>
 80016ba:	2a20      	cmp	r2, #32
 80016bc:	d00e      	beq.n	80016dc <Demo_GyroConfig+0x8c>
 80016be:	b12a      	cbz	r2, 80016cc <Demo_GyroConfig+0x7c>

        case 0x20:
            GyroSensitivity=L3G_Sensitivity_2000dps;
            break;
    }
    Gyro_LBEFlag = tmpreg & 0x40;
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <Demo_GyroConfig+0x94>)
 80016c6:	7013      	strb	r3, [r2, #0]
}
 80016c8:	b005      	add	sp, #20
 80016ca:	bd30      	pop	{r4, r5, pc}
            GyroSensitivity=L3G_Sensitivity_250dps;
 80016cc:	4906      	ldr	r1, [pc, #24]	; (80016e8 <Demo_GyroConfig+0x98>)
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <Demo_GyroConfig+0x9c>)
 80016d0:	6011      	str	r1, [r2, #0]
            break;
 80016d2:	e7f5      	b.n	80016c0 <Demo_GyroConfig+0x70>
            GyroSensitivity=L3G_Sensitivity_500dps;
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <Demo_GyroConfig+0xa0>)
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <Demo_GyroConfig+0x9c>)
 80016d8:	6011      	str	r1, [r2, #0]
            break;
 80016da:	e7f1      	b.n	80016c0 <Demo_GyroConfig+0x70>
            GyroSensitivity=L3G_Sensitivity_2000dps;
 80016dc:	4905      	ldr	r1, [pc, #20]	; (80016f4 <Demo_GyroConfig+0xa4>)
 80016de:	4a03      	ldr	r2, [pc, #12]	; (80016ec <Demo_GyroConfig+0x9c>)
 80016e0:	6011      	str	r1, [r2, #0]
            break;
 80016e2:	e7ed      	b.n	80016c0 <Demo_GyroConfig+0x70>
 80016e4:	2000011a 	.word	0x2000011a
 80016e8:	42e491ec 	.word	0x42e491ec
 80016ec:	20000110 	.word	0x20000110
 80016f0:	42649254 	.word	0x42649254
 80016f4:	41648f5c 	.word	0x41648f5c

080016f8 <Demo_CompassConfig>:
 * @brief  Configure the Mems to compass application.
 * @param  None
 * @retval None
 */
void Demo_CompassConfig(void)
{
 80016f8:	b510      	push	{r4, lr}
 80016fa:	b086      	sub	sp, #24
    LSM303DLHCMag_InitTypeDef LSM303DLHC_InitStructure;
    LSM303DLHCAcc_InitTypeDef LSM303DLHCAcc_InitStructure;
    LSM303DLHCAcc_FilterConfigTypeDef LSM303DLHCFilter_InitStructure;

    /* Configure MEMS magnetometer main parameters: temp, working mode, full Scale and Data rate */
    LSM303DLHC_InitStructure.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_DISABLE;
 80016fc:	2400      	movs	r4, #0
 80016fe:	f88d 4014 	strb.w	r4, [sp, #20]
    LSM303DLHC_InitStructure.MagOutput_DataRate =LSM303DLHC_ODR_220_HZ ;
 8001702:	231c      	movs	r3, #28
 8001704:	f88d 3015 	strb.w	r3, [sp, #21]
    LSM303DLHC_InitStructure.MagFull_Scale = LSM303DLHC_FS_1_3_GA;
 8001708:	2320      	movs	r3, #32
 800170a:	f88d 3017 	strb.w	r3, [sp, #23]
    LSM303DLHC_InitStructure.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION; //DO NOT CHANGE - IT DOES ONLY ONE CONVERSIO AND STOPS
 800170e:	f88d 4016 	strb.w	r4, [sp, #22]
    LSM303DLHC_MagInit(&LSM303DLHC_InitStructure);
 8001712:	a805      	add	r0, sp, #20
 8001714:	f000 fe04 	bl	8002320 <LSM303DLHC_MagInit>

    /* Fill the accelerometer structure */
    LSM303DLHCAcc_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE; // normal or low power mode
 8001718:	f88d 400c 	strb.w	r4, [sp, #12]
    LSM303DLHCAcc_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_1344_HZ;
 800171c:	2390      	movs	r3, #144	; 0x90
 800171e:	f88d 300d 	strb.w	r3, [sp, #13]
    LSM303DLHCAcc_InitStructure.Axes_Enable= LSM303DLHC_AXES_ENABLE; // all axes are enabled
 8001722:	2307      	movs	r3, #7
 8001724:	f88d 300e 	strb.w	r3, [sp, #14]
    LSM303DLHCAcc_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G; //2G, 4G, 8G, 16G
 8001728:	f88d 4012 	strb.w	r4, [sp, #18]
    LSM303DLHCAcc_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous; // Single or Continous
 800172c:	f88d 4010 	strb.w	r4, [sp, #16]
    LSM303DLHCAcc_InitStructure.Endianness=LSM303DLHC_BLE_LSB;
 8001730:	f88d 4011 	strb.w	r4, [sp, #17]
    LSM303DLHCAcc_InitStructure.High_Resolution=LSM303DLHC_HR_ENABLE; // High resolution enable
 8001734:	2308      	movs	r3, #8
 8001736:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Configure the accelerometer main parameters */
    LSM303DLHC_AccInit(&LSM303DLHCAcc_InitStructure);
 800173a:	a803      	add	r0, sp, #12
 800173c:	f000 fdc2 	bl	80022c4 <LSM303DLHC_AccInit>

    /* Fill the accelerometer LPF structure */
    LSM303DLHCFilter_InitStructure.HighPassFilter_Mode_Selection = LSM303DLHC_HPM_NORMAL_MODE;
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	f88d 3008 	strb.w	r3, [sp, #8]
    LSM303DLHCFilter_InitStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_64; // 8, 16, 32, 64
 8001746:	2330      	movs	r3, #48	; 0x30
 8001748:	f88d 3009 	strb.w	r3, [sp, #9]
    LSM303DLHCFilter_InitStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 800174c:	f88d 400a 	strb.w	r4, [sp, #10]
    LSM303DLHCFilter_InitStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8001750:	f88d 400b 	strb.w	r4, [sp, #11]

    /* Configure the accelerometer LPF main parameters */
    LSM303DLHC_AccFilterConfig(&LSM303DLHCFilter_InitStructure);
 8001754:	a802      	add	r0, sp, #8
 8001756:	f000 fe45 	bl	80023e4 <LSM303DLHC_AccFilterConfig>

    LSM303DLHC_AccFilterCmd(LSM303DLHC_HIGHPASSFILTER_DISABLE);
 800175a:	4620      	mov	r0, r4
 800175c:	f000 fe62 	bl	8002424 <LSM303DLHC_AccFilterCmd>

    uint8_t CTRLB = 0;
 8001760:	aa06      	add	r2, sp, #24
 8001762:	f802 4d11 	strb.w	r4, [r2, #-17]!
    LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &CTRLB, 1);
 8001766:	2301      	movs	r3, #1
 8001768:	4619      	mov	r1, r3
 800176a:	203c      	movs	r0, #60	; 0x3c
 800176c:	f000 fe0c 	bl	8002388 <LSM303DLHC_Read>

    /* Switch the sensitivity set in the CRTLB*/
    switch(CTRLB & 0xE0)
 8001770:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001774:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001778:	2b80      	cmp	r3, #128	; 0x80
 800177a:	d04d      	beq.n	8001818 <Demo_CompassConfig+0x120>
 800177c:	d82b      	bhi.n	80017d6 <Demo_CompassConfig+0xde>
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d038      	beq.n	80017f4 <Demo_CompassConfig+0xfc>
 8001782:	2b60      	cmp	r3, #96	; 0x60
 8001784:	d03f      	beq.n	8001806 <Demo_CompassConfig+0x10e>
 8001786:	2b20      	cmp	r3, #32
 8001788:	d107      	bne.n	800179a <Demo_CompassConfig+0xa2>
    {
        case LSM303DLHC_FS_1_3_GA:
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_3Ga;
 800178a:	f240 424c 	movw	r2, #1100	; 0x44c
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 8001790:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_3Ga;
 8001792:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8001796:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001798:	801a      	strh	r2, [r3, #0]
            break;
    }

    uint8_t ctrlx[2];
    /* Read the register content */
    LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrlx, 2);
 800179a:	2302      	movs	r3, #2
 800179c:	aa01      	add	r2, sp, #4
 800179e:	2123      	movs	r1, #35	; 0x23
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdf1 	bl	8002388 <LSM303DLHC_Read>

    if(ctrlx[1]&0x40)
 80017a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017ae:	d04c      	beq.n	800184a <Demo_CompassConfig+0x152>
    {
        Accel_cDivider=64;
 80017b0:	2240      	movs	r2, #64	; 0x40
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <Demo_CompassConfig+0x1b0>)
 80017b4:	701a      	strb	r2, [r3, #0]
        LSM_Acc_Sensitivity = 0.25;
 80017b6:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <Demo_CompassConfig+0x1b4>)
 80017bc:	601a      	str	r2, [r3, #0]
            case LSM303DLHC_FULLSCALE_16G:
                LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_16g;
                break;
        }
    }
    Accel_LBEorFIFOFlag = (ctrlx[0] & 0x40) || (ctrlx[1] & 0x40);
 80017be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017c6:	d165      	bne.n	8001894 <Demo_CompassConfig+0x19c>
 80017c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017d0:	d15e      	bne.n	8001890 <Demo_CompassConfig+0x198>
 80017d2:	2200      	movs	r2, #0
 80017d4:	e05f      	b.n	8001896 <Demo_CompassConfig+0x19e>
    switch(CTRLB & 0xE0)
 80017d6:	2bc0      	cmp	r3, #192	; 0xc0
 80017d8:	d027      	beq.n	800182a <Demo_CompassConfig+0x132>
 80017da:	2be0      	cmp	r3, #224	; 0xe0
 80017dc:	d02e      	beq.n	800183c <Demo_CompassConfig+0x144>
 80017de:	2ba0      	cmp	r3, #160	; 0xa0
 80017e0:	d1db      	bne.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4_7Ga;
 80017e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 80017e8:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4_7Ga;
 80017ea:	f240 1263 	movw	r2, #355	; 0x163
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 80017f0:	801a      	strh	r2, [r3, #0]
            break;
 80017f2:	e7d2      	b.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_9Ga;
 80017f4:	f240 3257 	movw	r2, #855	; 0x357
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 80017fa:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_9Ga;
 80017fc:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001802:	801a      	strh	r2, [r3, #0]
            break;
 8001804:	e7c9      	b.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 8001806:	f240 229e 	movw	r2, #670	; 0x29e
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 800180c:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;
 800180e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001814:	801a      	strh	r2, [r3, #0]
            break;
 8001816:	e7c0      	b.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4Ga;
 8001818:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 800181e:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4Ga;
 8001820:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001826:	801a      	strh	r2, [r3, #0]
            break;
 8001828:	e7b7      	b.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_5_6Ga;
 800182a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 8001830:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_5_6Ga;
 8001832:	f240 1227 	movw	r2, #295	; 0x127
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001838:	801a      	strh	r2, [r3, #0]
            break;
 800183a:	e7ae      	b.n	800179a <Demo_CompassConfig+0xa2>
            Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga;
 800183c:	22e6      	movs	r2, #230	; 0xe6
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <Demo_CompassConfig+0x1a8>)
 8001840:	801a      	strh	r2, [r3, #0]
            Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
 8001842:	22cd      	movs	r2, #205	; 0xcd
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <Demo_CompassConfig+0x1ac>)
 8001846:	801a      	strh	r2, [r3, #0]
            break;
 8001848:	e7a7      	b.n	800179a <Demo_CompassConfig+0xa2>
        Accel_cDivider=16;
 800184a:	2210      	movs	r2, #16
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <Demo_CompassConfig+0x1b0>)
 800184e:	701a      	strb	r2, [r3, #0]
        switch(ctrlx[0] & 0x30)
 8001850:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001854:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001858:	4293      	cmp	r3, r2
 800185a:	d00f      	beq.n	800187c <Demo_CompassConfig+0x184>
 800185c:	d907      	bls.n	800186e <Demo_CompassConfig+0x176>
 800185e:	2b20      	cmp	r3, #32
 8001860:	d011      	beq.n	8001886 <Demo_CompassConfig+0x18e>
 8001862:	2b30      	cmp	r3, #48	; 0x30
 8001864:	d1ab      	bne.n	80017be <Demo_CompassConfig+0xc6>
                LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_16g;
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <Demo_CompassConfig+0x1b8>)
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <Demo_CompassConfig+0x1b4>)
 800186a:	601a      	str	r2, [r3, #0]
                break;
 800186c:	e7a7      	b.n	80017be <Demo_CompassConfig+0xc6>
        switch(ctrlx[0] & 0x30)
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1a5      	bne.n	80017be <Demo_CompassConfig+0xc6>
                LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_2g;
 8001872:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <Demo_CompassConfig+0x1b4>)
 8001878:	601a      	str	r2, [r3, #0]
                break;
 800187a:	e7a0      	b.n	80017be <Demo_CompassConfig+0xc6>
                LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_4g;
 800187c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <Demo_CompassConfig+0x1b4>)
 8001882:	601a      	str	r2, [r3, #0]
                break;
 8001884:	e79b      	b.n	80017be <Demo_CompassConfig+0xc6>
                LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_8g;
 8001886:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <Demo_CompassConfig+0x1b4>)
 800188c:	601a      	str	r2, [r3, #0]
                break;
 800188e:	e796      	b.n	80017be <Demo_CompassConfig+0xc6>
    Accel_LBEorFIFOFlag = (ctrlx[0] & 0x40) || (ctrlx[1] & 0x40);
 8001890:	2201      	movs	r2, #1
 8001892:	e000      	b.n	8001896 <Demo_CompassConfig+0x19e>
 8001894:	2201      	movs	r2, #1
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <Demo_CompassConfig+0x1bc>)
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	b006      	add	sp, #24
 800189c:	bd10      	pop	{r4, pc}
 800189e:	bf00      	nop
 80018a0:	2000012e 	.word	0x2000012e
 80018a4:	20000130 	.word	0x20000130
 80018a8:	20000168 	.word	0x20000168
 80018ac:	20000008 	.word	0x20000008
 80018b0:	3daacd9f 	.word	0x3daacd9f
 80018b4:	200000f2 	.word	0x200000f2

080018b8 <processGyroData>:



void processGyroData(float *GyroBuf, uint8_t *GyroTempBuf) {
 80018b8:	b430      	push	{r4, r5}
 80018ba:	b082      	sub	sp, #8
    int16_t RawData[3] = {0};
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f8ad 3004 	strh.w	r3, [sp, #4]
    int i = 0;

    /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
    if(!(Gyro_LBEFlag))
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <processGyroData+0x88>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b18b      	cbz	r3, 80018ee <processGyroData+0x36>
 80018ca:	2300      	movs	r3, #0
 80018cc:	e01d      	b.n	800190a <processGyroData+0x52>
    {
        for(i=0; i<3; i++)
        {
            RawData[i]=(int16_t)(((uint16_t)GyroTempBuf[2*i+1] << 8) + GyroTempBuf[2*i]);
 80018ce:	005a      	lsls	r2, r3, #1
 80018d0:	188c      	adds	r4, r1, r2
 80018d2:	7865      	ldrb	r5, [r4, #1]
 80018d4:	f811 4013 	ldrb.w	r4, [r1, r3, lsl #1]
 80018d8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80018dc:	ad02      	add	r5, sp, #8
 80018de:	442a      	add	r2, r5
 80018e0:	f822 4c08 	strh.w	r4, [r2, #-8]
        for(i=0; i<3; i++)
 80018e4:	3301      	adds	r3, #1
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	ddf1      	ble.n	80018ce <processGyroData+0x16>
 80018ea:	2300      	movs	r3, #0
 80018ec:	e023      	b.n	8001936 <processGyroData+0x7e>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e7f9      	b.n	80018e6 <processGyroData+0x2e>
    }
    else
    {
        for(i=0; i<3; i++)
        {
            RawData[i]=(int16_t)(((uint16_t)GyroTempBuf[2*i] << 8) + GyroTempBuf[2*i+1]);
 80018f2:	005a      	lsls	r2, r3, #1
 80018f4:	f811 5013 	ldrb.w	r5, [r1, r3, lsl #1]
 80018f8:	188c      	adds	r4, r1, r2
 80018fa:	7864      	ldrb	r4, [r4, #1]
 80018fc:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8001900:	ad02      	add	r5, sp, #8
 8001902:	442a      	add	r2, r5
 8001904:	f822 4c08 	strh.w	r4, [r2, #-8]
        for(i=0; i<3; i++)
 8001908:	3301      	adds	r3, #1
 800190a:	2b02      	cmp	r3, #2
 800190c:	ddf1      	ble.n	80018f2 <processGyroData+0x3a>
 800190e:	e7ec      	b.n	80018ea <processGyroData+0x32>


    /* divide by sensitivity */
    for(i=0; i<3; i++)
    {
        GyroBuf[i]=(float)RawData[i]/GyroSensitivity;
 8001910:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001914:	a902      	add	r1, sp, #8
 8001916:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800191a:	f931 1c08 	ldrsh.w	r1, [r1, #-8]
 800191e:	ee07 1a90 	vmov	s15, r1
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	4907      	ldr	r1, [pc, #28]	; (8001944 <processGyroData+0x8c>)
 8001928:	edd1 6a00 	vldr	s13, [r1]
 800192c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001930:	ed82 7a00 	vstr	s14, [r2]
    for(i=0; i<3; i++)
 8001934:	3301      	adds	r3, #1
 8001936:	2b02      	cmp	r3, #2
 8001938:	ddea      	ble.n	8001910 <processGyroData+0x58>
    }
}
 800193a:	b002      	add	sp, #8
 800193c:	bc30      	pop	{r4, r5}
 800193e:	4770      	bx	lr
 8001940:	2000011a 	.word	0x2000011a
 8001944:	20000110 	.word	0x20000110

08001948 <UpdateGyroBias>:
void UpdateGyroBias() {
 8001948:	b570      	push	{r4, r5, r6, lr}
    HAL_Delay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194e:	f000 fdd9 	bl	8002504 <HAL_Delay>
    for (i = 0; i < 100; i++) {
 8001952:	2500      	movs	r5, #0
 8001954:	e025      	b.n	80019a2 <UpdateGyroBias+0x5a>
        readRawGyro(GyroTempBuffer);
 8001956:	4e1f      	ldr	r6, [pc, #124]	; (80019d4 <UpdateGyroBias+0x8c>)
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff fe73 	bl	8001644 <readRawGyro>
        processGyroData(GyroBuffer, GyroTempBuffer);
 800195e:	4c1e      	ldr	r4, [pc, #120]	; (80019d8 <UpdateGyroBias+0x90>)
 8001960:	4631      	mov	r1, r6
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff ffa8 	bl	80018b8 <processGyroData>
        GyroCorrectionCoeffs[0] += GyroBuffer[0];
 8001968:	ed94 7a00 	vldr	s14, [r4]
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <UpdateGyroBias+0x94>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001976:	edc3 7a00 	vstr	s15, [r3]
        GyroCorrectionCoeffs[1] += GyroBuffer[1];
 800197a:	ed94 7a01 	vldr	s14, [r4, #4]
 800197e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001986:	edc3 7a01 	vstr	s15, [r3, #4]
        GyroCorrectionCoeffs[2] += GyroBuffer[2];
 800198a:	ed94 7a02 	vldr	s14, [r4, #8]
 800198e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001996:	edc3 7a02 	vstr	s15, [r3, #8]
        HAL_Delay(10);
 800199a:	200a      	movs	r0, #10
 800199c:	f000 fdb2 	bl	8002504 <HAL_Delay>
    for (i = 0; i < 100; i++) {
 80019a0:	3501      	adds	r5, #1
 80019a2:	2d63      	cmp	r5, #99	; 0x63
 80019a4:	ddd7      	ble.n	8001956 <UpdateGyroBias+0xe>
    GyroCorrectionCoeffs[0] /= 100.0f;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <UpdateGyroBias+0x94>)
 80019a8:	edd3 6a00 	vldr	s13, [r3]
 80019ac:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80019e0 <UpdateGyroBias+0x98>
 80019b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019b4:	ed83 7a00 	vstr	s14, [r3]
    GyroCorrectionCoeffs[1] /= 100.0f;
 80019b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80019bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019c0:	ed83 7a01 	vstr	s14, [r3, #4]
    GyroCorrectionCoeffs[2] /= 100.0f;
 80019c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80019c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019cc:	ed83 7a02 	vstr	s14, [r3, #8]
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	bf00      	nop
 80019d4:	20000114 	.word	0x20000114
 80019d8:	200000f4 	.word	0x200000f4
 80019dc:	20000100 	.word	0x20000100
 80019e0:	42c80000 	.word	0x42c80000

080019e4 <GyroExtiConfig>:

void GyroExtiConfig(void){
 80019e4:	b508      	push	{r3, lr}
    L3GD20_ExtiConfig();
 80019e6:	f000 fbb9 	bl	800215c <L3GD20_ExtiConfig>
 80019ea:	bd08      	pop	{r3, pc}

080019ec <processAccelData>:
}

void processAccelData(float *AccBuf, uint8_t *AccelTempBuf) {
 80019ec:	b430      	push	{r4, r5}
 80019ee:	b082      	sub	sp, #8
    int16_t pnRawData[3];
    uint8_t i;


    /* check in the control register4 the data alignment*/
    if(!Accel_LBEorFIFOFlag) /* Little Endian Mode or FIFO mode */
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <processAccelData+0x98>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b19b      	cbz	r3, 8001a1e <processAccelData+0x32>
 80019f6:	2200      	movs	r2, #0
 80019f8:	e027      	b.n	8001a4a <processAccelData+0x5e>
    {
        for(i=0; i<3; i++)
        {
            pnRawData[i]=((int16_t)((uint16_t)AccelTempBuf[2*i+1] << 8) + AccelTempBuf[2*i])/Accel_cDivider;
 80019fa:	005c      	lsls	r4, r3, #1
 80019fc:	190a      	adds	r2, r1, r4
 80019fe:	7852      	ldrb	r2, [r2, #1]
 8001a00:	0212      	lsls	r2, r2, #8
 8001a02:	f811 5013 	ldrb.w	r5, [r1, r3, lsl #1]
 8001a06:	fa05 f282 	sxtah	r2, r5, r2
 8001a0a:	4d1f      	ldr	r5, [pc, #124]	; (8001a88 <processAccelData+0x9c>)
 8001a0c:	782d      	ldrb	r5, [r5, #0]
 8001a0e:	fb92 f2f5 	sdiv	r2, r2, r5
 8001a12:	ad02      	add	r5, sp, #8
 8001a14:	442c      	add	r4, r5
 8001a16:	f824 2c08 	strh.w	r2, [r4, #-8]
        for(i=0; i<3; i++)
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d9eb      	bls.n	80019fa <processAccelData+0xe>
 8001a22:	2300      	movs	r3, #0
 8001a24:	e028      	b.n	8001a78 <processAccelData+0x8c>
        }
    }
    else /* Big Endian Mode */
    {
        for(i=0; i<3; i++)
            pnRawData[i]=((int16_t)((uint16_t)AccelTempBuf[2*i] << 8) + AccelTempBuf[2*i+1])/Accel_cDivider;
 8001a26:	0054      	lsls	r4, r2, #1
 8001a28:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	190d      	adds	r5, r1, r4
 8001a30:	786d      	ldrb	r5, [r5, #1]
 8001a32:	fa05 f383 	sxtah	r3, r5, r3
 8001a36:	4d14      	ldr	r5, [pc, #80]	; (8001a88 <processAccelData+0x9c>)
 8001a38:	782d      	ldrb	r5, [r5, #0]
 8001a3a:	fb93 f3f5 	sdiv	r3, r3, r5
 8001a3e:	ad02      	add	r5, sp, #8
 8001a40:	442c      	add	r4, r5
 8001a42:	f824 3c08 	strh.w	r3, [r4, #-8]
        for(i=0; i<3; i++)
 8001a46:	3201      	adds	r2, #1
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	2a02      	cmp	r2, #2
 8001a4c:	d9eb      	bls.n	8001a26 <processAccelData+0x3a>
 8001a4e:	e7e8      	b.n	8001a22 <processAccelData+0x36>
    }

    /* Obtain the mg value for the three axis */
    for(i=0; i<3; i++)
    {
        AccBuf[i]=(float)pnRawData[i]/LSM_Acc_Sensitivity;
 8001a50:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001a54:	a902      	add	r1, sp, #8
 8001a56:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001a5a:	f931 1c08 	ldrsh.w	r1, [r1, #-8]
 8001a5e:	ee07 1a90 	vmov	s15, r1
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	4909      	ldr	r1, [pc, #36]	; (8001a8c <processAccelData+0xa0>)
 8001a68:	edd1 6a00 	vldr	s13, [r1]
 8001a6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a70:	ed82 7a00 	vstr	s14, [r2]
    for(i=0; i<3; i++)
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d9e9      	bls.n	8001a50 <processAccelData+0x64>
    }
}
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bc30      	pop	{r4, r5}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200000f2 	.word	0x200000f2
 8001a88:	20000168 	.word	0x20000168
 8001a8c:	20000008 	.word	0x20000008

08001a90 <processMagnetoData>:

void processMagnetoData(float *MagBuf, uint8_t *MagnTempBuf) {
 8001a90:	b410      	push	{r4}
    MagBuf[0]=(float)((int16_t)(((uint16_t)MagnTempBuf[0] << 8) + MagnTempBuf[1]))/Magn_Sensitivity_XY;
 8001a92:	780a      	ldrb	r2, [r1, #0]
 8001a94:	784b      	ldrb	r3, [r1, #1]
 8001a96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <processMagnetoData+0x78>)
 8001aa6:	8813      	ldrh	r3, [r2, #0]
 8001aa8:	ee07 3a10 	vmov	s14, r3
 8001aac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ab0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ab4:	edc0 6a00 	vstr	s13, [r0]
    MagBuf[2]=(float)((int16_t)(((uint16_t)MagnTempBuf[2] << 8) + MagnTempBuf[3]))/Magn_Sensitivity_Z; // THIS IS Z! Check datasheet!
 8001ab8:	788c      	ldrb	r4, [r1, #2]
 8001aba:	78cb      	ldrb	r3, [r1, #3]
 8001abc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <processMagnetoData+0x7c>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	ee07 3a10 	vmov	s14, r3
 8001ad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ad6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ada:	edc0 6a02 	vstr	s13, [r0, #8]
    MagBuf[1]=(float)((int16_t)(((uint16_t)MagnTempBuf[4] << 8) + MagnTempBuf[5]))/Magn_Sensitivity_XY; // THIS IS Y! Check datasheet!
 8001ade:	790c      	ldrb	r4, [r1, #4]
 8001ae0:	794b      	ldrb	r3, [r1, #5]
 8001ae2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	8813      	ldrh	r3, [r2, #0]
 8001af2:	ee07 3a10 	vmov	s14, r3
 8001af6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001afa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001afe:	edc0 6a01 	vstr	s13, [r0, #4]
}
 8001b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	2000012e 	.word	0x2000012e
 8001b0c:	20000130 	.word	0x20000130

08001b10 <AHRS_GetValues>:
void AHRS_GetValues(float * val) {
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	4604      	mov	r4, r0
    STM_EVAL_LEDOn(LED8);
 8001b14:	2005      	movs	r0, #5
 8001b16:	f004 fdc3 	bl	80066a0 <BSP_LED_On>
    processGyroData(GyroBuffer, GyroTempBuffer);
 8001b1a:	4f1d      	ldr	r7, [pc, #116]	; (8001b90 <AHRS_GetValues+0x80>)
 8001b1c:	491d      	ldr	r1, [pc, #116]	; (8001b94 <AHRS_GetValues+0x84>)
 8001b1e:	4638      	mov	r0, r7
 8001b20:	f7ff feca 	bl	80018b8 <processGyroData>
    processAccelData(AccBuffer, AccTempBuffer);
 8001b24:	4e1c      	ldr	r6, [pc, #112]	; (8001b98 <AHRS_GetValues+0x88>)
 8001b26:	491d      	ldr	r1, [pc, #116]	; (8001b9c <AHRS_GetValues+0x8c>)
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff ff5f 	bl	80019ec <processAccelData>
    processMagnetoData(MagBuffer, MagTempBuffer);
 8001b2e:	4d1c      	ldr	r5, [pc, #112]	; (8001ba0 <AHRS_GetValues+0x90>)
 8001b30:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <AHRS_GetValues+0x94>)
 8001b32:	4628      	mov	r0, r5
 8001b34:	f7ff ffac 	bl	8001a90 <processMagnetoData>
    val[0] = - (GyroBuffer[1] - GyroCorrectionCoeffs[1]);
 8001b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <AHRS_GetValues+0x98>)
 8001b3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b46:	eef1 7a67 	vneg.f32	s15, s15
 8001b4a:	edc4 7a00 	vstr	s15, [r4]
    val[1] = GyroBuffer[0] - GyroCorrectionCoeffs[0];
 8001b4e:	edd7 7a00 	vldr	s15, [r7]
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5a:	edc4 7a01 	vstr	s15, [r4, #4]
    val[2] = GyroBuffer[2] - GyroCorrectionCoeffs[2];
 8001b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b62:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6a:	edc4 7a02 	vstr	s15, [r4, #8]
    val[3] = AccBuffer[0];
 8001b6e:	6833      	ldr	r3, [r6, #0]
 8001b70:	60e3      	str	r3, [r4, #12]
    val[4] = AccBuffer[1];
 8001b72:	6873      	ldr	r3, [r6, #4]
 8001b74:	6123      	str	r3, [r4, #16]
    val[5] = AccBuffer[2];
 8001b76:	68b3      	ldr	r3, [r6, #8]
 8001b78:	6163      	str	r3, [r4, #20]
    val[6] = MagBuffer[0];
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	61a3      	str	r3, [r4, #24]
    val[7] = MagBuffer[1];
 8001b7e:	686b      	ldr	r3, [r5, #4]
 8001b80:	61e3      	str	r3, [r4, #28]
    val[8] = MagBuffer[2];
 8001b82:	68ab      	ldr	r3, [r5, #8]
 8001b84:	6223      	str	r3, [r4, #32]
    STM_EVAL_LEDOff(LED8);
 8001b86:	2005      	movs	r0, #5
 8001b88:	f004 fd9a 	bl	80066c0 <BSP_LED_Off>
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200000f4 	.word	0x200000f4
 8001b94:	20000114 	.word	0x20000114
 8001b98:	200000e0 	.word	0x200000e0
 8001b9c:	200000ec 	.word	0x200000ec
 8001ba0:	2000011c 	.word	0x2000011c
 8001ba4:	20000128 	.word	0x20000128
 8001ba8:	20000100 	.word	0x20000100

08001bac <updateQuaternions>:
void updateQuaternions(float * quatBuf) {
 8001bac:	b510      	push	{r4, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	4604      	mov	r4, r0
    float val[9] = {0.0f};
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	a801      	add	r0, sp, #4
 8001bb8:	f005 f906 	bl	8006dc8 <memset>
    AHRS_GetValues(val);
 8001bbc:	a801      	add	r0, sp, #4
 8001bbe:	f7ff ffa7 	bl	8001b10 <AHRS_GetValues>
    MadgwickAHRSupdate(val[0]*PI/180.0, val[1]*PI/180.0, val[2]*PI/180.0, val[3], val[4], val[5], val[6], val[7], val[8]);
 8001bc2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001c28 <updateQuaternions+0x7c>
 8001bc6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8001bca:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001bce:	eddd 0a02 	vldr	s1, [sp, #8]
 8001bd2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001bd6:	ed9d 1a03 	vldr	s2, [sp, #12]
 8001bda:	ee21 1a27 	vmul.f32	s2, s2, s15
 8001bde:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001c2c <updateQuaternions+0x80>
 8001be2:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8001be6:	eddd 3a08 	vldr	s7, [sp, #32]
 8001bea:	ed9d 3a07 	vldr	s6, [sp, #28]
 8001bee:	eddd 2a06 	vldr	s5, [sp, #24]
 8001bf2:	ed9d 2a05 	vldr	s4, [sp, #20]
 8001bf6:	eddd 1a04 	vldr	s3, [sp, #16]
 8001bfa:	ee81 1a27 	vdiv.f32	s2, s2, s15
 8001bfe:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 8001c02:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001c06:	f7ff f979 	bl	8000efc <MadgwickAHRSupdate>
    quatBuf[0] = q0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <updateQuaternions+0x84>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6023      	str	r3, [r4, #0]
    quatBuf[1] = q1;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <updateQuaternions+0x88>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6063      	str	r3, [r4, #4]
    quatBuf[2] = q2;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <updateQuaternions+0x8c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60a3      	str	r3, [r4, #8]
    quatBuf[3] = q3;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <updateQuaternions+0x90>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60e3      	str	r3, [r4, #12]
}
 8001c22:	b00a      	add	sp, #40	; 0x28
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	bf00      	nop
 8001c28:	40490fdb 	.word	0x40490fdb
 8001c2c:	43340000 	.word	0x43340000
 8001c30:	20000004 	.word	0x20000004
 8001c34:	200000d4 	.word	0x200000d4
 8001c38:	200000d8 	.word	0x200000d8
 8001c3c:	200000dc 	.word	0x200000dc

08001c40 <getEulerAngles>:

void getEulerAngles(float *euler) {
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	ed2d 8b04 	vpush	{d8-d9}
 8001c46:	4605      	mov	r5, r0
    float *q = QuaternionsBuffer;

    /*euler[0] = atan2(2*q[1]*q[2]-2*q[0]*q[3], 2*q[0]*q[0]+2*q[1]*q[1]-1)*180/PI; // heading, yaw, phi
  euler[1] = -asin(2*q[1]*q[3]+2*q[0]*q[2])*180/PI; // attitude, elevation, pitch, theta
  euler[2] = atan2(2*q[2]*q[3]-2*q[0]*q[1], 2*q[0]*q[0]+2*q[3]*q[3]-1)*180/PI; // bank, roll, psi*/
    float test = QX*QY+QZ*QW;
 8001c48:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <getEulerAngles+0x248>)
 8001c4a:	ed93 8a01 	vldr	s16, [r3, #4]
 8001c4e:	edd3 8a02 	vldr	s17, [r3, #8]
 8001c52:	ee28 7a28 	vmul.f32	s14, s16, s17
 8001c56:	edd3 9a03 	vldr	s19, [r3, #12]
 8001c5a:	ed93 9a00 	vldr	s18, [r3]
 8001c5e:	ee69 7a89 	vmul.f32	s15, s19, s18
    if (test > 0.499) {
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	ee17 0a90 	vmov	r0, s15
 8001c6a:	f7fe fc19 	bl	80004a0 <__aeabi_f2d>
 8001c6e:	4606      	mov	r6, r0
 8001c70:	460f      	mov	r7, r1
 8001c72:	a37f      	add	r3, pc, #508	; (adr r3, 8001e70 <getEulerAngles+0x230>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fef6 	bl	8000a68 <__aeabi_dcmpgt>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	f040 80a4 	bne.w	8001dca <getEulerAngles+0x18a>
        euler[0] = 2*atan2(QX, QW)*180/PI;
        euler[1] = PI*180/(2*PI);
        euler[2] = 0;
    } else if (test< -0.499) {
 8001c82:	a37d      	add	r3, pc, #500	; (adr r3, 8001e78 <getEulerAngles+0x238>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	4630      	mov	r0, r6
 8001c8a:	4639      	mov	r1, r7
 8001c8c:	f7fe fece 	bl	8000a2c <__aeabi_dcmplt>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	f040 80c2 	bne.w	8001e1a <getEulerAngles+0x1da>
        euler[0] = -2*atan2(QX, QW)*180/PI;
        euler[1] = -PI*180/(2*PI);
        euler[2] = 0;
    } else {
        euler[0] = atan2(2*QY*QW - 2*QX*QZ, 1 - 2*QY*QY - 2*QZ*QZ)*180/PI;
 8001c96:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8001c9a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001c9e:	ee38 8a08 	vadd.f32	s16, s16, s16
 8001ca2:	ee29 8a88 	vmul.f32	s16, s19, s16
 8001ca6:	ee39 8a48 	vsub.f32	s16, s18, s16
 8001caa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001cae:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8001cb2:	ee79 8a68 	vsub.f32	s17, s18, s17
 8001cb6:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8001cba:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8001cbe:	ee78 7ae9 	vsub.f32	s15, s17, s19
 8001cc2:	ee17 0a90 	vmov	r0, s15
 8001cc6:	f7fe fbeb 	bl	80004a0 <__aeabi_f2d>
 8001cca:	4606      	mov	r6, r0
 8001ccc:	460f      	mov	r7, r1
 8001cce:	ee18 0a10 	vmov	r0, s16
 8001cd2:	f7fe fbe5 	bl	80004a0 <__aeabi_f2d>
 8001cd6:	ec47 6b11 	vmov	d1, r6, r7
 8001cda:	ec41 0b10 	vmov	d0, r0, r1
 8001cde:	f005 f8d3 	bl	8006e88 <atan2>
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <getEulerAngles+0x24c>)
 8001ce6:	ec51 0b10 	vmov	r0, r1, d0
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_dmul>
 8001cee:	a364      	add	r3, pc, #400	; (adr r3, 8001e80 <getEulerAngles+0x240>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fd52 	bl	800079c <__aeabi_ddiv>
 8001cf8:	f7fe fed6 	bl	8000aa8 <__aeabi_d2f>
 8001cfc:	6028      	str	r0, [r5, #0]
        euler[1] = asin(2*QX*QY + 2*QZ*QW)*180/PI;
 8001cfe:	4c62      	ldr	r4, [pc, #392]	; (8001e88 <getEulerAngles+0x248>)
 8001d00:	edd4 7a01 	vldr	s15, [r4, #4]
 8001d04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d08:	ed94 7a02 	vldr	s14, [r4, #8]
 8001d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d10:	edd4 7a03 	vldr	s15, [r4, #12]
 8001d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d18:	edd4 6a00 	vldr	s13, [r4]
 8001d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	ee17 0a90 	vmov	r0, s15
 8001d28:	f7fe fbba 	bl	80004a0 <__aeabi_f2d>
 8001d2c:	ec41 0b10 	vmov	d0, r0, r1
 8001d30:	f005 f852 	bl	8006dd8 <asin>
 8001d34:	2200      	movs	r2, #0
 8001d36:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <getEulerAngles+0x24c>)
 8001d38:	ec51 0b10 	vmov	r0, r1, d0
 8001d3c:	f7fe fc04 	bl	8000548 <__aeabi_dmul>
 8001d40:	a34f      	add	r3, pc, #316	; (adr r3, 8001e80 <getEulerAngles+0x240>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe fd29 	bl	800079c <__aeabi_ddiv>
 8001d4a:	f7fe fead 	bl	8000aa8 <__aeabi_d2f>
 8001d4e:	6068      	str	r0, [r5, #4]
        euler[2] = atan2(2*QX*QW - 2*QY*QZ, 1 - 2*QX*QX - 2*QZ*QZ)*180/PI;
 8001d50:	edd4 6a01 	vldr	s13, [r4, #4]
 8001d54:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8001d58:	ed94 8a00 	vldr	s16, [r4]
 8001d5c:	ee26 8a08 	vmul.f32	s16, s12, s16
 8001d60:	edd4 7a02 	vldr	s15, [r4, #8]
 8001d64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d68:	edd4 7a03 	vldr	s15, [r4, #12]
 8001d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d70:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001d74:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001d78:	ee79 6a66 	vsub.f32	s13, s18, s13
 8001d7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d88:	ee17 0a90 	vmov	r0, s15
 8001d8c:	f7fe fb88 	bl	80004a0 <__aeabi_f2d>
 8001d90:	4606      	mov	r6, r0
 8001d92:	460f      	mov	r7, r1
 8001d94:	ee18 0a10 	vmov	r0, s16
 8001d98:	f7fe fb82 	bl	80004a0 <__aeabi_f2d>
 8001d9c:	ec47 6b11 	vmov	d1, r6, r7
 8001da0:	ec41 0b10 	vmov	d0, r0, r1
 8001da4:	f005 f870 	bl	8006e88 <atan2>
 8001da8:	2200      	movs	r2, #0
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <getEulerAngles+0x24c>)
 8001dac:	ec51 0b10 	vmov	r0, r1, d0
 8001db0:	f7fe fbca 	bl	8000548 <__aeabi_dmul>
 8001db4:	a332      	add	r3, pc, #200	; (adr r3, 8001e80 <getEulerAngles+0x240>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fcef 	bl	800079c <__aeabi_ddiv>
 8001dbe:	f7fe fe73 	bl	8000aa8 <__aeabi_d2f>
 8001dc2:	60a8      	str	r0, [r5, #8]
    }
}
 8001dc4:	ecbd 8b04 	vpop	{d8-d9}
 8001dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        euler[0] = 2*atan2(QX, QW)*180/PI;
 8001dca:	ee19 0a10 	vmov	r0, s18
 8001dce:	f7fe fb67 	bl	80004a0 <__aeabi_f2d>
 8001dd2:	4606      	mov	r6, r0
 8001dd4:	460f      	mov	r7, r1
 8001dd6:	ee18 0a10 	vmov	r0, s16
 8001dda:	f7fe fb61 	bl	80004a0 <__aeabi_f2d>
 8001dde:	ec47 6b11 	vmov	d1, r6, r7
 8001de2:	ec41 0b10 	vmov	d0, r0, r1
 8001de6:	f005 f84f 	bl	8006e88 <atan2>
 8001dea:	ec51 0b10 	vmov	r0, r1, d0
 8001dee:	ee10 2a10 	vmov	r2, s0
 8001df2:	460b      	mov	r3, r1
 8001df4:	f7fe f9f6 	bl	80001e4 <__adddf3>
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <getEulerAngles+0x24c>)
 8001dfc:	f7fe fba4 	bl	8000548 <__aeabi_dmul>
 8001e00:	a31f      	add	r3, pc, #124	; (adr r3, 8001e80 <getEulerAngles+0x240>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fcc9 	bl	800079c <__aeabi_ddiv>
 8001e0a:	f7fe fe4d 	bl	8000aa8 <__aeabi_d2f>
 8001e0e:	6028      	str	r0, [r5, #0]
        euler[1] = PI*180/(2*PI);
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <getEulerAngles+0x250>)
 8001e12:	606b      	str	r3, [r5, #4]
        euler[2] = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60ab      	str	r3, [r5, #8]
 8001e18:	e7d4      	b.n	8001dc4 <getEulerAngles+0x184>
        euler[0] = -2*atan2(QX, QW)*180/PI;
 8001e1a:	ee19 0a10 	vmov	r0, s18
 8001e1e:	f7fe fb3f 	bl	80004a0 <__aeabi_f2d>
 8001e22:	4606      	mov	r6, r0
 8001e24:	460f      	mov	r7, r1
 8001e26:	ee18 0a10 	vmov	r0, s16
 8001e2a:	f7fe fb39 	bl	80004a0 <__aeabi_f2d>
 8001e2e:	ec47 6b11 	vmov	d1, r6, r7
 8001e32:	ec41 0b10 	vmov	d0, r0, r1
 8001e36:	f005 f827 	bl	8006e88 <atan2>
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001e40:	ec51 0b10 	vmov	r0, r1, d0
 8001e44:	f7fe fb80 	bl	8000548 <__aeabi_dmul>
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <getEulerAngles+0x24c>)
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_dmul>
 8001e50:	a30b      	add	r3, pc, #44	; (adr r3, 8001e80 <getEulerAngles+0x240>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fca1 	bl	800079c <__aeabi_ddiv>
 8001e5a:	f7fe fe25 	bl	8000aa8 <__aeabi_d2f>
 8001e5e:	6028      	str	r0, [r5, #0]
        euler[1] = -PI*180/(2*PI);
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <getEulerAngles+0x254>)
 8001e62:	606b      	str	r3, [r5, #4]
        euler[2] = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60ab      	str	r3, [r5, #8]
 8001e68:	e7ac      	b.n	8001dc4 <getEulerAngles+0x184>
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	b22d0e56 	.word	0xb22d0e56
 8001e74:	3fdfef9d 	.word	0x3fdfef9d
 8001e78:	b22d0e56 	.word	0xb22d0e56
 8001e7c:	bfdfef9d 	.word	0xbfdfef9d
 8001e80:	60000000 	.word	0x60000000
 8001e84:	400921fb 	.word	0x400921fb
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	40668000 	.word	0x40668000
 8001e90:	42b40000 	.word	0x42b40000
 8001e94:	c2b40000 	.word	0xc2b40000

08001e98 <Sensors_GPIO_EXTI_Callback>:
{
    return 0;
}

void Sensors_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e98:	b508      	push	{r3, lr}
    STM_EVAL_LEDToggle(LED3);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f004 fc20 	bl	80066e0 <BSP_LED_Toggle>
    STM_EVAL_LEDOn(LED4);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f004 fbfd 	bl	80066a0 <BSP_LED_On>
    readAllSensors(GyroTempBuffer, AccTempBuffer, MagTempBuffer);
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <Sensors_GPIO_EXTI_Callback+0x2c>)
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <Sensors_GPIO_EXTI_Callback+0x30>)
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <Sensors_GPIO_EXTI_Callback+0x34>)
 8001eac:	f7ff fbb6 	bl	800161c <readAllSensors>
    updateQuaternions(QuaternionsBuffer);
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <Sensors_GPIO_EXTI_Callback+0x38>)
 8001eb2:	f7ff fe7b 	bl	8001bac <updateQuaternions>

    GyroDRDFlag=1;
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <Sensors_GPIO_EXTI_Callback+0x3c>)
 8001eba:	7018      	strb	r0, [r3, #0]
    STM_EVAL_LEDOff(LED4);
 8001ebc:	f004 fc00 	bl	80066c0 <BSP_LED_Off>
 8001ec0:	bd08      	pop	{r3, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000128 	.word	0x20000128
 8001ec8:	200000ec 	.word	0x200000ec
 8001ecc:	20000114 	.word	0x20000114
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	2000010c 	.word	0x2000010c

08001ed8 <L3GD20_LowLevel_Init>:
 * @brief  Initializes the low level interface used to drive the L3GD20
 * @param  None
 * @retval None
 */
static void L3GD20_LowLevel_Init(void)
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStructure;

    L3GD20_SPI_INT1_GPIO_CLK();
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <L3GD20_LowLevel_Init+0xc0>)
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	9a00      	ldr	r2, [sp, #0]
    L3GD20_SPI_INT2_GPIO_CLK();
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9a01      	ldr	r2, [sp, #4]
    L3GD20_SPI_CS_GPIO_CLK();
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	9b02      	ldr	r3, [sp, #8]

    /* Configure CS */
    GPIO_InitStructure.Pin = L3GD20_SPI_CS_PIN;
 8001f14:	2608      	movs	r6, #8
 8001f16:	9603      	str	r6, [sp, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2501      	movs	r5, #1
 8001f1a:	9504      	str	r5, [sp, #16]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f1c:	2703      	movs	r7, #3
 8001f1e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8001f20:	4c1e      	ldr	r4, [pc, #120]	; (8001f9c <L3GD20_LowLevel_Init+0xc4>)
 8001f22:	a903      	add	r1, sp, #12
 8001f24:	4620      	mov	r0, r4
 8001f26:	f000 fded 	bl	8002b04 <HAL_GPIO_Init>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f2a:	61a6      	str	r6, [r4, #24]

    /* Deselect : Chip Select high */
    L3GD20_CS_HIGH();

    GPIO_InitStructure.Pin = L3GD20_SPI_INT1_PIN;
 8001f2c:	9503      	str	r5, [sp, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001f2e:	2500      	movs	r5, #0
 8001f30:	9504      	str	r5, [sp, #16]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f32:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001f34:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001f36:	a903      	add	r1, sp, #12
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 fde3 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = L3GD20_SPI_INT2_PIN;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8001f42:	a903      	add	r1, sp, #12
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 fddd 	bl	8002b04 <HAL_GPIO_Init>

    /* Reset SPI configuration */
    HAL_SPI_DeInit(&hspi1);
 8001f4a:	4c15      	ldr	r4, [pc, #84]	; (8001fa0 <L3GD20_LowLevel_Init+0xc8>)
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f002 f9c6 	bl	80042de <HAL_SPI_DeInit>

    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <L3GD20_LowLevel_Init+0xcc>)
 8001f54:	6023      	str	r3, [r4, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f56:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f5a:	6063      	str	r3, [r4, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5c:	60a5      	str	r5, [r4, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f62:	60e3      	str	r3, [r4, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f64:	6125      	str	r5, [r4, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f66:	6165      	str	r5, [r4, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	61a3      	str	r3, [r4, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f6e:	2318      	movs	r3, #24
 8001f70:	61e3      	str	r3, [r4, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f72:	6225      	str	r5, [r4, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f74:	6265      	str	r5, [r4, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f76:	62a5      	str	r5, [r4, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8001f78:	2307      	movs	r3, #7
 8001f7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f7c:	6325      	str	r5, [r4, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f7e:	6366      	str	r6, [r4, #52]	; 0x34

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f80:	4620      	mov	r0, r4
 8001f82:	f002 f94f 	bl	8004224 <HAL_SPI_Init>
 8001f86:	b908      	cbnz	r0, 8001f8c <L3GD20_LowLevel_Init+0xb4>
    //	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    //	GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
    //
    //	GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
    //	GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
}  
 8001f88:	b009      	add	sp, #36	; 0x24
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _Error_Handler(__FILE__, __LINE__);
 8001f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <L3GD20_LowLevel_Init+0xd0>)
 8001f92:	f003 fe75 	bl	8005c80 <_Error_Handler>
}  
 8001f96:	e7f7      	b.n	8001f88 <L3GD20_LowLevel_Init+0xb0>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48001000 	.word	0x48001000
 8001fa0:	2000028c 	.word	0x2000028c
 8001fa4:	40013000 	.word	0x40013000
 8001fa8:	08007a20 	.word	0x08007a20

08001fac <L3GD20_Write>:
{
 8001fac:	b530      	push	{r4, r5, lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	4605      	mov	r5, r0
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	f88d 1007 	strb.w	r1, [sp, #7]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001fb8:	2208      	movs	r2, #8
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <L3GD20_Write+0x50>)
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if(NumByteToWrite > 0x01)
 8001fbe:	2c01      	cmp	r4, #1
 8001fc0:	d905      	bls.n	8001fce <L3GD20_Write+0x22>
        WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fca:	f88d 3007 	strb.w	r3, [sp, #7]
    ret = HAL_SPI_Transmit(&hspi1, &WriteAddr, 1, 1000);
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f10d 0107 	add.w	r1, sp, #7
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <L3GD20_Write+0x54>)
 8001fda:	f002 f996 	bl	800430a <HAL_SPI_Transmit>
    if (ret == HAL_OK) {
 8001fde:	b120      	cbz	r0, 8001fea <L3GD20_Write+0x3e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <L3GD20_Write+0x50>)
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	b003      	add	sp, #12
 8001fe8:	bd30      	pop	{r4, r5, pc}
        ret = HAL_SPI_Transmit(&hspi1, pBuffer, NumByteToWrite, 1000);
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	4622      	mov	r2, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <L3GD20_Write+0x54>)
 8001ff4:	f002 f989 	bl	800430a <HAL_SPI_Transmit>
 8001ff8:	e7f2      	b.n	8001fe0 <L3GD20_Write+0x34>
 8001ffa:	bf00      	nop
 8001ffc:	48001000 	.word	0x48001000
 8002000:	2000028c 	.word	0x2000028c

08002004 <L3GD20_Init>:
{  
 8002004:	b510      	push	{r4, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	4604      	mov	r4, r0
    uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002010:	f88d 3006 	strb.w	r3, [sp, #6]
    L3GD20_LowLevel_Init();
 8002014:	f7ff ff60 	bl	8001ed8 <L3GD20_LowLevel_Init>
    ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8002018:	7821      	ldrb	r1, [r4, #0]
 800201a:	7860      	ldrb	r0, [r4, #1]
            L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800201c:	78a2      	ldrb	r2, [r4, #2]
 800201e:	78e3      	ldrb	r3, [r4, #3]
    ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8002020:	4301      	orrs	r1, r0
 8002022:	430a      	orrs	r2, r1
 8002024:	4313      	orrs	r3, r2
 8002026:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800202a:	4313      	orrs	r3, r2
 800202c:	f88d 3007 	strb.w	r3, [sp, #7]
    ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8002030:	7922      	ldrb	r2, [r4, #4]
 8002032:	7961      	ldrb	r1, [r4, #5]
            L3GD20_InitStruct->Full_Scale);
 8002034:	79a3      	ldrb	r3, [r4, #6]
    ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8002036:	430a      	orrs	r2, r1
 8002038:	4313      	orrs	r3, r2
 800203a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800203e:	4313      	orrs	r3, r2
 8002040:	f88d 3006 	strb.w	r3, [sp, #6]
    L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	2120      	movs	r1, #32
 8002048:	f10d 0007 	add.w	r0, sp, #7
 800204c:	f7ff ffae 	bl	8001fac <L3GD20_Write>
    L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 8002050:	2201      	movs	r2, #1
 8002052:	2123      	movs	r1, #35	; 0x23
 8002054:	f10d 0006 	add.w	r0, sp, #6
 8002058:	f7ff ffa8 	bl	8001fac <L3GD20_Write>
}
 800205c:	b002      	add	sp, #8
 800205e:	bd10      	pop	{r4, pc}

08002060 <L3GD20_Read>:
{  
 8002060:	b530      	push	{r4, r5, lr}
 8002062:	b083      	sub	sp, #12
 8002064:	4605      	mov	r5, r0
 8002066:	4614      	mov	r4, r2
 8002068:	f88d 1007 	strb.w	r1, [sp, #7]
  WRITE_REG(GPIOx->BRR, PinMask);
 800206c:	2208      	movs	r2, #8
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <L3GD20_Read+0x5c>)
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
    if(NumByteToRead > 0x01)
 8002072:	2c01      	cmp	r4, #1
 8002074:	d913      	bls.n	800209e <L3GD20_Read+0x3e>
        ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002076:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800207a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800207e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret = HAL_SPI_Transmit(&hspi1,&ReadAddr, 1, 1000);
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	2201      	movs	r2, #1
 8002088:	f10d 0107 	add.w	r1, sp, #7
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <L3GD20_Read+0x60>)
 800208e:	f002 f93c 	bl	800430a <HAL_SPI_Transmit>
    if (ret == HAL_OK) {
 8002092:	b158      	cbz	r0, 80020ac <L3GD20_Read+0x4c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002094:	2208      	movs	r2, #8
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <L3GD20_Read+0x5c>)
 8002098:	619a      	str	r2, [r3, #24]
}  
 800209a:	b003      	add	sp, #12
 800209c:	bd30      	pop	{r4, r5, pc}
        ReadAddr |= (uint8_t)READWRITE_CMD;
 800209e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80020aa:	e7ea      	b.n	8002082 <L3GD20_Read+0x22>
        ret = HAL_SPI_Receive(&hspi1, pBuffer, NumByteToRead, 1000);
 80020ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b0:	4622      	mov	r2, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <L3GD20_Read+0x60>)
 80020b6:	f002 fb72 	bl	800479e <HAL_SPI_Receive>
 80020ba:	e7eb      	b.n	8002094 <L3GD20_Read+0x34>
 80020bc:	48001000 	.word	0x48001000
 80020c0:	2000028c 	.word	0x2000028c

080020c4 <L3GD20_INT2InterruptCmd>:
{  
 80020c4:	b510      	push	{r4, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	4604      	mov	r4, r0
    L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2122      	movs	r1, #34	; 0x22
 80020ce:	f10d 0007 	add.w	r0, sp, #7
 80020d2:	f7ff ffc5 	bl	8002060 <L3GD20_Read>
    tmpreg &= 0xF7;
 80020d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80020da:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
    tmpreg |= InterruptState;
 80020de:	4320      	orrs	r0, r4
 80020e0:	f88d 0007 	strb.w	r0, [sp, #7]
    L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2122      	movs	r1, #34	; 0x22
 80020e8:	f10d 0007 	add.w	r0, sp, #7
 80020ec:	f7ff ff5e 	bl	8001fac <L3GD20_Write>
}
 80020f0:	b002      	add	sp, #8
 80020f2:	bd10      	pop	{r4, pc}

080020f4 <L3GD20_FilterConfig>:
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	4604      	mov	r4, r0
    L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2121      	movs	r1, #33	; 0x21
 80020fe:	f10d 0007 	add.w	r0, sp, #7
 8002102:	f7ff ffad 	bl	8002060 <L3GD20_Read>
    tmpreg &= 0xC0;
 8002106:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800210a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800210e:	7822      	ldrb	r2, [r4, #0]
            L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);
 8002110:	7861      	ldrb	r1, [r4, #1]
    tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8002112:	430a      	orrs	r2, r1
 8002114:	4313      	orrs	r3, r2
 8002116:	f88d 3007 	strb.w	r3, [sp, #7]
    L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800211a:	2201      	movs	r2, #1
 800211c:	2121      	movs	r1, #33	; 0x21
 800211e:	f10d 0007 	add.w	r0, sp, #7
 8002122:	f7ff ff43 	bl	8001fac <L3GD20_Write>
}
 8002126:	b002      	add	sp, #8
 8002128:	bd10      	pop	{r4, pc}

0800212a <L3GD20_FilterCmd>:
{
 800212a:	b510      	push	{r4, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	4604      	mov	r4, r0
    L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002130:	2201      	movs	r2, #1
 8002132:	2124      	movs	r1, #36	; 0x24
 8002134:	f10d 0007 	add.w	r0, sp, #7
 8002138:	f7ff ff92 	bl	8002060 <L3GD20_Read>
    tmpreg &= 0xEF;
 800213c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002140:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    tmpreg |= HighPassFilterState;
 8002144:	4320      	orrs	r0, r4
 8002146:	f88d 0007 	strb.w	r0, [sp, #7]
    L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	2124      	movs	r1, #36	; 0x24
 800214e:	f10d 0007 	add.w	r0, sp, #7
 8002152:	f7ff ff2b 	bl	8001fac <L3GD20_Write>
}
 8002156:	b002      	add	sp, #8
 8002158:	bd10      	pop	{r4, pc}
	...

0800215c <L3GD20_ExtiConfig>:

void L3GD20_ExtiConfig(void) {
 800215c:	b510      	push	{r4, lr}
 800215e:	b086      	sub	sp, #24
    //
    //    NVIC_Init(&NVIC_InitStructure);

    GPIO_InitTypeDef   GPIO_InitStructure;
    /* Enable GPIOE clock */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <L3GD20_ExtiConfig+0x44>)
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	9b00      	ldr	r3, [sp, #0]
    /* Configure Accelero IRQ (DRDY), connected to PE6 IOs in External Interrupt Mode with Rising edge trigger detection. */
    GPIO_InitStructure.Pin = L3GD20_SPI_INT2_PIN;
 8002174:	2402      	movs	r4, #2
 8002176:	9401      	str	r4, [sp, #4]
    GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <L3GD20_ExtiConfig+0x48>)
 800217a:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800217c:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8002182:	a901      	add	r1, sp, #4
 8002184:	4808      	ldr	r0, [pc, #32]	; (80021a8 <L3GD20_ExtiConfig+0x4c>)
 8002186:	f000 fcbd 	bl	8002b04 <HAL_GPIO_Init>

    /* Enable and set EXTI2 Interrupt to the lowest priority */

    HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	4621      	mov	r1, r4
 800218e:	2007      	movs	r0, #7
 8002190:	f000 fc2a 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002194:	2007      	movs	r0, #7
 8002196:	f000 fc59 	bl	8002a4c <HAL_NVIC_EnableIRQ>
}
 800219a:	b006      	add	sp, #24
 800219c:	bd10      	pop	{r4, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	10110000 	.word	0x10110000
 80021a8:	48001000 	.word	0x48001000

080021ac <LSM303DLHC_LowLevel_Init>:
 * @brief  Initializes the low level interface used to drive the LSM303DLHC
 * @param  None
 * @retval None
 */
static void LSM303DLHC_LowLevel_Init(void)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b087      	sub	sp, #28
	GPIO_InitTypeDef   GPIO_InitStructure;
	/* Enable GPIOE clock */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <LSM303DLHC_LowLevel_Init+0xb8>)
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	9b00      	ldr	r3, [sp, #0]

	/* Configure Accelero IRQ (DRDY), connected to PE6 IOs in External Interrupt Mode with Rising edge trigger detection. */
	GPIO_InitStructure.Pin = LSM303DLHC_DRDY_PIN;
 80021c4:	2304      	movs	r3, #4
 80021c6:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <LSM303DLHC_LowLevel_Init+0xbc>)
 80021ca:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80021cc:	2601      	movs	r6, #1
 80021ce:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d0:	2703      	movs	r7, #3
 80021d2:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(LSM303DLHC_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80021d4:	4c25      	ldr	r4, [pc, #148]	; (800226c <LSM303DLHC_LowLevel_Init+0xc0>)
 80021d6:	a901      	add	r1, sp, #4
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 fc93 	bl	8002b04 <HAL_GPIO_Init>
//
//	LSM303DLHC_I2C_INT1_GPIO_CLK();
//	LSM303DLHC_I2C_INT2_GPIO_CLK();

	/* Configure GPIO PINs to detect Interrupts */
	GPIO_InitStructure.Pin = LSM303DLHC_I2C_INT1_PIN;
 80021de:	2310      	movs	r3, #16
 80021e0:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80021e2:	2500      	movs	r5, #0
 80021e4:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80021e6:	9503      	str	r5, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e8:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(LSM303DLHC_I2C_INT1_GPIO_PORT, &GPIO_InitStructure);
 80021ea:	a901      	add	r1, sp, #4
 80021ec:	4620      	mov	r0, r4
 80021ee:	f000 fc89 	bl	8002b04 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = LSM303DLHC_I2C_INT2_PIN;
 80021f2:	2320      	movs	r3, #32
 80021f4:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(LSM303DLHC_I2C_INT2_GPIO_PORT, &GPIO_InitStructure);
 80021f6:	a901      	add	r1, sp, #4
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 fc83 	bl	8002b04 <HAL_GPIO_Init>

	HAL_I2C_DeInit(&hi2c1);
 80021fe:	4c1c      	ldr	r4, [pc, #112]	; (8002270 <LSM303DLHC_LowLevel_Init+0xc4>)
 8002200:	4620      	mov	r0, r4
 8002202:	f000 ff76 	bl	80030f2 <HAL_I2C_DeInit>

	hi2c1.Instance = I2C1;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <LSM303DLHC_LowLevel_Init+0xc8>)
 8002208:	6023      	str	r3, [r4, #0]
	//hi2c1.Init.Timing = 0x2000090E;
	hi2c1.Init.Timing = 0x00000404;
 800220a:	f240 4304 	movw	r3, #1028	; 0x404
 800220e:	6063      	str	r3, [r4, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002210:	60a5      	str	r5, [r4, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002212:	60e6      	str	r6, [r4, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002214:	6125      	str	r5, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002216:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002218:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221a:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221c:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800221e:	4620      	mov	r0, r4
 8002220:	f000 ff09 	bl	8003036 <HAL_I2C_Init>
 8002224:	b958      	cbnz	r0, 800223e <LSM303DLHC_LowLevel_Init+0x92>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure Analog filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002226:	2100      	movs	r1, #0
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <LSM303DLHC_LowLevel_Init+0xc4>)
 800222a:	f001 f901 	bl	8003430 <HAL_I2CEx_ConfigAnalogFilter>
 800222e:	b960      	cbnz	r0, 800224a <LSM303DLHC_LowLevel_Init+0x9e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002230:	2100      	movs	r1, #0
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <LSM303DLHC_LowLevel_Init+0xc4>)
 8002234:	f001 f92a 	bl	800348c <HAL_I2CEx_ConfigDigitalFilter>
 8002238:	b968      	cbnz	r0, 8002256 <LSM303DLHC_LowLevel_Init+0xaa>
	//	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	//	GPIO_Init(LSM303DLHC_I2C_INT1_GPIO_PORT, &GPIO_InitStructure);
	//
	//	GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_INT2_PIN;
	//	GPIO_Init(LSM303DLHC_I2C_INT2_GPIO_PORT, &GPIO_InitStructure);
}  
 800223a:	b007      	add	sp, #28
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_Error_Handler(__FILE__, __LINE__);
 800223e:	f240 217f 	movw	r1, #639	; 0x27f
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <LSM303DLHC_LowLevel_Init+0xcc>)
 8002244:	f003 fd1c 	bl	8005c80 <_Error_Handler>
 8002248:	e7ed      	b.n	8002226 <LSM303DLHC_LowLevel_Init+0x7a>
		_Error_Handler(__FILE__, __LINE__);
 800224a:	f240 2186 	movw	r1, #646	; 0x286
 800224e:	480a      	ldr	r0, [pc, #40]	; (8002278 <LSM303DLHC_LowLevel_Init+0xcc>)
 8002250:	f003 fd16 	bl	8005c80 <_Error_Handler>
 8002254:	e7ec      	b.n	8002230 <LSM303DLHC_LowLevel_Init+0x84>
		_Error_Handler(__FILE__, __LINE__);
 8002256:	f240 218d 	movw	r1, #653	; 0x28d
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <LSM303DLHC_LowLevel_Init+0xcc>)
 800225c:	f003 fd10 	bl	8005c80 <_Error_Handler>
}  
 8002260:	e7eb      	b.n	800223a <LSM303DLHC_LowLevel_Init+0x8e>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	10110000 	.word	0x10110000
 800226c:	48001000 	.word	0x48001000
 8002270:	20000170 	.word	0x20000170
 8002274:	40005400 	.word	0x40005400
 8002278:	08007a44 	.word	0x08007a44

0800227c <LSM303DLHC_Write>:
{  
 800227c:	b530      	push	{r4, r5, lr}
 800227e:	b085      	sub	sp, #20
 8002280:	4615      	mov	r5, r2
 8002282:	aa04      	add	r2, sp, #16
 8002284:	f802 1d01 	strb.w	r1, [r2, #-1]!
	LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <LSM303DLHC_Write+0x40>)
 800228a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800228e:	6019      	str	r1, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr, &RegAddr, 1, LSM303DLHC_Timeout);
 8002290:	4604      	mov	r4, r0
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	4601      	mov	r1, r0
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <LSM303DLHC_Write+0x44>)
 800229c:	f000 ff42 	bl	8003124 <HAL_I2C_Master_Transmit>
	if (ret == HAL_OK )
 80022a0:	b110      	cbz	r0, 80022a8 <LSM303DLHC_Write+0x2c>
}
 80022a2:	2000      	movs	r0, #0
 80022a4:	b005      	add	sp, #20
 80022a6:	bd30      	pop	{r4, r5, pc}
		ret = HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr,pBuffer, 1, LSM303DLHC_Timeout);
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <LSM303DLHC_Write+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	462a      	mov	r2, r5
 80022b2:	4621      	mov	r1, r4
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <LSM303DLHC_Write+0x44>)
 80022b6:	f000 ff35 	bl	8003124 <HAL_I2C_Master_Transmit>
 80022ba:	e7f2      	b.n	80022a2 <LSM303DLHC_Write+0x26>
 80022bc:	2000001c 	.word	0x2000001c
 80022c0:	20000170 	.word	0x20000170

080022c4 <LSM303DLHC_AccInit>:
{  
 80022c4:	b510      	push	{r4, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	4604      	mov	r4, r0
	uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80022d0:	f88d 3006 	strb.w	r3, [sp, #6]
	LSM303DLHC_LowLevel_Init();
 80022d4:	f7ff ff6a 	bl	80021ac <LSM303DLHC_LowLevel_Init>
	ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 80022d8:	7822      	ldrb	r2, [r4, #0]
 80022da:	7861      	ldrb	r1, [r4, #1]
			LSM303DLHC_InitStruct->Axes_Enable);
 80022dc:	78a3      	ldrb	r3, [r4, #2]
	ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 80022de:	430a      	orrs	r2, r1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 80022ec:	7921      	ldrb	r1, [r4, #4]
 80022ee:	7960      	ldrb	r0, [r4, #5]
			LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
 80022f0:	79a2      	ldrb	r2, [r4, #6]
 80022f2:	78e3      	ldrb	r3, [r4, #3]
	ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 80022f4:	4301      	orrs	r1, r0
 80022f6:	430a      	orrs	r2, r1
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80022fe:	4313      	orrs	r3, r2
 8002300:	f88d 3006 	strb.w	r3, [sp, #6]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, &ctrl1);
 8002304:	f10d 0207 	add.w	r2, sp, #7
 8002308:	2120      	movs	r1, #32
 800230a:	2032      	movs	r0, #50	; 0x32
 800230c:	f7ff ffb6 	bl	800227c <LSM303DLHC_Write>
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, &ctrl4);
 8002310:	f10d 0206 	add.w	r2, sp, #6
 8002314:	2123      	movs	r1, #35	; 0x23
 8002316:	2032      	movs	r0, #50	; 0x32
 8002318:	f7ff ffb0 	bl	800227c <LSM303DLHC_Write>
}
 800231c:	b002      	add	sp, #8
 800231e:	bd10      	pop	{r4, pc}

08002320 <LSM303DLHC_MagInit>:
{  
 8002320:	b530      	push	{r4, r5, lr}
 8002322:	b083      	sub	sp, #12
 8002324:	4605      	mov	r5, r0
	uint8_t cra_regm = 0x00, crb_regm = 0x00, mr_regm = 0x00;
 8002326:	2400      	movs	r4, #0
 8002328:	f88d 4007 	strb.w	r4, [sp, #7]
 800232c:	f88d 4006 	strb.w	r4, [sp, #6]
 8002330:	f88d 4005 	strb.w	r4, [sp, #5]
	LSM303DLHC_LowLevel_Init();
 8002334:	f7ff ff3a 	bl	80021ac <LSM303DLHC_LowLevel_Init>
	cra_regm |= (uint8_t) (LSM303DLHC_InitStruct->Temperature_Sensor | LSM303DLHC_InitStruct->MagOutput_DataRate);
 8002338:	782b      	ldrb	r3, [r5, #0]
 800233a:	786a      	ldrb	r2, [r5, #1]
 800233c:	4313      	orrs	r3, r2
 800233e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002342:	4313      	orrs	r3, r2
 8002344:	f88d 3007 	strb.w	r3, [sp, #7]
	crb_regm |= (uint8_t) (LSM303DLHC_InitStruct->MagFull_Scale);
 8002348:	78eb      	ldrb	r3, [r5, #3]
 800234a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800234e:	4313      	orrs	r3, r2
 8002350:	f88d 3006 	strb.w	r3, [sp, #6]
	mr_regm |= (uint8_t) (LSM303DLHC_InitStruct->Working_Mode);
 8002354:	78ab      	ldrb	r3, [r5, #2]
 8002356:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800235a:	4313      	orrs	r3, r2
 800235c:	f88d 3005 	strb.w	r3, [sp, #5]
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, &cra_regm);
 8002360:	f10d 0207 	add.w	r2, sp, #7
 8002364:	4621      	mov	r1, r4
 8002366:	203c      	movs	r0, #60	; 0x3c
 8002368:	f7ff ff88 	bl	800227c <LSM303DLHC_Write>
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &crb_regm);
 800236c:	f10d 0206 	add.w	r2, sp, #6
 8002370:	2101      	movs	r1, #1
 8002372:	203c      	movs	r0, #60	; 0x3c
 8002374:	f7ff ff82 	bl	800227c <LSM303DLHC_Write>
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, &mr_regm);
 8002378:	f10d 0205 	add.w	r2, sp, #5
 800237c:	2102      	movs	r1, #2
 800237e:	203c      	movs	r0, #60	; 0x3c
 8002380:	f7ff ff7c 	bl	800227c <LSM303DLHC_Write>
}
 8002384:	b003      	add	sp, #12
 8002386:	bd30      	pop	{r4, r5, pc}

08002388 <LSM303DLHC_Read>:
{    
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	4616      	mov	r6, r2
 800238e:	461d      	mov	r5, r3
 8002390:	f88d 100f 	strb.w	r1, [sp, #15]
	LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8002394:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <LSM303DLHC_Read+0x54>)
 800239a:	601a      	str	r2, [r3, #0]
	if(NumByteToRead>1)
 800239c:	2d01      	cmp	r5, #1
 800239e:	d904      	bls.n	80023aa <LSM303DLHC_Read+0x22>
		RegAddr |= 0x80;
 80023a0:	b2cb      	uxtb	r3, r1
 80023a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023a6:	f88d 300f 	strb.w	r3, [sp, #15]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr, &RegAddr, 1, LSM303DLHC_Timeout);
 80023aa:	b284      	uxth	r4, r0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <LSM303DLHC_Read+0x54>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2301      	movs	r3, #1
 80023b4:	f10d 020f 	add.w	r2, sp, #15
 80023b8:	4621      	mov	r1, r4
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <LSM303DLHC_Read+0x58>)
 80023bc:	f000 feb2 	bl	8003124 <HAL_I2C_Master_Transmit>
	if (ret == HAL_OK )
 80023c0:	b110      	cbz	r0, 80023c8 <LSM303DLHC_Read+0x40>
}  
 80023c2:	2000      	movs	r0, #0
 80023c4:	b004      	add	sp, #16
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
		ret = HAL_I2C_Master_Receive(&hi2c1, DeviceAddr,pBuffer, NumByteToRead, LSM303DLHC_Timeout);
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <LSM303DLHC_Read+0x54>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	462b      	mov	r3, r5
 80023d0:	4632      	mov	r2, r6
 80023d2:	4621      	mov	r1, r4
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <LSM303DLHC_Read+0x58>)
 80023d6:	f000 ff69 	bl	80032ac <HAL_I2C_Master_Receive>
 80023da:	e7f2      	b.n	80023c2 <LSM303DLHC_Read+0x3a>
 80023dc:	2000001c 	.word	0x2000001c
 80023e0:	20000170 	.word	0x20000170

080023e4 <LSM303DLHC_AccFilterConfig>:
{
 80023e4:	b530      	push	{r4, r5, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	4604      	mov	r4, r0
	LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
 80023ea:	2301      	movs	r3, #1
 80023ec:	f10d 0207 	add.w	r2, sp, #7
 80023f0:	2121      	movs	r1, #33	; 0x21
 80023f2:	2032      	movs	r0, #50	; 0x32
 80023f4:	f7ff ffc8 	bl	8002388 <LSM303DLHC_Read>
	tmpreg &= 0x0C;
 80023f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023fc:	f003 030c 	and.w	r3, r3, #12
	tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 8002400:	7820      	ldrb	r0, [r4, #0]
			LSM303DLHC_FilterStruct->HighPassFilter_CutOff_Frequency|\
 8002402:	7865      	ldrb	r5, [r4, #1]
			LSM303DLHC_FilterStruct->HighPassFilter_AOI1|\
 8002404:	78a1      	ldrb	r1, [r4, #2]
			LSM303DLHC_FilterStruct->HighPassFilter_AOI2);
 8002406:	78e2      	ldrb	r2, [r4, #3]
	tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 8002408:	4328      	orrs	r0, r5
 800240a:	4301      	orrs	r1, r0
 800240c:	430a      	orrs	r2, r1
 800240e:	4313      	orrs	r3, r2
 8002410:	f88d 3007 	strb.w	r3, [sp, #7]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg);
 8002414:	f10d 0207 	add.w	r2, sp, #7
 8002418:	2121      	movs	r1, #33	; 0x21
 800241a:	2032      	movs	r0, #50	; 0x32
 800241c:	f7ff ff2e 	bl	800227c <LSM303DLHC_Write>
}
 8002420:	b003      	add	sp, #12
 8002422:	bd30      	pop	{r4, r5, pc}

08002424 <LSM303DLHC_AccFilterCmd>:
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	4604      	mov	r4, r0
	LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
 800242a:	2301      	movs	r3, #1
 800242c:	f10d 0207 	add.w	r2, sp, #7
 8002430:	2121      	movs	r1, #33	; 0x21
 8002432:	2032      	movs	r0, #50	; 0x32
 8002434:	f7ff ffa8 	bl	8002388 <LSM303DLHC_Read>
	tmpreg &= 0xF7;
 8002438:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800243c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	tmpreg |= HighPassFilterState;
 8002440:	4320      	orrs	r0, r4
 8002442:	f88d 0007 	strb.w	r0, [sp, #7]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg);
 8002446:	f10d 0207 	add.w	r2, sp, #7
 800244a:	2121      	movs	r1, #33	; 0x21
 800244c:	2032      	movs	r0, #50	; 0x32
 800244e:	f7ff ff15 	bl	800227c <LSM303DLHC_Write>
}
 8002452:	b002      	add	sp, #8
 8002454:	bd10      	pop	{r4, pc}

08002456 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002456:	4770      	bx	lr

08002458 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002458:	4770      	bx	lr

0800245a <EXTI2_TSC_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_TSC_IRQHandler(void)
{
 800245a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800245c:	2004      	movs	r0, #4
 800245e:	f000 fcaf 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
 8002462:	bd08      	pop	{r3, pc}

08002464 <EXTI1_IRQHandler>:
  * @brief  RFU - This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002464:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002466:	2002      	movs	r0, #2
 8002468:	f000 fcaa 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
 800246c:	bd08      	pop	{r3, pc}
	...

08002470 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b510      	push	{r4, lr}
 8002472:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_InitTick+0x40>)
 8002476:	7818      	ldrb	r0, [r3, #0]
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002480:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_InitTick+0x44>)
 8002482:	6810      	ldr	r0, [r2, #0]
 8002484:	fbb0 f0f3 	udiv	r0, r0, r3
 8002488:	f000 faec 	bl	8002a64 <HAL_SYSTICK_Config>
 800248c:	b968      	cbnz	r0, 80024aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	2c0f      	cmp	r4, #15
 8002490:	d901      	bls.n	8002496 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002492:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 8002494:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002496:	2200      	movs	r2, #0
 8002498:	4621      	mov	r1, r4
 800249a:	f04f 30ff 	mov.w	r0, #4294967295
 800249e:	f000 faa3 	bl	80029e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_InitTick+0x48>)
 80024a4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80024a6:	2000      	movs	r0, #0
 80024a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
 80024ac:	bd10      	pop	{r4, pc}
 80024ae:	bf00      	nop
 80024b0:	20000020 	.word	0x20000020
 80024b4:	2000004c 	.word	0x2000004c
 80024b8:	20000024 	.word	0x20000024

080024bc <HAL_Init>:
{
 80024bc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x20>)
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 fa7b 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff ffce 	bl	8002470 <HAL_InitTick>
  HAL_MspInit();
 80024d4:	f004 f966 	bl	80067a4 <HAL_MspInit>
}
 80024d8:	2000      	movs	r0, #0
 80024da:	bd08      	pop	{r3, pc}
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_IncTick+0x10>)
 80024e2:	6811      	ldr	r1, [r2, #0]
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_IncTick+0x14>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	440b      	add	r3, r1
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	2000016c 	.word	0x2000016c
 80024f4:	20000020 	.word	0x20000020

080024f8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <HAL_GetTick+0x8>)
 80024fa:	6818      	ldr	r0, [r3, #0]
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000016c 	.word	0x2000016c

08002504 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fff6 	bl	80024f8 <HAL_GetTick>
 800250c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002512:	d002      	beq.n	800251a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_Delay+0x24>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800251a:	f7ff ffed 	bl	80024f8 <HAL_GetTick>
 800251e:	1b40      	subs	r0, r0, r5
 8002520:	4284      	cmp	r4, r0
 8002522:	d8fa      	bhi.n	800251a <HAL_Delay+0x16>
  {
  }
}
 8002524:	bd38      	pop	{r3, r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	20000020 	.word	0x20000020

0800252c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 800252c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));

  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800252e:	694b      	ldr	r3, [r1, #20]
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3

  /* Initialisation mode for the filter */
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8002536:	6804      	ldr	r4, [r0, #0]
 8002538:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8002544:	6805      	ldr	r5, [r0, #0]
 8002546:	f8d5 421c 	ldr.w	r4, [r5, #540]	; 0x21c
 800254a:	43da      	mvns	r2, r3
 800254c:	4014      	ands	r4, r2
 800254e:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002552:	69cc      	ldr	r4, [r1, #28]
 8002554:	b9c4      	cbnz	r4, 8002588 <HAL_CAN_ConfigFilter+0x5c>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8002556:	6805      	ldr	r5, [r0, #0]
 8002558:	f8d5 420c 	ldr.w	r4, [r5, #524]	; 0x20c
 800255c:	4014      	ands	r4, r2
 800255e:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8002562:	6806      	ldr	r6, [r0, #0]
 8002564:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002566:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002568:	888d      	ldrh	r5, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800256a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800256e:	3448      	adds	r4, #72	; 0x48
 8002570:	f846 5034 	str.w	r5, [r6, r4, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8002574:	6804      	ldr	r4, [r0, #0]
 8002576:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002578:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800257a:	880d      	ldrh	r5, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8002580:	3648      	adds	r6, #72	; 0x48
 8002582:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002586:	6065      	str	r5, [r4, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002588:	69cc      	ldr	r4, [r1, #28]
 800258a:	2c01      	cmp	r4, #1
 800258c:	d01e      	beq.n	80025cc <HAL_CAN_ConfigFilter+0xa0>
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800258e:	698c      	ldr	r4, [r1, #24]
 8002590:	2c00      	cmp	r4, #0
 8002592:	d135      	bne.n	8002600 <HAL_CAN_ConfigFilter+0xd4>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8002594:	6805      	ldr	r5, [r0, #0]
 8002596:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 800259a:	4014      	ands	r4, r2
 800259c:	f8c5 4204 	str.w	r4, [r5, #516]	; 0x204
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025a0:	690c      	ldr	r4, [r1, #16]
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	d133      	bne.n	800260e <HAL_CAN_ConfigFilter+0xe2>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80025a6:	6804      	ldr	r4, [r0, #0]
 80025a8:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 80025ac:	402a      	ands	r2, r5
 80025ae:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80025b2:	6a0a      	ldr	r2, [r1, #32]
 80025b4:	2a01      	cmp	r2, #1
 80025b6:	d031      	beq.n	800261c <HAL_CAN_ConfigFilter+0xf0>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80025b8:	6802      	ldr	r2, [r0, #0]
 80025ba:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 80025c6:	2000      	movs	r0, #0
 80025c8:	bcf0      	pop	{r4, r5, r6, r7}
 80025ca:	4770      	bx	lr
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80025cc:	6805      	ldr	r5, [r0, #0]
 80025ce:	f8d5 420c 	ldr.w	r4, [r5, #524]	; 0x20c
 80025d2:	431c      	orrs	r4, r3
 80025d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80025d8:	6806      	ldr	r6, [r0, #0]
 80025da:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025dc:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025de:	888d      	ldrh	r5, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025e0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80025e4:	3448      	adds	r4, #72	; 0x48
 80025e6:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80025ea:	6804      	ldr	r4, [r0, #0]
 80025ec:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ee:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025f0:	898d      	ldrh	r5, [r1, #12]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80025f6:	3648      	adds	r6, #72	; 0x48
 80025f8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80025fc:	6065      	str	r5, [r4, #4]
 80025fe:	e7c6      	b.n	800258e <HAL_CAN_ConfigFilter+0x62>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8002600:	6805      	ldr	r5, [r0, #0]
 8002602:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 8002606:	431c      	orrs	r4, r3
 8002608:	f8c5 4204 	str.w	r4, [r5, #516]	; 0x204
 800260c:	e7c8      	b.n	80025a0 <HAL_CAN_ConfigFilter+0x74>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800260e:	6804      	ldr	r4, [r0, #0]
 8002610:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8002614:	431a      	orrs	r2, r3
 8002616:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 800261a:	e7ca      	b.n	80025b2 <HAL_CAN_ConfigFilter+0x86>
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800261c:	6802      	ldr	r2, [r0, #0]
 800261e:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8002622:	430b      	orrs	r3, r1
 8002624:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8002628:	e7c6      	b.n	80025b8 <HAL_CAN_ConfigFilter+0x8c>

0800262a <HAL_CAN_Init>:
  if(hcan == NULL)
 800262a:	2800      	cmp	r0, #0
 800262c:	f000 80bb 	beq.w	80027a6 <HAL_CAN_Init+0x17c>
{
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4604      	mov	r4, r0
  if(hcan->State == HAL_CAN_STATE_RESET)
 8002634:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002638:	b303      	cbz	r3, 800267c <HAL_CAN_Init+0x52>
  hcan->State = HAL_CAN_STATE_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	6013      	str	r3, [r2, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();   
 8002654:	f7ff ff50 	bl	80024f8 <HAL_GetTick>
 8002658:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	f012 0f01 	tst.w	r2, #1
 8002662:	d110      	bne.n	8002686 <HAL_CAN_Init+0x5c>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8002664:	f7ff ff48 	bl	80024f8 <HAL_GetTick>
 8002668:	1b40      	subs	r0, r0, r5
 800266a:	280a      	cmp	r0, #10
 800266c:	d9f5      	bls.n	800265a <HAL_CAN_Init+0x30>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800266e:	2003      	movs	r0, #3
 8002670:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hcan);
 8002674:	2300      	movs	r3, #0
 8002676:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 800267a:	bd38      	pop	{r3, r4, r5, pc}
    hcan->Lock = HAL_UNLOCKED;
 800267c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_CAN_MspInit(hcan);
 8002680:	f004 f8ce 	bl	8006820 <HAL_CAN_MspInit>
 8002684:	e7d9      	b.n	800263a <HAL_CAN_Init+0x10>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	f012 0f01 	tst.w	r2, #1
 800268c:	d07c      	beq.n	8002788 <HAL_CAN_Init+0x15e>
    if (hcan->Init.TTCM == ENABLE)
 800268e:	69a2      	ldr	r2, [r4, #24]
 8002690:	2a01      	cmp	r2, #1
 8002692:	d050      	beq.n	8002736 <HAL_CAN_Init+0x10c>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269a:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 800269c:	69e3      	ldr	r3, [r4, #28]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d04e      	beq.n	8002740 <HAL_CAN_Init+0x116>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026aa:	6013      	str	r3, [r2, #0]
    if (hcan->Init.AWUM == ENABLE)
 80026ac:	6a23      	ldr	r3, [r4, #32]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d04c      	beq.n	800274c <HAL_CAN_Init+0x122>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	f023 0320 	bic.w	r3, r3, #32
 80026ba:	6013      	str	r3, [r2, #0]
    if (hcan->Init.NART == ENABLE)
 80026bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d04a      	beq.n	8002758 <HAL_CAN_Init+0x12e>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	f023 0310 	bic.w	r3, r3, #16
 80026ca:	6013      	str	r3, [r2, #0]
    if (hcan->Init.RFLM == ENABLE)
 80026cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d048      	beq.n	8002764 <HAL_CAN_Init+0x13a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	f023 0308 	bic.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
    if (hcan->Init.TXFP == ENABLE)
 80026dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d046      	beq.n	8002770 <HAL_CAN_Init+0x146>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	6013      	str	r3, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026ec:	6821      	ldr	r1, [r4, #0]
 80026ee:	68a3      	ldr	r3, [r4, #8]
 80026f0:	68e2      	ldr	r2, [r4, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	6922      	ldr	r2, [r4, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	6962      	ldr	r2, [r4, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	6862      	ldr	r2, [r4, #4]
 80026fe:	3a01      	subs	r2, #1
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 800270e:	f7ff fef3 	bl	80024f8 <HAL_GetTick>
 8002712:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	f012 0f01 	tst.w	r2, #1
 800271c:	d02e      	beq.n	800277c <HAL_CAN_Init+0x152>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800271e:	f7ff feeb 	bl	80024f8 <HAL_GetTick>
 8002722:	1b40      	subs	r0, r0, r5
 8002724:	280a      	cmp	r0, #10
 8002726:	d9f5      	bls.n	8002714 <HAL_CAN_Init+0xea>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8002728:	2003      	movs	r0, #3
 800272a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
       __HAL_UNLOCK(hcan);
 800272e:	2300      	movs	r3, #0
 8002730:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
       return HAL_TIMEOUT;
 8002734:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e7ad      	b.n	800269c <HAL_CAN_Init+0x72>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e7af      	b.n	80026ac <HAL_CAN_Init+0x82>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6813      	ldr	r3, [r2, #0]
 8002750:	f043 0320 	orr.w	r3, r3, #32
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e7b1      	b.n	80026bc <HAL_CAN_Init+0x92>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e7b3      	b.n	80026cc <HAL_CAN_Init+0xa2>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e7b5      	b.n	80026dc <HAL_CAN_Init+0xb2>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e7b7      	b.n	80026ec <HAL_CAN_Init+0xc2>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f013 0f01 	tst.w	r3, #1
 8002782:	d008      	beq.n	8002796 <HAL_CAN_Init+0x16c>
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_CAN_Init+0x160>
 8002788:	2300      	movs	r3, #0
  if(status == CAN_INITSTATUS_SUCCESS)
 800278a:	b933      	cbnz	r3, 800279a <HAL_CAN_Init+0x170>
    hcan->State = HAL_CAN_STATE_ERROR;
 800278c:	2304      	movs	r3, #4
 800278e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8002792:	2001      	movs	r0, #1
 8002794:	bd38      	pop	{r3, r4, r5, pc}
      status = CAN_INITSTATUS_SUCCESS;
 8002796:	2301      	movs	r3, #1
 8002798:	e7f7      	b.n	800278a <HAL_CAN_Init+0x160>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800279a:	2000      	movs	r0, #0
 800279c:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 800279e:	2301      	movs	r3, #1
 80027a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80027a4:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 80027b6:	d108      	bne.n	80027ca <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80027b8:	689a      	ldr	r2, [r3, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80027ba:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 80027be:	d104      	bne.n	80027ca <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80027c0:	689a      	ldr	r2, [r3, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80027c2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80027c6:	f000 80f0 	beq.w	80029aa <HAL_CAN_Transmit+0x1fe>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 80027ca:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80027ce:	2a01      	cmp	r2, #1
 80027d0:	f000 80f0 	beq.w	80029b4 <HAL_CAN_Transmit+0x208>
 80027d4:	2201      	movs	r2, #1
 80027d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Change CAN state */
    switch(hcan->State)
 80027da:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	2a32      	cmp	r2, #50	; 0x32
 80027e2:	d014      	beq.n	800280e <HAL_CAN_Transmit+0x62>
 80027e4:	2a62      	cmp	r2, #98	; 0x62
 80027e6:	d016      	beq.n	8002816 <HAL_CAN_Transmit+0x6a>
 80027e8:	2a22      	cmp	r2, #34	; 0x22
 80027ea:	d003      	beq.n	80027f4 <HAL_CAN_Transmit+0x48>
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80027ec:	2212      	movs	r2, #18
 80027ee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 80027f2:	e002      	b.n	80027fa <HAL_CAN_Transmit+0x4e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80027f4:	2242      	movs	r2, #66	; 0x42
 80027f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8002800:	d10d      	bne.n	800281e <HAL_CAN_Transmit+0x72>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8002808:	d061      	beq.n	80028ce <HAL_CAN_Transmit+0x122>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 800280a:	2501      	movs	r5, #1
 800280c:	e008      	b.n	8002820 <HAL_CAN_Transmit+0x74>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800280e:	2252      	movs	r2, #82	; 0x52
 8002810:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 8002814:	e7f1      	b.n	80027fa <HAL_CAN_Transmit+0x4e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8002816:	2272      	movs	r2, #114	; 0x72
 8002818:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 800281c:	e7ed      	b.n	80027fa <HAL_CAN_Transmit+0x4e>
      transmitmailbox = CAN_TXMAILBOX_0;
 800281e:	2500      	movs	r5, #0
    {
      transmitmailbox = CAN_TXMAILBOX_2;
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8002820:	f105 0218 	add.w	r2, r5, #24
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	589c      	ldr	r4, [r3, r2]
 8002828:	f004 0401 	and.w	r4, r4, #1
 800282c:	509c      	str	r4, [r3, r2]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800282e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002830:	6893      	ldr	r3, [r2, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d14d      	bne.n	80028d2 <HAL_CAN_Transmit+0x126>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8002836:	6806      	ldr	r6, [r0, #0]
 8002838:	f105 0318 	add.w	r3, r5, #24
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	58f4      	ldr	r4, [r6, r3]
 8002840:	6817      	ldr	r7, [r2, #0]
                                                           hcan->pTxMsg->RTR);
 8002842:	68d2      	ldr	r2, [r2, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8002844:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8002848:	4322      	orrs	r2, r4
 800284a:	50f2      	str	r2, [r6, r3]
 800284c:	460e      	mov	r6, r1
 800284e:	4604      	mov	r4, r0
                                                           hcan->pTxMsg->IDE | \
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8002850:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002852:	6913      	ldr	r3, [r2, #16]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	6113      	str	r3, [r2, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	f105 0118 	add.w	r1, r5, #24
 8002860:	0109      	lsls	r1, r1, #4
 8002862:	440b      	add	r3, r1
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	f022 020f 	bic.w	r2, r2, #15
 800286a:	605a      	str	r2, [r3, #4]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800286c:	6803      	ldr	r3, [r0, #0]
 800286e:	440b      	add	r3, r1
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002874:	6900      	ldr	r0, [r0, #16]
 8002876:	4302      	orrs	r2, r0
 8002878:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800287e:	7dc7      	ldrb	r7, [r0, #23]
 8002880:	7d83      	ldrb	r3, [r0, #22]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8002888:	7d47      	ldrb	r7, [r0, #21]
 800288a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800288e:	7d00      	ldrb	r0, [r0, #20]
 8002890:	4303      	orrs	r3, r0
 8002892:	012f      	lsls	r7, r5, #4
 8002894:	443a      	add	r2, r7
 8002896:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 800289a:	6822      	ldr	r2, [r4, #0]
 800289c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800289e:	f890 e01b 	ldrb.w	lr, [r0, #27]
 80028a2:	7e83      	ldrb	r3, [r0, #26]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80028aa:	f890 e019 	ldrb.w	lr, [r0, #25]
 80028ae:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80028b2:	7e00      	ldrb	r0, [r0, #24]
 80028b4:	4303      	orrs	r3, r0
 80028b6:	443a      	add	r2, r7
 80028b8:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	5853      	ldr	r3, [r2, r1]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	5053      	str	r3, [r2, r1]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 80028c6:	f7ff fe17 	bl	80024f8 <HAL_GetTick>
 80028ca:	4607      	mov	r7, r0
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80028cc:	e03f      	b.n	800294e <HAL_CAN_Transmit+0x1a2>
      transmitmailbox = CAN_TXMAILBOX_2;
 80028ce:	2502      	movs	r5, #2
 80028d0:	e7a6      	b.n	8002820 <HAL_CAN_Transmit+0x74>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 80028d2:	6807      	ldr	r7, [r0, #0]
 80028d4:	f105 0418 	add.w	r4, r5, #24
 80028d8:	0124      	lsls	r4, r4, #4
 80028da:	f857 e004 	ldr.w	lr, [r7, r4]
 80028de:	6856      	ldr	r6, [r2, #4]
 80028e0:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
                                                           hcan->pTxMsg->RTR);
 80028e4:	68d2      	ldr	r2, [r2, #12]
                                                           hcan->pTxMsg->IDE | \
 80028e6:	4313      	orrs	r3, r2
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 80028e8:	ea43 030e 	orr.w	r3, r3, lr
 80028ec:	513b      	str	r3, [r7, r4]
 80028ee:	e7ad      	b.n	800284c <HAL_CAN_Transmit+0xa0>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80028f0:	b126      	cbz	r6, 80028fc <HAL_CAN_Transmit+0x150>
 80028f2:	f7ff fe01 	bl	80024f8 <HAL_GetTick>
 80028f6:	1bc0      	subs	r0, r0, r7
 80028f8:	4286      	cmp	r6, r0
 80028fa:	d228      	bcs.n	800294e <HAL_CAN_Transmit+0x1a2>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8002902:	b94d      	cbnz	r5, 8002918 <HAL_CAN_Transmit+0x16c>
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	6893      	ldr	r3, [r2, #8]
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	6093      	str	r3, [r2, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 800290e:	2300      	movs	r3, #0
 8002910:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002914:	2003      	movs	r0, #3
 8002916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8002918:	2d01      	cmp	r5, #1
 800291a:	d005      	beq.n	8002928 <HAL_CAN_Transmit+0x17c>
 800291c:	6822      	ldr	r2, [r4, #0]
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002924:	6093      	str	r3, [r2, #8]
 8002926:	e7f2      	b.n	800290e <HAL_CAN_Transmit+0x162>
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	6893      	ldr	r3, [r2, #8]
 800292c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	e7ec      	b.n	800290e <HAL_CAN_Transmit+0x162>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8002934:	2d01      	cmp	r5, #1
 8002936:	d014      	beq.n	8002962 <HAL_CAN_Transmit+0x1b6>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_CAN_Transmit+0x20c>)
 800293e:	4393      	bics	r3, r2
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b1a3      	cbz	r3, 8002972 <HAL_CAN_Transmit+0x1c6>
      if(Timeout != HAL_MAX_DELAY)
 8002948:	f1b6 3fff 	cmp.w	r6, #4294967295
 800294c:	d1d0      	bne.n	80028f0 <HAL_CAN_Transmit+0x144>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800294e:	2d00      	cmp	r5, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_CAN_Transmit+0x188>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_CAN_Transmit+0x210>)
 8002958:	4393      	bics	r3, r2
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	e7f1      	b.n	8002946 <HAL_CAN_Transmit+0x19a>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_CAN_Transmit+0x214>)
 8002968:	4393      	bics	r3, r2
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	e7e9      	b.n	8002946 <HAL_CAN_Transmit+0x19a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8002972:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b52      	cmp	r3, #82	; 0x52
 800297a:	d00e      	beq.n	800299a <HAL_CAN_Transmit+0x1ee>
 800297c:	2b72      	cmp	r3, #114	; 0x72
 800297e:	d010      	beq.n	80029a2 <HAL_CAN_Transmit+0x1f6>
 8002980:	2b42      	cmp	r3, #66	; 0x42
 8002982:	d003      	beq.n	800298c <HAL_CAN_Transmit+0x1e0>
          break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 8002984:	2301      	movs	r3, #1
 8002986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 800298a:	e002      	b.n	8002992 <HAL_CAN_Transmit+0x1e6>
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800298c:	2322      	movs	r3, #34	; 0x22
 800298e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8002992:	2000      	movs	r0, #0
 8002994:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_OK;
 8002998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800299a:	2332      	movs	r3, #50	; 0x32
 800299c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 80029a0:	e7f7      	b.n	8002992 <HAL_CAN_Transmit+0x1e6>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80029a2:	2362      	movs	r3, #98	; 0x62
 80029a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 80029a8:	e7f3      	b.n	8002992 <HAL_CAN_Transmit+0x1e6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 80029aa:	2304      	movs	r3, #4
 80029ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Return function status */
    return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
 80029b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hcan);
 80029b4:	2002      	movs	r0, #2
  }
}
 80029b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029b8:	10010000 	.word	0x10010000
 80029bc:	04000001 	.word	0x04000001
 80029c0:	08000100 	.word	0x08000100

080029c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80029d0:	0200      	lsls	r0, r0, #8
 80029d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80029d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80029dc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029e0:	60d0      	str	r0, [r2, #12]
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_NVIC_SetPriority+0x5c>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f2:	f1c3 0407 	rsb	r4, r3, #7
 80029f6:	2c04      	cmp	r4, #4
 80029f8:	bf28      	it	cs
 80029fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fc:	1d1d      	adds	r5, r3, #4
 80029fe:	2d06      	cmp	r5, #6
 8002a00:	d917      	bls.n	8002a32 <HAL_NVIC_SetPriority+0x4a>
 8002a02:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	2501      	movs	r5, #1
 8002a06:	fa05 f404 	lsl.w	r4, r5, r4
 8002a0a:	3c01      	subs	r4, #1
 8002a0c:	4021      	ands	r1, r4
 8002a0e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	fa05 f303 	lsl.w	r3, r5, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	db0b      	blt.n	8002a36 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	0109      	lsls	r1, r1, #4
 8002a20:	b2c9      	uxtb	r1, r1
 8002a22:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a26:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a2a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a2e:	bc30      	pop	{r4, r5}
 8002a30:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	2300      	movs	r3, #0
 8002a34:	e7e6      	b.n	8002a04 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	f000 000f 	and.w	r0, r0, #15
 8002a3a:	0109      	lsls	r1, r1, #4
 8002a3c:	b2c9      	uxtb	r1, r1
 8002a3e:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <HAL_NVIC_SetPriority+0x60>)
 8002a40:	5419      	strb	r1, [r3, r0]
 8002a42:	e7f4      	b.n	8002a2e <HAL_NVIC_SetPriority+0x46>
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	e000ed14 	.word	0xe000ed14

08002a4c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a4c:	0942      	lsrs	r2, r0, #5
 8002a4e:	f000 001f 	and.w	r0, r0, #31
 8002a52:	2301      	movs	r3, #1
 8002a54:	fa03 f000 	lsl.w	r0, r3, r0
 8002a58:	4b01      	ldr	r3, [pc, #4]	; (8002a60 <HAL_NVIC_EnableIRQ+0x14>)
 8002a5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	3801      	subs	r0, #1
 8002a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a6a:	d20a      	bcs.n	8002a82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_SYSTICK_Config+0x24>)
 8002a6e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	21f0      	movs	r1, #240	; 0xf0
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <HAL_SYSTICK_Config+0x28>)
 8002a74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	2000      	movs	r0, #0
 8002a7a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002a90:	2804      	cmp	r0, #4
 8002a92:	d005      	beq.n	8002aa0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002a94:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8002a96:	6813      	ldr	r3, [r2, #0]
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4770      	bx	lr
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ab0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002ab2:	f003 f8af 	bl	8005c14 <HAL_SYSTICK_Callback>
 8002ab6:	bd08      	pop	{r3, pc}

08002ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ab8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aca:	6802      	ldr	r2, [r0, #0]
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	f023 030e 	bic.w	r3, r3, #14
 8002ad2:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ad4:	6802      	ldr	r2, [r0, #0]
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ade:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ae0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	2300      	movs	r3, #0
 8002af0:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002af4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002af6:	b113      	cbz	r3, 8002afe <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8002af8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2000      	movs	r0, #0
 8002afc:	bd08      	pop	{r3, pc}
 8002afe:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8002b00:	bd08      	pop	{r3, pc}
	...

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002b08:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002b0a:	e08c      	b.n	8002c26 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b0c:	08de      	lsrs	r6, r3, #3
 8002b0e:	3608      	adds	r6, #8
 8002b10:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b14:	f003 0e07 	and.w	lr, r3, #7
 8002b18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002b1c:	270f      	movs	r7, #15
 8002b1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b22:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b26:	690f      	ldr	r7, [r1, #16]
 8002b28:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b2c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8002b2e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8002b32:	e087      	b.n	8002c44 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b36:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b38:	68cf      	ldr	r7, [r1, #12]
 8002b3a:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b3e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8002b40:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b48:	684e      	ldr	r6, [r1, #4]
 8002b4a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8002b4e:	409e      	lsls	r6, r3
 8002b50:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002b52:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b54:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	688d      	ldr	r5, [r1, #8]
 8002b5a:	fa05 f50e 	lsl.w	r5, r5, lr
 8002b5e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002b60:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b62:	684c      	ldr	r4, [r1, #4]
 8002b64:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002b68:	d05c      	beq.n	8002c24 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4c4a      	ldr	r4, [pc, #296]	; (8002c94 <HAL_GPIO_Init+0x190>)
 8002b6c:	69a5      	ldr	r5, [r4, #24]
 8002b6e:	f045 0501 	orr.w	r5, r5, #1
 8002b72:	61a5      	str	r5, [r4, #24]
 8002b74:	69a4      	ldr	r4, [r4, #24]
 8002b76:	f004 0401 	and.w	r4, r4, #1
 8002b7a:	9401      	str	r4, [sp, #4]
 8002b7c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b7e:	089d      	lsrs	r5, r3, #2
 8002b80:	1cae      	adds	r6, r5, #2
 8002b82:	4c45      	ldr	r4, [pc, #276]	; (8002c98 <HAL_GPIO_Init+0x194>)
 8002b84:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002b88:	f003 0603 	and.w	r6, r3, #3
 8002b8c:	00b6      	lsls	r6, r6, #2
 8002b8e:	270f      	movs	r7, #15
 8002b90:	40b7      	lsls	r7, r6
 8002b92:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b96:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002b9a:	d070      	beq.n	8002c7e <HAL_GPIO_Init+0x17a>
 8002b9c:	4f3f      	ldr	r7, [pc, #252]	; (8002c9c <HAL_GPIO_Init+0x198>)
 8002b9e:	42b8      	cmp	r0, r7
 8002ba0:	d06f      	beq.n	8002c82 <HAL_GPIO_Init+0x17e>
 8002ba2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002ba6:	42b8      	cmp	r0, r7
 8002ba8:	d06d      	beq.n	8002c86 <HAL_GPIO_Init+0x182>
 8002baa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002bae:	42b8      	cmp	r0, r7
 8002bb0:	d06b      	beq.n	8002c8a <HAL_GPIO_Init+0x186>
 8002bb2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002bb6:	42b8      	cmp	r0, r7
 8002bb8:	d05f      	beq.n	8002c7a <HAL_GPIO_Init+0x176>
 8002bba:	2705      	movs	r7, #5
 8002bbc:	fa07 f606 	lsl.w	r6, r7, r6
 8002bc0:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc2:	3502      	adds	r5, #2
 8002bc4:	4e34      	ldr	r6, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x194>)
 8002bc6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bca:	4c35      	ldr	r4, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x19c>)
 8002bcc:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	43d4      	mvns	r4, r2
 8002bd0:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bd4:	684f      	ldr	r7, [r1, #4]
 8002bd6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002bda:	d001      	beq.n	8002be0 <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8002bdc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002be0:	4d2f      	ldr	r5, [pc, #188]	; (8002ca0 <HAL_GPIO_Init+0x19c>)
 8002be2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002be4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bea:	684f      	ldr	r7, [r1, #4]
 8002bec:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002bf0:	d001      	beq.n	8002bf6 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8002bf2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002bf6:	4d2a      	ldr	r5, [pc, #168]	; (8002ca0 <HAL_GPIO_Init+0x19c>)
 8002bf8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfa:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c00:	684f      	ldr	r7, [r1, #4]
 8002c02:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c06:	d001      	beq.n	8002c0c <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8002c08:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002c0c:	4d24      	ldr	r5, [pc, #144]	; (8002ca0 <HAL_GPIO_Init+0x19c>)
 8002c0e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002c10:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c14:	684e      	ldr	r6, [r1, #4]
 8002c16:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002c1a:	d001      	beq.n	8002c20 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8002c1c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_GPIO_Init+0x19c>)
 8002c22:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8002c24:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002c26:	680a      	ldr	r2, [r1, #0]
 8002c28:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c2c:	d02f      	beq.n	8002c8e <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c2e:	2501      	movs	r5, #1
 8002c30:	409d      	lsls	r5, r3
    if(iocurrent)
 8002c32:	402a      	ands	r2, r5
 8002c34:	d0f6      	beq.n	8002c24 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c36:	684c      	ldr	r4, [r1, #4]
 8002c38:	2c02      	cmp	r4, #2
 8002c3a:	f43f af67 	beq.w	8002b0c <HAL_GPIO_Init+0x8>
 8002c3e:	2c12      	cmp	r4, #18
 8002c40:	f43f af64 	beq.w	8002b0c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8002c44:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c4a:	2403      	movs	r4, #3
 8002c4c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c50:	43e4      	mvns	r4, r4
 8002c52:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	684f      	ldr	r7, [r1, #4]
 8002c56:	f007 0703 	and.w	r7, r7, #3
 8002c5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8002c5e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8002c60:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c62:	684e      	ldr	r6, [r1, #4]
 8002c64:	1e77      	subs	r7, r6, #1
 8002c66:	2f01      	cmp	r7, #1
 8002c68:	f67f af64 	bls.w	8002b34 <HAL_GPIO_Init+0x30>
 8002c6c:	2e11      	cmp	r6, #17
 8002c6e:	f43f af61 	beq.w	8002b34 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	2e12      	cmp	r6, #18
 8002c74:	f47f af6e 	bne.w	8002b54 <HAL_GPIO_Init+0x50>
 8002c78:	e75c      	b.n	8002b34 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c7a:	2704      	movs	r7, #4
 8002c7c:	e79e      	b.n	8002bbc <HAL_GPIO_Init+0xb8>
 8002c7e:	2700      	movs	r7, #0
 8002c80:	e79c      	b.n	8002bbc <HAL_GPIO_Init+0xb8>
 8002c82:	2701      	movs	r7, #1
 8002c84:	e79a      	b.n	8002bbc <HAL_GPIO_Init+0xb8>
 8002c86:	2702      	movs	r7, #2
 8002c88:	e798      	b.n	8002bbc <HAL_GPIO_Init+0xb8>
 8002c8a:	2703      	movs	r7, #3
 8002c8c:	e796      	b.n	8002bbc <HAL_GPIO_Init+0xb8>
  }
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8002ca4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8002ca6:	fa31 f203 	lsrs.w	r2, r1, r3
 8002caa:	d071      	beq.n	8002d90 <HAL_GPIO_DeInit+0xec>
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	e00a      	b.n	8002cc6 <HAL_GPIO_DeInit+0x22>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002cb0:	2504      	movs	r5, #4
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	fa05 f202 	lsl.w	r2, r5, r2
 8002cba:	4294      	cmp	r4, r2
 8002cbc:	d04b      	beq.n	8002d56 <HAL_GPIO_DeInit+0xb2>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 8002cbe:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8002cc0:	fa31 f203 	lsrs.w	r2, r1, r3
 8002cc4:	d063      	beq.n	8002d8e <HAL_GPIO_DeInit+0xea>
    iocurrent = GPIO_Pin & (1U << position);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
    if (iocurrent)
 8002cca:	ea11 0e02 	ands.w	lr, r1, r2
 8002cce:	d0f6      	beq.n	8002cbe <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd0:	6805      	ldr	r5, [r0, #0]
 8002cd2:	005e      	lsls	r6, r3, #1
 8002cd4:	2403      	movs	r4, #3
 8002cd6:	40b4      	lsls	r4, r6
 8002cd8:	43e4      	mvns	r4, r4
 8002cda:	4025      	ands	r5, r4
 8002cdc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cde:	08df      	lsrs	r7, r3, #3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	f850 c027 	ldr.w	ip, [r0, r7, lsl #2]
 8002ce6:	f003 0507 	and.w	r5, r3, #7
 8002cea:	00ad      	lsls	r5, r5, #2
 8002cec:	260f      	movs	r6, #15
 8002cee:	fa06 f505 	lsl.w	r5, r6, r5
 8002cf2:	ea2c 0505 	bic.w	r5, ip, r5
 8002cf6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cfa:	6885      	ldr	r5, [r0, #8]
 8002cfc:	4025      	ands	r5, r4
 8002cfe:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d00:	6845      	ldr	r5, [r0, #4]
 8002d02:	ea25 0202 	bic.w	r2, r5, r2
 8002d06:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d08:	68c2      	ldr	r2, [r0, #12]
 8002d0a:	4014      	ands	r4, r2
 8002d0c:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8002d0e:	089f      	lsrs	r7, r3, #2
 8002d10:	1cbc      	adds	r4, r7, #2
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_GPIO_DeInit+0xf0>)
 8002d14:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4096      	lsls	r6, r2
 8002d20:	4034      	ands	r4, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002d26:	d0c5      	beq.n	8002cb4 <HAL_GPIO_DeInit+0x10>
 8002d28:	4d1b      	ldr	r5, [pc, #108]	; (8002d98 <HAL_GPIO_DeInit+0xf4>)
 8002d2a:	42a8      	cmp	r0, r5
 8002d2c:	d00d      	beq.n	8002d4a <HAL_GPIO_DeInit+0xa6>
 8002d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d32:	42a8      	cmp	r0, r5
 8002d34:	d00b      	beq.n	8002d4e <HAL_GPIO_DeInit+0xaa>
 8002d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d3a:	42a8      	cmp	r0, r5
 8002d3c:	d009      	beq.n	8002d52 <HAL_GPIO_DeInit+0xae>
 8002d3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d42:	42a8      	cmp	r0, r5
 8002d44:	d0b4      	beq.n	8002cb0 <HAL_GPIO_DeInit+0xc>
 8002d46:	2505      	movs	r5, #5
 8002d48:	e7b5      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002d4a:	2501      	movs	r5, #1
 8002d4c:	e7b3      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002d4e:	2502      	movs	r5, #2
 8002d50:	e7b1      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002d52:	2503      	movs	r5, #3
 8002d54:	e7af      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002d56:	4d0f      	ldr	r5, [pc, #60]	; (8002d94 <HAL_GPIO_DeInit+0xf0>)
 8002d58:	1cba      	adds	r2, r7, #2
 8002d5a:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8002d5e:	ea24 0606 	bic.w	r6, r4, r6
 8002d62:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d66:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <HAL_GPIO_DeInit+0xf8>)
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	ea6f 0e0e 	mvn.w	lr, lr
 8002d6e:	ea02 020e 	and.w	r2, r2, lr
 8002d72:	6022      	str	r2, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d74:	6862      	ldr	r2, [r4, #4]
 8002d76:	ea0e 0202 	and.w	r2, lr, r2
 8002d7a:	6062      	str	r2, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d7c:	68a2      	ldr	r2, [r4, #8]
 8002d7e:	ea0e 0202 	and.w	r2, lr, r2
 8002d82:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d84:	68e2      	ldr	r2, [r4, #12]
 8002d86:	ea0e 0202 	and.w	r2, lr, r2
 8002d8a:	60e2      	str	r2, [r4, #12]
 8002d8c:	e797      	b.n	8002cbe <HAL_GPIO_DeInit+0x1a>
  }
}
 8002d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	48000400 	.word	0x48000400
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da0:	6903      	ldr	r3, [r0, #16]
 8002da2:	4219      	tst	r1, r3
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002da8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002daa:	2001      	movs	r0, #1
 8002dac:	4770      	bx	lr

08002dae <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dae:	b90a      	cbnz	r2, 8002db4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db0:	6281      	str	r1, [r0, #40]	; 0x28
 8002db2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db4:	6181      	str	r1, [r0, #24]
 8002db6:	4770      	bx	lr

08002db8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002db8:	6943      	ldr	r3, [r0, #20]
 8002dba:	4059      	eors	r1, r3
 8002dbc:	6141      	str	r1, [r0, #20]
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4203      	tst	r3, r0
 8002dc8:	d100      	bne.n	8002dcc <HAL_GPIO_EXTI_IRQHandler+0xc>
 8002dca:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002dce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd0:	f002 ff44 	bl	8005c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd4:	e7f9      	b.n	8002dca <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002dd6:	bf00      	nop
 8002dd8:	40010400 	.word	0x40010400

08002ddc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ddc:	6803      	ldr	r3, [r0, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	f012 0f02 	tst.w	r2, #2
 8002de4:	d001      	beq.n	8002dea <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002de6:	2200      	movs	r2, #0
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dea:	6803      	ldr	r3, [r0, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	f012 0f01 	tst.w	r2, #1
 8002df2:	d103      	bne.n	8002dfc <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	619a      	str	r2, [r3, #24]
 8002dfc:	4770      	bx	lr

08002dfe <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002dfe:	b470      	push	{r4, r5, r6}
 8002e00:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e02:	6806      	ldr	r6, [r0, #0]
 8002e04:	6870      	ldr	r0, [r6, #4]
 8002e06:	0d6c      	lsrs	r4, r5, #21
 8002e08:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002e0c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002e10:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002e14:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002e18:	f044 0403 	orr.w	r4, r4, #3
 8002e1c:	ea20 0004 	bic.w	r0, r0, r4
 8002e20:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002e28:	4319      	orrs	r1, r3
 8002e2a:	4329      	orrs	r1, r5
 8002e2c:	4308      	orrs	r0, r1
 8002e2e:	6070      	str	r0, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e30:	bc70      	pop	{r4, r5, r6}
 8002e32:	4770      	bx	lr

08002e34 <I2C_IsAcknowledgeFailed>:
{
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4604      	mov	r4, r0
 8002e38:	460d      	mov	r5, r1
 8002e3a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e3c:	6803      	ldr	r3, [r0, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f013 0f10 	tst.w	r3, #16
 8002e44:	d017      	beq.n	8002e76 <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	f012 0f20 	tst.w	r2, #32
 8002e4e:	d114      	bne.n	8002e7a <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 8002e50:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002e54:	d0f7      	beq.n	8002e46 <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e56:	b125      	cbz	r5, 8002e62 <I2C_IsAcknowledgeFailed+0x2e>
 8002e58:	f7ff fb4e 	bl	80024f8 <HAL_GetTick>
 8002e5c:	1b80      	subs	r0, r0, r6
 8002e5e:	4285      	cmp	r5, r0
 8002e60:	d2f1      	bcs.n	8002e46 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	2320      	movs	r3, #32
 8002e64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002e6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8002e72:	2003      	movs	r0, #3
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	2520      	movs	r5, #32
 8002e82:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff ffa9 	bl	8002ddc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	6853      	ldr	r3, [r2, #4]
 8002e8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002e92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002e96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002eae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}

08002eb6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002eb6:	b570      	push	{r4, r5, r6, lr}
 8002eb8:	4604      	mov	r4, r0
 8002eba:	460d      	mov	r5, r1
 8002ebc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f013 0f02 	tst.w	r3, #2
 8002ec6:	d11c      	bne.n	8002f02 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec8:	4632      	mov	r2, r6
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7ff ffb1 	bl	8002e34 <I2C_IsAcknowledgeFailed>
 8002ed2:	b9c0      	cbnz	r0, 8002f06 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002ed4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ed8:	d0f1      	beq.n	8002ebe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eda:	b125      	cbz	r5, 8002ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8002edc:	f7ff fb0c 	bl	80024f8 <HAL_GetTick>
 8002ee0:	1b80      	subs	r0, r0, r6
 8002ee2:	4285      	cmp	r5, r0
 8002ee4:	d2eb      	bcs.n	8002ebe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ee8:	f043 0320 	orr.w	r3, r3, #32
 8002eec:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002efa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002efe:	2003      	movs	r0, #3
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f06:	2001      	movs	r0, #1
}
 8002f08:	bd70      	pop	{r4, r5, r6, pc}

08002f0a <I2C_WaitOnFlagUntilTimeout>:
{
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	460f      	mov	r7, r1
 8002f10:	4616      	mov	r6, r2
 8002f12:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	ea37 0303 	bics.w	r3, r7, r3
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	42b3      	cmp	r3, r6
 8002f24:	d113      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002f2a:	d0f3      	beq.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f2c:	b12c      	cbz	r4, 8002f3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	f7ff fae3 	bl	80024f8 <HAL_GetTick>
 8002f32:	9b06      	ldr	r3, [sp, #24]
 8002f34:	1ac0      	subs	r0, r0, r3
 8002f36:	4284      	cmp	r4, r0
 8002f38:	d2ec      	bcs.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002f46:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002f4e:	2000      	movs	r0, #0
}
 8002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f52 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002f52:	b570      	push	{r4, r5, r6, lr}
 8002f54:	4605      	mov	r5, r0
 8002f56:	460c      	mov	r4, r1
 8002f58:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f013 0f20 	tst.w	r3, #32
 8002f62:	d119      	bne.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	4632      	mov	r2, r6
 8002f66:	4621      	mov	r1, r4
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f7ff ff63 	bl	8002e34 <I2C_IsAcknowledgeFailed>
 8002f6e:	b9a8      	cbnz	r0, 8002f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f70:	b124      	cbz	r4, 8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8002f72:	f7ff fac1 	bl	80024f8 <HAL_GetTick>
 8002f76:	1b80      	subs	r0, r0, r6
 8002f78:	4284      	cmp	r4, r0
 8002f7a:	d2ee      	bcs.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	2320      	movs	r3, #32
 8002f86:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f90:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8002f94:	2003      	movs	r0, #3
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
}
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}

08002fa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f013 0f04 	tst.w	r3, #4
 8002fb0:	d13d      	bne.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0x8e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff ff3c 	bl	8002e34 <I2C_IsAcknowledgeFailed>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d137      	bne.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0x92>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	f012 0f20 	tst.w	r2, #32
 8002fca:	d112      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fcc:	b125      	cbz	r5, 8002fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
 8002fce:	f7ff fa93 	bl	80024f8 <HAL_GetTick>
 8002fd2:	1b80      	subs	r0, r0, r6
 8002fd4:	4285      	cmp	r5, r0
 8002fd6:	d2e7      	bcs.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fda:	f043 0320 	orr.w	r3, r3, #32
 8002fde:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8002fec:	2103      	movs	r1, #3
}
 8002fee:	4608      	mov	r0, r1
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	f012 0f04 	tst.w	r2, #4
 8002ff8:	d002      	beq.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
 8002ffa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002ffc:	2a00      	cmp	r2, #0
 8002ffe:	d1f6      	bne.n	8002fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003000:	2220      	movs	r2, #32
 8003002:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003004:	6821      	ldr	r1, [r4, #0]
 8003006:	684b      	ldr	r3, [r1, #4]
 8003008:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800300c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003010:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800301e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003026:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800302a:	2101      	movs	r1, #1
 800302c:	e7df      	b.n	8002fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800302e:	2100      	movs	r1, #0
 8003030:	e7dd      	b.n	8002fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      return HAL_ERROR;
 8003032:	2101      	movs	r1, #1
 8003034:	e7db      	b.n	8002fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>

08003036 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003036:	2800      	cmp	r0, #0
 8003038:	d059      	beq.n	80030ee <HAL_I2C_Init+0xb8>
{
 800303a:	b510      	push	{r4, lr}
 800303c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003042:	2b00      	cmp	r3, #0
 8003044:	d043      	beq.n	80030ce <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003046:	2324      	movs	r3, #36	; 0x24
 8003048:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800305e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	6893      	ldr	r3, [r2, #8]
 8003064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003068:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800306a:	68e3      	ldr	r3, [r4, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d033      	beq.n	80030d8 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003078:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800307a:	68e3      	ldr	r3, [r4, #12]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d031      	beq.n	80030e4 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	6853      	ldr	r3, [r2, #4]
 8003084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	68d3      	ldr	r3, [r2, #12]
 8003092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003096:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	6961      	ldr	r1, [r4, #20]
 800309e:	430b      	orrs	r3, r1
 80030a0:	69a1      	ldr	r1, [r4, #24]
 80030a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030a6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	69e3      	ldr	r3, [r4, #28]
 80030ac:	6a21      	ldr	r1, [r4, #32]
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	2000      	movs	r0, #0
 80030be:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	2320      	movs	r3, #32
 80030c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80030cc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80030ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80030d2:	f003 fbcb 	bl	800686c <HAL_I2C_MspInit>
 80030d6:	e7b6      	b.n	8003046 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	68a3      	ldr	r3, [r4, #8]
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e7ca      	b.n	800307a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e7c8      	b.n	8003080 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80030ee:	2001      	movs	r0, #1
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80030f2:	b1a8      	cbz	r0, 8003120 <HAL_I2C_DeInit+0x2e>
{
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	2324      	movs	r3, #36	; 0x24
 80030fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003108:	f003 fbda 	bl	80068c0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	2000      	movs	r0, #0
 800310e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003110:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003114:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800311a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800311e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
 8003122:	4770      	bx	lr

08003124 <HAL_I2C_Master_Transmit>:
{
 8003124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003128:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800312e:	b2ed      	uxtb	r5, r5
 8003130:	2d20      	cmp	r5, #32
 8003132:	d004      	beq.n	800313e <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
}
 8003136:	4618      	mov	r0, r3
 8003138:	b003      	add	sp, #12
 800313a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 800313e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003142:	2c01      	cmp	r4, #1
 8003144:	d101      	bne.n	800314a <HAL_I2C_Master_Transmit+0x26>
 8003146:	2302      	movs	r3, #2
 8003148:	e7f5      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
 800314a:	4698      	mov	r8, r3
 800314c:	4617      	mov	r7, r2
 800314e:	460d      	mov	r5, r1
 8003150:	4604      	mov	r4, r0
 8003152:	f04f 0901 	mov.w	r9, #1
 8003156:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800315a:	f7ff f9cd 	bl	80024f8 <HAL_GetTick>
 800315e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003160:	9000      	str	r0, [sp, #0]
 8003162:	2319      	movs	r3, #25
 8003164:	464a      	mov	r2, r9
 8003166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff fecd 	bl	8002f0a <I2C_WaitOnFlagUntilTimeout>
 8003170:	b108      	cbz	r0, 8003176 <HAL_I2C_Master_Transmit+0x52>
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e7df      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003176:	2321      	movs	r3, #33	; 0x21
 8003178:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800317c:	2310      	movs	r3, #16
 800317e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003182:	2300      	movs	r3, #0
 8003184:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003186:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003188:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800318c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d90a      	bls.n	80031ac <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800319a:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <HAL_I2C_Master_Transmit+0x184>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a2:	4629      	mov	r1, r5
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff fe2a 	bl	8002dfe <I2C_TransferConfig>
 80031aa:	e01f      	b.n	80031ec <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80031ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031ae:	b292      	uxth	r2, r2
 80031b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_I2C_Master_Transmit+0x184>)
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	4629      	mov	r1, r5
 80031be:	4620      	mov	r0, r4
 80031c0:	f7ff fe1d 	bl	8002dfe <I2C_TransferConfig>
 80031c4:	e012      	b.n	80031ec <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Master_Transmit+0xac>
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e7b2      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e7b0      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
          hi2c->XferSize = hi2c->XferCount;
 80031d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031d6:	b292      	uxth	r2, r2
 80031d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031da:	2300      	movs	r3, #0
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	4629      	mov	r1, r5
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff fe09 	bl	8002dfe <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d032      	beq.n	800325a <HAL_I2C_Master_Transmit+0x136>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	4632      	mov	r2, r6
 80031f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7ff fe5c 	bl	8002eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1e1      	bne.n	80031c6 <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	6261      	str	r1, [r4, #36]	; 0x24
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800320e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29b      	uxth	r3, r3
 8003216:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003218:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e3      	bne.n	80031ec <HAL_I2C_Master_Transmit+0xc8>
 8003224:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0df      	beq.n	80031ec <HAL_I2C_Master_Transmit+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322c:	9600      	str	r6, [sp, #0]
 800322e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fe68 	bl	8002f0a <I2C_WaitOnFlagUntilTimeout>
 800323a:	bb90      	cbnz	r0, 80032a2 <HAL_I2C_Master_Transmit+0x17e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d9c7      	bls.n	80031d4 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003250:	4629      	mov	r1, r5
 8003252:	4620      	mov	r0, r4
 8003254:	f7ff fdd3 	bl	8002dfe <I2C_TransferConfig>
 8003258:	e7c8      	b.n	80031ec <HAL_I2C_Master_Transmit+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	4632      	mov	r2, r6
 800325c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fe77 	bl	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	b130      	cbz	r0, 8003276 <HAL_I2C_Master_Transmit+0x152>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800326a:	2b04      	cmp	r3, #4
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x14e>
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e761      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e75f      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	2120      	movs	r1, #32
 800327a:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	6842      	ldr	r2, [r0, #4]
 8003280:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003284:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003288:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003296:	2200      	movs	r2, #0
 8003298:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800329c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80032a0:	e749      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e747      	b.n	8003136 <HAL_I2C_Master_Transmit+0x12>
 80032a6:	bf00      	nop
 80032a8:	80002000 	.word	0x80002000

080032ac <HAL_I2C_Master_Receive>:
{
 80032ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032b0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80032b6:	b2ed      	uxtb	r5, r5
 80032b8:	2d20      	cmp	r5, #32
 80032ba:	d004      	beq.n	80032c6 <HAL_I2C_Master_Receive+0x1a>
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
}
 80032be:	4618      	mov	r0, r3
 80032c0:	b003      	add	sp, #12
 80032c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80032c6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80032ca:	2c01      	cmp	r4, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Master_Receive+0x26>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e7f5      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
 80032d2:	4698      	mov	r8, r3
 80032d4:	4617      	mov	r7, r2
 80032d6:	460d      	mov	r5, r1
 80032d8:	4604      	mov	r4, r0
 80032da:	f04f 0901 	mov.w	r9, #1
 80032de:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80032e2:	f7ff f909 	bl	80024f8 <HAL_GetTick>
 80032e6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e8:	9000      	str	r0, [sp, #0]
 80032ea:	2319      	movs	r3, #25
 80032ec:	464a      	mov	r2, r9
 80032ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fe09 	bl	8002f0a <I2C_WaitOnFlagUntilTimeout>
 80032f8:	b108      	cbz	r0, 80032fe <HAL_I2C_Master_Receive+0x52>
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e7df      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032fe:	2322      	movs	r3, #34	; 0x22
 8003300:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003304:	2310      	movs	r3, #16
 8003306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330a:	2300      	movs	r3, #0
 800330c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800330e:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003310:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003314:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d90a      	bls.n	8003334 <HAL_I2C_Master_Receive+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800331e:	22ff      	movs	r2, #255	; 0xff
 8003320:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003322:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_I2C_Master_Receive+0x180>)
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332a:	4629      	mov	r1, r5
 800332c:	4620      	mov	r0, r4
 800332e:	f7ff fd66 	bl	8002dfe <I2C_TransferConfig>
 8003332:	e01f      	b.n	8003374 <HAL_I2C_Master_Receive+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8003334:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003336:	b292      	uxth	r2, r2
 8003338:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800333a:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_I2C_Master_Receive+0x180>)
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	4629      	mov	r1, r5
 8003346:	4620      	mov	r0, r4
 8003348:	f7ff fd59 	bl	8002dfe <I2C_TransferConfig>
 800334c:	e012      	b.n	8003374 <HAL_I2C_Master_Receive+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003350:	2b04      	cmp	r3, #4
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Master_Receive+0xac>
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e7b2      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e7b0      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
          hi2c->XferSize = hi2c->XferCount;
 800335c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800335e:	b292      	uxth	r2, r2
 8003360:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	4629      	mov	r1, r5
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fd45 	bl	8002dfe <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d031      	beq.n	80033e0 <HAL_I2C_Master_Receive+0x134>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	4632      	mov	r2, r6
 800337e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fe0d 	bl	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003386:	2800      	cmp	r0, #0
 8003388:	d1e1      	bne.n	800334e <HAL_I2C_Master_Receive+0xa2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800338a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6262      	str	r2, [r4, #36]	; 0x24
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003394:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003396:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003398:	3a01      	subs	r2, #1
 800339a:	b292      	uxth	r2, r2
 800339c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800339e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	d1e3      	bne.n	8003374 <HAL_I2C_Master_Receive+0xc8>
 80033ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0df      	beq.n	8003374 <HAL_I2C_Master_Receive+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033b4:	9600      	str	r6, [sp, #0]
 80033b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff fda5 	bl	8002f0a <I2C_WaitOnFlagUntilTimeout>
 80033c0:	bb90      	cbnz	r0, 8003428 <HAL_I2C_Master_Receive+0x17c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	d9c8      	bls.n	800335c <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033ce:	2300      	movs	r3, #0
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d6:	4629      	mov	r1, r5
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff fd10 	bl	8002dfe <I2C_TransferConfig>
 80033de:	e7c9      	b.n	8003374 <HAL_I2C_Master_Receive+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e0:	4632      	mov	r2, r6
 80033e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff fdb4 	bl	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	b130      	cbz	r0, 80033fc <HAL_I2C_Master_Receive+0x150>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Master_Receive+0x14c>
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e762      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e760      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	2120      	movs	r1, #32
 8003400:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	6842      	ldr	r2, [r0, #4]
 8003406:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800340a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800340e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800341c:	2200      	movs	r2, #0
 800341e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003422:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003426:	e74a      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e748      	b.n	80032be <HAL_I2C_Master_Receive+0x12>
 800342c:	80002400 	.word	0x80002400

08003430 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003430:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	d001      	beq.n	800343e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800343a:	2002      	movs	r0, #2
 800343c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800343e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003442:	2b01      	cmp	r3, #1
 8003444:	d020      	beq.n	8003488 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003446:	2301      	movs	r3, #1
 8003448:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	2324      	movs	r3, #36	; 0x24
 800344e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003452:	6802      	ldr	r2, [r0, #0]
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800345c:	6802      	ldr	r2, [r0, #0]
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003464:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003466:	6802      	ldr	r2, [r0, #0]
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	4319      	orrs	r1, r3
 800346c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800346e:	6802      	ldr	r2, [r0, #0]
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	2320      	movs	r3, #32
 800347a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8003484:	4618      	mov	r0, r3
 8003486:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003488:	2002      	movs	r0, #2
  }
}
 800348a:	4770      	bx	lr

0800348c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	d001      	beq.n	800349a <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003496:	2002      	movs	r0, #2
 8003498:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800349a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d01e      	beq.n	80034e0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80034a2:	2301      	movs	r3, #1
 80034a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	2324      	movs	r3, #36	; 0x24
 80034aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	6802      	ldr	r2, [r0, #0]
 80034b0:	6813      	ldr	r3, [r2, #0]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80034b8:	6802      	ldr	r2, [r0, #0]
 80034ba:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80034bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80034c0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80034c4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80034c6:	6802      	ldr	r2, [r0, #0]
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	2320      	movs	r3, #32
 80034d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80034dc:	4618      	mov	r0, r3
 80034de:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80034e0:	2002      	movs	r0, #2
  }
}
 80034e2:	4770      	bx	lr

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	f013 0f01 	tst.w	r3, #1
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034f2:	4bb5      	ldr	r3, [pc, #724]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d046      	beq.n	800358c <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034fe:	4bb2      	ldr	r3, [pc, #712]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d03b      	beq.n	8003582 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	f000 808e 	beq.w	8003630 <HAL_RCC_OscConfig+0x14c>
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 8091 	bne.w	800363c <HAL_RCC_OscConfig+0x158>
 800351a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800351e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003530:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003532:	4aa5      	ldr	r2, [pc, #660]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003534:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003536:	f023 030f 	bic.w	r3, r3, #15
 800353a:	68a1      	ldr	r1, [r4, #8]
 800353c:	430b      	orrs	r3, r1
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	6863      	ldr	r3, [r4, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8094 	beq.w	8003670 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe ffd6 	bl	80024f8 <HAL_GetTick>
 800354c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003552:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b9c      	ldr	r3, [pc, #624]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	4219      	tst	r1, r3
 8003572:	d122      	bne.n	80035ba <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe ffc0 	bl	80024f8 <HAL_GetTick>
 8003578:	1b40      	subs	r0, r0, r5
 800357a:	2864      	cmp	r0, #100	; 0x64
 800357c:	d9e7      	bls.n	800354e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 800357e:	2003      	movs	r0, #3
 8003580:	e2ab      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003582:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800358a:	d0be      	beq.n	800350a <HAL_RCC_OscConfig+0x26>
 800358c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003590:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	4b8c      	ldr	r3, [pc, #560]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2201      	movs	r2, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	4219      	tst	r1, r3
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_OscConfig+0xd6>
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8289 	beq.w	8003acc <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f013 0f02 	tst.w	r3, #2
 80035c0:	f000 809c 	beq.w	80036fc <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c4:	4b80      	ldr	r3, [pc, #512]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f013 0f0c 	tst.w	r3, #12
 80035cc:	d072      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035ce:	4b7e      	ldr	r3, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d067      	beq.n	80036aa <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80cb 	beq.w	8003778 <HAL_RCC_OscConfig+0x294>
 80035e2:	2201      	movs	r2, #1
 80035e4:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe ff7e 	bl	80024f8 <HAL_GetTick>
 80035fc:	4605      	mov	r5, r0
 80035fe:	2302      	movs	r3, #2
 8003600:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	2302      	movs	r3, #2
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	4219      	tst	r1, r3
 800361e:	f040 809c 	bne.w	800375a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe ff69 	bl	80024f8 <HAL_GetTick>
 8003626:	1b40      	subs	r0, r0, r5
 8003628:	2802      	cmp	r0, #2
 800362a:	d9e8      	bls.n	80035fe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800362c:	2003      	movs	r0, #3
 800362e:	e254      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003630:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e77a      	b.n	8003532 <HAL_RCC_OscConfig+0x4e>
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d009      	beq.n	8003656 <HAL_RCC_OscConfig+0x172>
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e76d      	b.n	8003532 <HAL_RCC_OscConfig+0x4e>
 8003656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800365a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e760      	b.n	8003532 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8003670:	f7fe ff42 	bl	80024f8 <HAL_GetTick>
 8003674:	4605      	mov	r5, r0
 8003676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	4219      	tst	r1, r3
 800369a:	d08e      	beq.n	80035ba <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe ff2c 	bl	80024f8 <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	2864      	cmp	r0, #100	; 0x64
 80036a4:	d9e7      	bls.n	8003676 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80036a6:	2003      	movs	r0, #3
 80036a8:	e217      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036b2:	d192      	bne.n	80035da <HAL_RCC_OscConfig+0xf6>
 80036b4:	2302      	movs	r3, #2
 80036b6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	2302      	movs	r3, #2
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2201      	movs	r2, #1
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	4219      	tst	r1, r3
 80036d4:	d004      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1fc>
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	4293      	cmp	r3, r2
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
 80036de:	e1fc      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4839      	ldr	r0, [pc, #228]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 80036e2:	6803      	ldr	r3, [r0, #0]
 80036e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036e8:	6961      	ldr	r1, [r4, #20]
 80036ea:	22f8      	movs	r2, #248	; 0xf8
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4313      	orrs	r3, r2
 80036fa:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f013 0f08 	tst.w	r3, #8
 8003702:	f000 808d 	beq.w	8003820 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003706:	69a3      	ldr	r3, [r4, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d061      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2ec>
 800370c:	2101      	movs	r1, #1
 800370e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x2e8>)
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe feeb 	bl	80024f8 <HAL_GetTick>
 8003722:	4605      	mov	r5, r0
 8003724:	2302      	movs	r3, #2
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 8003734:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	4219      	tst	r1, r3
 800374a:	d169      	bne.n	8003820 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe fed4 	bl	80024f8 <HAL_GetTick>
 8003750:	1b40      	subs	r0, r0, r5
 8003752:	2802      	cmp	r0, #2
 8003754:	d9e6      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
 8003758:	e1bf      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	481b      	ldr	r0, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 800375c:	6803      	ldr	r3, [r0, #0]
 800375e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003762:	6961      	ldr	r1, [r4, #20]
 8003764:	22f8      	movs	r2, #248	; 0xf8
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	4313      	orrs	r3, r2
 8003774:	6003      	str	r3, [r0, #0]
 8003776:	e7c1      	b.n	80036fc <HAL_RCC_OscConfig+0x218>
 8003778:	2301      	movs	r3, #1
 800377a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003790:	f7fe feb2 	bl	80024f8 <HAL_GetTick>
 8003794:	4605      	mov	r5, r0
 8003796:	2302      	movs	r3, #2
 8003798:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_OscConfig+0x2e4>)
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	2302      	movs	r3, #2
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2201      	movs	r2, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	4219      	tst	r1, r3
 80037b6:	d0a1      	beq.n	80036fc <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fe fe9e 	bl	80024f8 <HAL_GetTick>
 80037bc:	1b40      	subs	r0, r0, r5
 80037be:	2802      	cmp	r0, #2
 80037c0:	d9e9      	bls.n	8003796 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80037c2:	2003      	movs	r0, #3
 80037c4:	e189      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	10908120 	.word	0x10908120
 80037d0:	2201      	movs	r2, #1
 80037d2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d6:	fab2 f282 	clz	r2, r2
 80037da:	4bc1      	ldr	r3, [pc, #772]	; (8003ae0 <HAL_RCC_OscConfig+0x5fc>)
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7fe fe88 	bl	80024f8 <HAL_GetTick>
 80037e8:	4605      	mov	r5, r0
 80037ea:	2302      	movs	r3, #2
 80037ec:	fa93 f2a3 	rbit	r2, r3
 80037f0:	fa93 f2a3 	rbit	r2, r3
 80037f4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4aba      	ldr	r2, [pc, #744]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80037fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	4219      	tst	r1, r3
 8003810:	d006      	beq.n	8003820 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fe71 	bl	80024f8 <HAL_GetTick>
 8003816:	1b40      	subs	r0, r0, r5
 8003818:	2802      	cmp	r0, #2
 800381a:	d9e6      	bls.n	80037ea <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
 800381e:	e15c      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f013 0f04 	tst.w	r3, #4
 8003826:	f000 80b3 	beq.w	8003990 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4bae      	ldr	r3, [pc, #696]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003832:	d126      	bne.n	8003882 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4bab      	ldr	r3, [pc, #684]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800383c:	61da      	str	r2, [r3, #28]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003848:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4ba7      	ldr	r3, [pc, #668]	; (8003ae8 <HAL_RCC_OscConfig+0x604>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003852:	d018      	beq.n	8003886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	68e3      	ldr	r3, [r4, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d029      	beq.n	80038ae <HAL_RCC_OscConfig+0x3ca>
 800385a:	bb73      	cbnz	r3, 80038ba <HAL_RCC_OscConfig+0x3d6>
 800385c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003860:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d05d      	beq.n	8003936 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fe fe3d 	bl	80024f8 <HAL_GetTick>
 800387e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	e047      	b.n	8003912 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2500      	movs	r5, #0
 8003884:	e7e1      	b.n	800384a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4a98      	ldr	r2, [pc, #608]	; (8003ae8 <HAL_RCC_OscConfig+0x604>)
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003890:	f7fe fe32 	bl	80024f8 <HAL_GetTick>
 8003894:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b94      	ldr	r3, [pc, #592]	; (8003ae8 <HAL_RCC_OscConfig+0x604>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800389e:	d1d9      	bne.n	8003854 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe fe2a 	bl	80024f8 <HAL_GetTick>
 80038a4:	1b80      	subs	r0, r0, r6
 80038a6:	2864      	cmp	r0, #100	; 0x64
 80038a8:	d9f5      	bls.n	8003896 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80038aa:	2003      	movs	r0, #3
 80038ac:	e115      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ae:	4a8d      	ldr	r2, [pc, #564]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80038b0:	6a13      	ldr	r3, [r2, #32]
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	e7dc      	b.n	8003874 <HAL_RCC_OscConfig+0x390>
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3ee>
 80038be:	4b89      	ldr	r3, [pc, #548]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	621a      	str	r2, [r3, #32]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	621a      	str	r2, [r3, #32]
 80038d0:	e7d0      	b.n	8003874 <HAL_RCC_OscConfig+0x390>
 80038d2:	4b84      	ldr	r3, [pc, #528]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	f042 0204 	orr.w	r2, r2, #4
 80038da:	621a      	str	r2, [r3, #32]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	621a      	str	r2, [r3, #32]
 80038e4:	e7c6      	b.n	8003874 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b7f      	ldr	r3, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80038e8:	6a19      	ldr	r1, [r3, #32]
 80038ea:	2302      	movs	r3, #2
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	4219      	tst	r1, r3
 8003900:	d145      	bne.n	800398e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fe fdf9 	bl	80024f8 <HAL_GetTick>
 8003906:	1b80      	subs	r0, r0, r6
 8003908:	f241 3388 	movw	r3, #5000	; 0x1388
 800390c:	4298      	cmp	r0, r3
 800390e:	f200 80df 	bhi.w	8003ad0 <HAL_RCC_OscConfig+0x5ec>
 8003912:	2302      	movs	r3, #2
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d0dd      	beq.n	80038e6 <HAL_RCC_OscConfig+0x402>
 800392a:	2302      	movs	r3, #2
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003932:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003934:	e7d9      	b.n	80038ea <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7fe fddf 	bl	80024f8 <HAL_GetTick>
 800393a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x486>
 800393e:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003940:	6a19      	ldr	r1, [r3, #32]
 8003942:	2302      	movs	r3, #2
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2201      	movs	r2, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	4219      	tst	r1, r3
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fdcd 	bl	80024f8 <HAL_GetTick>
 800395e:	1b80      	subs	r0, r0, r6
 8003960:	f241 3388 	movw	r3, #5000	; 0x1388
 8003964:	4298      	cmp	r0, r3
 8003966:	f200 80b5 	bhi.w	8003ad4 <HAL_RCC_OscConfig+0x5f0>
 800396a:	2302      	movs	r3, #2
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d0dd      	beq.n	800393e <HAL_RCC_OscConfig+0x45a>
 8003982:	2302      	movs	r3, #2
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	4b56      	ldr	r3, [pc, #344]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 800398a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800398c:	e7d9      	b.n	8003942 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800398e:	bbb5      	cbnz	r5, 80039fe <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003990:	69e3      	ldr	r3, [r4, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80a0 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003998:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	f002 020c 	and.w	r2, r2, #12
 80039a0:	2a08      	cmp	r2, #8
 80039a2:	f000 80a3 	beq.w	8003aec <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d02f      	beq.n	8003a0a <HAL_RCC_OscConfig+0x526>
 80039aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ae:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fd98 	bl	80024f8 <HAL_GetTick>
 80039c8:	4604      	mov	r4, r0
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2201      	movs	r2, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	4219      	tst	r1, r3
 80039ee:	d06b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe fd82 	bl	80024f8 <HAL_GetTick>
 80039f4:	1b00      	subs	r0, r0, r4
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d9e7      	bls.n	80039ca <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e06d      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4a39      	ldr	r2, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003a00:	69d3      	ldr	r3, [r2, #28]
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	61d3      	str	r3, [r2, #28]
 8003a08:	e7c2      	b.n	8003990 <HAL_RCC_OscConfig+0x4ac>
 8003a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a24:	f7fe fd68 	bl	80024f8 <HAL_GetTick>
 8003a28:	4605      	mov	r5, r0
 8003a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	4219      	tst	r1, r3
 8003a4e:	d006      	beq.n	8003a5e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe fd52 	bl	80024f8 <HAL_GetTick>
 8003a54:	1b40      	subs	r0, r0, r5
 8003a56:	2802      	cmp	r0, #2
 8003a58:	d9e7      	bls.n	8003a2a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	e03d      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	4921      	ldr	r1, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003a60:	684b      	ldr	r3, [r1, #4]
 8003a62:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003a66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a68:	6a20      	ldr	r0, [r4, #32]
 8003a6a:	4302      	orrs	r2, r0
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a74:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fd35 	bl	80024f8 <HAL_GetTick>
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a94:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_RCC_OscConfig+0x600>)
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2201      	movs	r2, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	4219      	tst	r1, r3
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe fd1f 	bl	80024f8 <HAL_GetTick>
 8003aba:	1b00      	subs	r0, r0, r4
 8003abc:	2802      	cmp	r0, #2
 8003abe:	d9e7      	bls.n	8003a90 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e006      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8003acc:	2001      	movs	r0, #1
 8003ace:	e004      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8003ad8:	2000      	movs	r0, #0
}
 8003ada:	b002      	add	sp, #8
 8003adc:	bd70      	pop	{r4, r5, r6, pc}
 8003ade:	bf00      	nop
 8003ae0:	10908120 	.word	0x10908120
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
 8003aee:	e7f4      	b.n	8003ada <HAL_RCC_OscConfig+0x5f6>

08003af0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af4:	f003 020c 	and.w	r2, r3, #12
 8003af8:	2a08      	cmp	r2, #8
 8003afa:	d124      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003afc:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8003b00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	fab2 f282 	clz	r2, r2
 8003b0c:	fa21 f202 	lsr.w	r2, r1, r2
 8003b10:	490f      	ldr	r1, [pc, #60]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x60>)
 8003b12:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b18:	f002 020f 	and.w	r2, r2, #15
 8003b1c:	210f      	movs	r1, #15
 8003b1e:	fa91 f1a1 	rbit	r1, r1
 8003b22:	fab1 f181 	clz	r1, r1
 8003b26:	40ca      	lsrs	r2, r1
 8003b28:	490a      	ldr	r1, [pc, #40]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x64>)
 8003b2a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b30:	d103      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x68>)
 8003b34:	fb03 f000 	mul.w	r0, r3, r0
 8003b38:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b40:	fb03 f000 	mul.w	r0, r3, r0
 8003b44:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003b46:	4805      	ldr	r0, [pc, #20]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08007a6c 	.word	0x08007a6c
 8003b54:	08007a7c 	.word	0x08007a7c
 8003b58:	003d0900 	.word	0x003d0900
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	d20c      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6c:	4a6d      	ldr	r2, [pc, #436]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f023 0307 	bic.w	r3, r3, #7
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8003b82:	2001      	movs	r0, #1
 8003b84:	4770      	bx	lr
{
 8003b86:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	6803      	ldr	r3, [r0, #0]
 8003b8a:	f013 0f02 	tst.w	r3, #2
 8003b8e:	d006      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4a65      	ldr	r2, [pc, #404]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003b92:	6853      	ldr	r3, [r2, #4]
 8003b94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b98:	6884      	ldr	r4, [r0, #8]
 8003b9a:	4323      	orrs	r3, r4
 8003b9c:	6053      	str	r3, [r2, #4]
 8003b9e:	460d      	mov	r5, r1
 8003ba0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	6803      	ldr	r3, [r0, #0]
 8003ba4:	f013 0f01 	tst.w	r3, #1
 8003ba8:	d07a      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	6843      	ldr	r3, [r0, #4]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d02f      	beq.n	8003c10 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d042      	beq.n	8003c3a <HAL_RCC_ClockConfig+0xda>
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4a5b      	ldr	r2, [pc, #364]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	6810      	ldr	r0, [r2, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	fa92 f2a2 	rbit	r2, r2
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4210      	tst	r0, r2
 8003bd4:	f000 80a4 	beq.w	8003d20 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd8:	4953      	ldr	r1, [pc, #332]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bda:	684a      	ldr	r2, [r1, #4]
 8003bdc:	f022 0203 	bic.w	r2, r2, #3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003be4:	f7fe fc88 	bl	80024f8 <HAL_GetTick>
 8003be8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d039      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d046      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f013 0f0c 	tst.w	r3, #12
 8003bfc:	d050      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfe:	f7fe fc7b 	bl	80024f8 <HAL_GetTick>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c08:	4298      	cmp	r0, r3
 8003c0a:	d9f3      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8003c0c:	2003      	movs	r0, #3
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c14:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c18:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1a:	6810      	ldr	r0, [r2, #0]
 8003c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c20:	fa92 f2a2 	rbit	r2, r2
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	f002 021f 	and.w	r2, r2, #31
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c32:	4210      	tst	r0, r2
 8003c34:	d1d0      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
 8003c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4a39      	ldr	r2, [pc, #228]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	6810      	ldr	r0, [r2, #0]
 8003c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	fab2 f282 	clz	r2, r2
 8003c52:	f002 021f 	and.w	r2, r2, #31
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	4210      	tst	r0, r2
 8003c5e:	d1bb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d017      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fe fc42 	bl	80024f8 <HAL_GetTick>
 8003c74:	1b80      	subs	r0, r0, r6
 8003c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c7a:	4298      	cmp	r0, r3
 8003c7c:	d9f2      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8003c7e:	2003      	movs	r0, #3
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d008      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8e:	f7fe fc33 	bl	80024f8 <HAL_GetTick>
 8003c92:	1b80      	subs	r0, r0, r6
 8003c94:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c98:	4298      	cmp	r0, r3
 8003c9a:	d9f2      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	429d      	cmp	r5, r3
 8003caa:	d20c      	bcs.n	8003cc6 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	432b      	orrs	r3, r5
 8003cb6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8003cc2:	2001      	movs	r0, #1
}
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f013 0f04 	tst.w	r3, #4
 8003ccc:	d006      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	6853      	ldr	r3, [r2, #4]
 8003cd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cd6:	68e1      	ldr	r1, [r4, #12]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	f013 0f08 	tst.w	r3, #8
 8003ce2:	d007      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce4:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	6853      	ldr	r3, [r2, #4]
 8003ce8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003cec:	6921      	ldr	r1, [r4, #16]
 8003cee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cf2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cf4:	f7ff fefc 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d00:	22f0      	movs	r2, #240	; 0xf0
 8003d02:	fa92 f2a2 	rbit	r2, r2
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	40d3      	lsrs	r3, r2
 8003d0c:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_ClockConfig+0x1cc>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	40d8      	lsrs	r0, r3
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_RCC_ClockConfig+0x1d0>)
 8003d14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7fe fbaa 	bl	8002470 <HAL_InitTick>
  return HAL_OK;
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	40022000 	.word	0x40022000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08007af8 	.word	0x08007af8
 8003d30:	2000004c 	.word	0x2000004c

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000004c 	.word	0x2000004c

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d42:	f7ff fff7 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d52:	fa92 f2a2 	rbit	r2, r2
 8003d56:	fab2 f282 	clz	r2, r2
 8003d5a:	40d3      	lsrs	r3, r2
 8003d5c:	4a02      	ldr	r2, [pc, #8]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003d60:	40d8      	lsrs	r0, r3
 8003d62:	bd08      	pop	{r3, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08007b08 	.word	0x08007b08

08003d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d6c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d6e:	f7ff ffe1 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d7a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d7e:	fa92 f2a2 	rbit	r2, r2
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	40d3      	lsrs	r3, r2
 8003d88:	4a02      	ldr	r2, [pc, #8]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003d8c:	40d8      	lsrs	r0, r3
 8003d8e:	bd08      	pop	{r3, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08007b08 	.word	0x08007b08

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9e:	6803      	ldr	r3, [r0, #0]
 8003da0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003da4:	d048      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b93      	ldr	r3, [pc, #588]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003dae:	f040 80d5 	bne.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b90      	ldr	r3, [pc, #576]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dba:	61da      	str	r2, [r3, #28]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003dc6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b8b      	ldr	r3, [pc, #556]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dd0:	f000 80c6 	beq.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd4:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ddc:	d022      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003dde:	6862      	ldr	r2, [r4, #4]
 8003de0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d01d      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de8:	4882      	ldr	r0, [pc, #520]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dea:	6a01      	ldr	r1, [r0, #32]
 8003dec:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8003df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df8:	fab2 f282 	clz	r2, r2
 8003dfc:	4f7f      	ldr	r7, [pc, #508]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfe:	443a      	add	r2, r7
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	f04f 0e01 	mov.w	lr, #1
 8003e06:	f8c2 e000 	str.w	lr, [r2]
 8003e0a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	443b      	add	r3, r7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e1c:	f011 0f01 	tst.w	r1, #1
 8003e20:	f040 80b3 	bne.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e24:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e26:	6a13      	ldr	r3, [r2, #32]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	6861      	ldr	r1, [r4, #4]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	f040 80d5 	bne.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f013 0f01 	tst.w	r3, #1
 8003e3e:	d006      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e40:	4a6c      	ldr	r2, [pc, #432]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	68a1      	ldr	r1, [r4, #8]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f013 0f02 	tst.w	r3, #2
 8003e54:	d006      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e56:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e5e:	68e1      	ldr	r1, [r4, #12]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f013 0f04 	tst.w	r3, #4
 8003e6a:	d006      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6c:	4a61      	ldr	r2, [pc, #388]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e70:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	f013 0f20 	tst.w	r3, #32
 8003e80:	d006      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e82:	4a5c      	ldr	r2, [pc, #368]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	69e1      	ldr	r1, [r4, #28]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e96:	d006      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e98:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e9a:	6853      	ldr	r3, [r2, #4]
 8003e9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ea0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003eac:	d006      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eae:	4a51      	ldr	r2, [pc, #324]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003eb2:	f023 0320 	bic.w	r3, r3, #32
 8003eb6:	6a21      	ldr	r1, [r4, #32]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f013 0f08 	tst.w	r3, #8
 8003ec2:	d006      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ec4:	4a4b      	ldr	r2, [pc, #300]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ec6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ec8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ecc:	6961      	ldr	r1, [r4, #20]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f013 0f10 	tst.w	r3, #16
 8003ed8:	d006      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eda:	4a46      	ldr	r2, [pc, #280]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ede:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003ee2:	69a1      	ldr	r1, [r4, #24]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003eee:	d006      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef0:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ef2:	6853      	ldr	r3, [r2, #4]
 8003ef4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ef8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003efa:	430b      	orrs	r3, r1
 8003efc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f04:	d006      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f06:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f0a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003f0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f10:	430b      	orrs	r3, r1
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f1a:	d006      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f1c:	4a35      	ldr	r2, [pc, #212]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f20:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8003f24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f26:	430b      	orrs	r3, r1
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f30:	d006      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003f46:	d053      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f56:	2000      	movs	r0, #0
}
 8003f58:	b003      	add	sp, #12
 8003f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	e733      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f60:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	6813      	ldr	r3, [r2, #0]
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fac5 	bl	80024f8 <HAL_GetTick>
 8003f6e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f78:	f47f af2c 	bne.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7c:	f7fe fabc 	bl	80024f8 <HAL_GetTick>
 8003f80:	1b80      	subs	r0, r0, r6
 8003f82:	2864      	cmp	r0, #100	; 0x64
 8003f84:	d9f4      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          return HAL_TIMEOUT;
 8003f86:	2003      	movs	r0, #3
 8003f88:	e7e6      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fab5 	bl	80024f8 <HAL_GetTick>
 8003f8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e015      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x226>
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f94:	6a19      	ldr	r1, [r3, #32]
 8003f96:	2302      	movs	r3, #2
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	4219      	tst	r1, r3
 8003fac:	f47f af3a 	bne.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe faa2 	bl	80024f8 <HAL_GetTick>
 8003fb4:	1b80      	subs	r0, r0, r6
 8003fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fba:	4298      	cmp	r0, r3
 8003fbc:	d816      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d0dd      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fe0:	e7d9      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	69d3      	ldr	r3, [r2, #28]
 8003fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	61d3      	str	r3, [r2, #28]
 8003fea:	e725      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8003fec:	2003      	movs	r0, #3
 8003fee:	e7b3      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  return HAL_OK;
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e7b1      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	10908100 	.word	0x10908100

08004000 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	4605      	mov	r5, r0
 8004004:	460f      	mov	r7, r1
 8004006:	4616      	mov	r6, r2
 8004008:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400a:	e039      	b.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800400c:	b12c      	cbz	r4, 800401a <SPI_WaitFlagStateUntilTimeout+0x1a>
 800400e:	f7fe fa73 	bl	80024f8 <HAL_GetTick>
 8004012:	9b06      	ldr	r3, [sp, #24]
 8004014:	1ac0      	subs	r0, r0, r3
 8004016:	4284      	cmp	r4, r0
 8004018:	d832      	bhi.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401a:	682a      	ldr	r2, [r5, #0]
 800401c:	6853      	ldr	r3, [r2, #4]
 800401e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004022:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004024:	686b      	ldr	r3, [r5, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d00b      	beq.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800402c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004032:	d014      	beq.n	800405e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004034:	2301      	movs	r3, #1
 8004036:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800403a:	2300      	movs	r3, #0
 800403c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004040:	2003      	movs	r0, #3
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004044:	68ab      	ldr	r3, [r5, #8]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	d002      	beq.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d1ec      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8004052:	682a      	ldr	r2, [r5, #0]
 8004054:	6813      	ldr	r3, [r2, #0]
 8004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e7e6      	b.n	800402c <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 800405e:	682a      	ldr	r2, [r5, #0]
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	682a      	ldr	r2, [r5, #0]
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e7df      	b.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004074:	2301      	movs	r3, #1
 8004076:	42b3      	cmp	r3, r6
 8004078:	d009      	beq.n	800408e <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 800407a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800407e:	d1c5      	bne.n	800400c <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	ea37 0303 	bics.w	r3, r7, r3
 8004088:	d0f4      	beq.n	8004074 <SPI_WaitFlagStateUntilTimeout+0x74>
 800408a:	2300      	movs	r3, #0
 800408c:	e7f3      	b.n	8004076 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 800408e:	2000      	movs	r0, #0
}
 8004090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004092 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004094:	b083      	sub	sp, #12
 8004096:	4607      	mov	r7, r0
 8004098:	460c      	mov	r4, r1
 800409a:	4615      	mov	r5, r2
 800409c:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800409e:	e002      	b.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80040a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80040a4:	d110      	bne.n	80040c8 <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	4023      	ands	r3, r4
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	d03f      	beq.n	8004130 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040b0:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80040b4:	d1f4      	bne.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0xe>
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	d1f2      	bne.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80040ba:	7b13      	ldrb	r3, [r2, #12]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 80040c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040c6:	e7eb      	b.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80040c8:	b12e      	cbz	r6, 80040d6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80040ca:	f7fe fa15 	bl	80024f8 <HAL_GetTick>
 80040ce:	9b08      	ldr	r3, [sp, #32]
 80040d0:	1ac0      	subs	r0, r0, r3
 80040d2:	4286      	cmp	r6, r0
 80040d4:	d8e7      	bhi.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6853      	ldr	r3, [r2, #4]
 80040da:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80040de:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e6:	d00b      	beq.n	8004100 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d014      	beq.n	800411a <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040fc:	2003      	movs	r0, #3
 80040fe:	e018      	b.n	8004132 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	d002      	beq.n	800410e <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410c:	d1ec      	bne.n	80040e8 <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e7e6      	b.n	80040e8 <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e7df      	b.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8004130:	2000      	movs	r0, #0
}
 8004132:	b003      	add	sp, #12
 8004134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004136 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004136:	b570      	push	{r4, r5, r6, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	4604      	mov	r4, r0
 800413c:	460d      	mov	r5, r1
 800413e:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004140:	9200      	str	r2, [sp, #0]
 8004142:	460b      	mov	r3, r1
 8004144:	2200      	movs	r2, #0
 8004146:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800414a:	f7ff ffa2 	bl	8004092 <SPI_WaitFifoStateUntilTimeout>
 800414e:	b138      	cbz	r0, 8004160 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004150:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004152:	f043 0320 	orr.w	r3, r3, #32
 8004156:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800415a:	4618      	mov	r0, r3
 800415c:	b002      	add	sp, #8
 800415e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004160:	9600      	str	r6, [sp, #0]
 8004162:	462b      	mov	r3, r5
 8004164:	2200      	movs	r2, #0
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	4620      	mov	r0, r4
 800416a:	f7ff ff49 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 800416e:	b128      	cbz	r0, 800417c <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004170:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e7ee      	b.n	800415a <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800417c:	9600      	str	r6, [sp, #0]
 800417e:	462b      	mov	r3, r5
 8004180:	2200      	movs	r2, #0
 8004182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff ff83 	bl	8004092 <SPI_WaitFifoStateUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2800      	cmp	r0, #0
 8004190:	d0e3      	beq.n	800415a <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004192:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004194:	f043 0320 	orr.w	r3, r3, #32
 8004198:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e7dd      	b.n	800415a <SPI_EndRxTxTransaction+0x24>

0800419e <SPI_EndRxTransaction>:
{
 800419e:	b570      	push	{r4, r5, r6, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	4604      	mov	r4, r0
 80041a4:	460d      	mov	r5, r1
 80041a6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a8:	6843      	ldr	r3, [r0, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ae:	d010      	beq.n	80041d2 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b0:	9600      	str	r6, [sp, #0]
 80041b2:	462b      	mov	r3, r5
 80041b4:	2200      	movs	r2, #0
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff ff21 	bl	8004000 <SPI_WaitFlagStateUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	b1a0      	cbz	r0, 80041ec <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	b002      	add	sp, #8
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d2:	6883      	ldr	r3, [r0, #8]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	d002      	beq.n	80041e0 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d1e7      	bne.n	80041b0 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e7e1      	b.n	80041b0 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ec:	6862      	ldr	r2, [r4, #4]
 80041ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80041f2:	d1eb      	bne.n	80041cc <SPI_EndRxTransaction+0x2e>
 80041f4:	68a2      	ldr	r2, [r4, #8]
 80041f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80041fa:	d002      	beq.n	8004202 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004200:	d1e4      	bne.n	80041cc <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004202:	9600      	str	r6, [sp, #0]
 8004204:	462b      	mov	r3, r5
 8004206:	2200      	movs	r2, #0
 8004208:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800420c:	4620      	mov	r0, r4
 800420e:	f7ff ff40 	bl	8004092 <SPI_WaitFifoStateUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	d0d9      	beq.n	80041cc <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004218:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800421a:	f043 0320 	orr.w	r3, r3, #32
 800421e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e7d3      	b.n	80041cc <SPI_EndRxTransaction+0x2e>

08004224 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004224:	2800      	cmp	r0, #0
 8004226:	d058      	beq.n	80042da <HAL_SPI_Init+0xb6>
{
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004230:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004234:	2b00      	cmp	r3, #0
 8004236:	d045      	beq.n	80042c4 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004238:	2302      	movs	r3, #2
 800423a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004246:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004248:	68e3      	ldr	r3, [r4, #12]
 800424a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800424e:	d93e      	bls.n	80042ce <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004250:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004252:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004256:	d004      	beq.n	8004262 <HAL_SPI_Init+0x3e>
 8004258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800425c:	d001      	beq.n	8004262 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425e:	2200      	movs	r2, #0
 8004260:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004262:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004264:	b922      	cbnz	r2, 8004270 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800426a:	d933      	bls.n	80042d4 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800426c:	2302      	movs	r3, #2
 800426e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	68a0      	ldr	r0, [r4, #8]
 8004276:	4303      	orrs	r3, r0
 8004278:	6920      	ldr	r0, [r4, #16]
 800427a:	4303      	orrs	r3, r0
 800427c:	6960      	ldr	r0, [r4, #20]
 800427e:	4303      	orrs	r3, r0
 8004280:	69a0      	ldr	r0, [r4, #24]
 8004282:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004286:	4303      	orrs	r3, r0
 8004288:	69e0      	ldr	r0, [r4, #28]
 800428a:	4303      	orrs	r3, r0
 800428c:	6a20      	ldr	r0, [r4, #32]
 800428e:	4303      	orrs	r3, r0
 8004290:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004292:	4303      	orrs	r3, r0
 8004294:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	8b63      	ldrh	r3, [r4, #26]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80042a0:	4303      	orrs	r3, r0
 80042a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80042a4:	4303      	orrs	r3, r0
 80042a6:	68e0      	ldr	r0, [r4, #12]
 80042a8:	4303      	orrs	r3, r0
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	69d3      	ldr	r3, [r2, #28]
 80042b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b8:	2000      	movs	r0, #0
 80042ba:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	2301      	movs	r3, #1
 80042be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80042c2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80042c4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80042c8:	f002 fb10 	bl	80068ec <HAL_SPI_MspInit>
 80042cc:	e7b4      	b.n	8004238 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042d2:	e7be      	b.n	8004252 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80042d4:	2301      	movs	r3, #1
 80042d6:	6323      	str	r3, [r4, #48]	; 0x30
 80042d8:	e7ca      	b.n	8004270 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	4770      	bx	lr

080042de <HAL_SPI_DeInit>:
  if (hspi == NULL)
 80042de:	b190      	cbz	r0, 8004306 <HAL_SPI_DeInit+0x28>
{
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 80042e4:	2302      	movs	r3, #2
 80042e6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80042ea:	6802      	ldr	r2, [r0, #0]
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80042f4:	f002 fb20 	bl	8006938 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042f8:	2000      	movs	r0, #0
 80042fa:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80042fc:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004300:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 8004304:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004306:	2001      	movs	r0, #1
 8004308:	4770      	bx	lr

0800430a <HAL_SPI_Transmit>:
{
 800430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004312:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d103      	bne.n	8004322 <HAL_SPI_Transmit+0x18>
 800431a:	2002      	movs	r0, #2
}
 800431c:	b002      	add	sp, #8
 800431e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004322:	4604      	mov	r4, r0
 8004324:	460d      	mov	r5, r1
 8004326:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004328:	2301      	movs	r3, #1
 800432a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800432e:	f7fe f8e3 	bl	80024f8 <HAL_GetTick>
 8004332:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004334:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d007      	beq.n	800434e <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 800433e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004340:	2301      	movs	r3, #1
 8004342:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004346:	2300      	movs	r3, #0
 8004348:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800434c:	e7e6      	b.n	800431c <HAL_SPI_Transmit+0x12>
  if ((pData == NULL) || (Size == 0U))
 800434e:	2d00      	cmp	r5, #0
 8004350:	f000 80b3 	beq.w	80044ba <HAL_SPI_Transmit+0x1b0>
 8004354:	f1b8 0f00 	cmp.w	r8, #0
 8004358:	f000 80b1 	beq.w	80044be <HAL_SPI_Transmit+0x1b4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800435c:	2303      	movs	r3, #3
 800435e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004366:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004368:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800436c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004370:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004372:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004376:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800437a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800437c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004384:	d01c      	beq.n	80043c0 <HAL_SPI_Transmit+0xb6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800438e:	d103      	bne.n	8004398 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800439e:	d931      	bls.n	8004404 <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	b11b      	cbz	r3, 80043ac <HAL_SPI_Transmit+0xa2>
 80043a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d119      	bne.n	80043e0 <HAL_SPI_Transmit+0xd6>
      hspi->Instance->DR = *((uint16_t *)pData);
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	f835 2b02 	ldrh.w	r2, [r5], #2
 80043b2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80043b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80043be:	e00f      	b.n	80043e0 <HAL_SPI_Transmit+0xd6>
    SPI_1LINE_TX(hspi);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e7dc      	b.n	8004386 <HAL_SPI_Transmit+0x7c>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	d078      	beq.n	80044c2 <HAL_SPI_Transmit+0x1b8>
 80043d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80043d4:	d004      	beq.n	80043e0 <HAL_SPI_Transmit+0xd6>
 80043d6:	f7fe f88f 	bl	80024f8 <HAL_GetTick>
 80043da:	1bc0      	subs	r0, r0, r7
 80043dc:	4286      	cmp	r6, r0
 80043de:	d972      	bls.n	80044c6 <HAL_SPI_Transmit+0x1bc>
    while (hspi->TxXferCount > 0U)
 80043e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d053      	beq.n	8004490 <HAL_SPI_Transmit+0x186>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	f012 0f02 	tst.w	r2, #2
 80043f0:	d0ec      	beq.n	80043cc <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)pData);
 80043f2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80043f6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80043f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004402:	e7ed      	b.n	80043e0 <HAL_SPI_Transmit+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	b11b      	cbz	r3, 8004410 <HAL_SPI_Transmit+0x106>
 8004408:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d12a      	bne.n	8004466 <HAL_SPI_Transmit+0x15c>
      if (hspi->TxXferCount > 1U)
 8004410:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d909      	bls.n	800442c <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)pData);
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800441e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004420:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b02      	subs	r3, #2
 8004426:	b29b      	uxth	r3, r3
 8004428:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800442a:	e01c      	b.n	8004466 <HAL_SPI_Transmit+0x15c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	782a      	ldrb	r2, [r5, #0]
 8004430:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004432:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29b      	uxth	r3, r3
 800443a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800443c:	3501      	adds	r5, #1
 800443e:	e012      	b.n	8004466 <HAL_SPI_Transmit+0x15c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004440:	782a      	ldrb	r2, [r5, #0]
 8004442:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8004444:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800444e:	3501      	adds	r5, #1
 8004450:	e009      	b.n	8004466 <HAL_SPI_Transmit+0x15c>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004452:	2e00      	cmp	r6, #0
 8004454:	d039      	beq.n	80044ca <HAL_SPI_Transmit+0x1c0>
 8004456:	f1b6 3fff 	cmp.w	r6, #4294967295
 800445a:	d004      	beq.n	8004466 <HAL_SPI_Transmit+0x15c>
 800445c:	f7fe f84c 	bl	80024f8 <HAL_GetTick>
 8004460:	1bc0      	subs	r0, r0, r7
 8004462:	4286      	cmp	r6, r0
 8004464:	d933      	bls.n	80044ce <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8004466:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	b18b      	cbz	r3, 8004490 <HAL_SPI_Transmit+0x186>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	f012 0f02 	tst.w	r2, #2
 8004474:	d0ed      	beq.n	8004452 <HAL_SPI_Transmit+0x148>
        if (hspi->TxXferCount > 1U)
 8004476:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004478:	b292      	uxth	r2, r2
 800447a:	2a01      	cmp	r2, #1
 800447c:	d9e0      	bls.n	8004440 <HAL_SPI_Transmit+0x136>
          hspi->Instance->DR = *((uint16_t *)pData);
 800447e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004482:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8004484:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b02      	subs	r3, #2
 800448a:	b29b      	uxth	r3, r3
 800448c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800448e:	e7ea      	b.n	8004466 <HAL_SPI_Transmit+0x15c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004490:	463a      	mov	r2, r7
 8004492:	4631      	mov	r1, r6
 8004494:	4620      	mov	r0, r4
 8004496:	f7ff fe4e 	bl	8004136 <SPI_EndRxTxTransaction>
 800449a:	b108      	cbz	r0, 80044a0 <HAL_SPI_Transmit+0x196>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800449c:	2320      	movs	r3, #32
 800449e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	b933      	cbnz	r3, 80044b2 <HAL_SPI_Transmit+0x1a8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044b4:	b96b      	cbnz	r3, 80044d2 <HAL_SPI_Transmit+0x1c8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044b6:	2000      	movs	r0, #0
 80044b8:	e742      	b.n	8004340 <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 80044ba:	2001      	movs	r0, #1
 80044bc:	e740      	b.n	8004340 <HAL_SPI_Transmit+0x36>
 80044be:	2001      	movs	r0, #1
 80044c0:	e73e      	b.n	8004340 <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 80044c2:	2003      	movs	r0, #3
 80044c4:	e73c      	b.n	8004340 <HAL_SPI_Transmit+0x36>
 80044c6:	2003      	movs	r0, #3
 80044c8:	e73a      	b.n	8004340 <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e738      	b.n	8004340 <HAL_SPI_Transmit+0x36>
 80044ce:	2003      	movs	r0, #3
 80044d0:	e736      	b.n	8004340 <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
 80044d4:	e734      	b.n	8004340 <HAL_SPI_Transmit+0x36>

080044d6 <HAL_SPI_TransmitReceive>:
{
 80044d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044da:	4699      	mov	r9, r3
 80044dc:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80044de:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x16>
 80044e6:	2002      	movs	r0, #2
}
 80044e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ec:	4604      	mov	r4, r0
 80044ee:	460f      	mov	r7, r1
 80044f0:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 80044f2:	2301      	movs	r3, #1
 80044f4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80044f8:	f7fd fffe 	bl	80024f8 <HAL_GetTick>
 80044fc:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80044fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004502:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 8004504:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004506:	2b01      	cmp	r3, #1
 8004508:	d013      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x5c>
 800450a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800450e:	d008      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004510:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004512:	2301      	movs	r3, #1
 8004514:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004518:	2300      	movs	r3, #0
 800451a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004522:	68a2      	ldr	r2, [r4, #8]
 8004524:	2a00      	cmp	r2, #0
 8004526:	f040 812c 	bne.w	8004782 <HAL_SPI_TransmitReceive+0x2ac>
 800452a:	2b04      	cmp	r3, #4
 800452c:	d001      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 800452e:	2002      	movs	r0, #2
 8004530:	e7ef      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004532:	2f00      	cmp	r7, #0
 8004534:	f000 8127 	beq.w	8004786 <HAL_SPI_TransmitReceive+0x2b0>
 8004538:	2e00      	cmp	r6, #0
 800453a:	f000 8126 	beq.w	800478a <HAL_SPI_TransmitReceive+0x2b4>
 800453e:	f1b9 0f00 	cmp.w	r9, #0
 8004542:	f000 8124 	beq.w	800478e <HAL_SPI_TransmitReceive+0x2b8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004546:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b04      	cmp	r3, #4
 800454e:	d002      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004550:	2305      	movs	r3, #5
 8004552:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004556:	2300      	movs	r3, #0
 8004558:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800455a:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800455c:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004560:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004564:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004566:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800456a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800456e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004570:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004578:	d804      	bhi.n	8004584 <HAL_SPI_TransmitReceive+0xae>
 800457a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d923      	bls.n	80045cc <HAL_SPI_TransmitReceive+0xf6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	6853      	ldr	r3, [r2, #4]
 8004588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800458c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004596:	d103      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a0:	68e3      	ldr	r3, [r4, #12]
 80045a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a6:	d956      	bls.n	8004656 <HAL_SPI_TransmitReceive+0x180>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	b11b      	cbz	r3, 80045b4 <HAL_SPI_TransmitReceive+0xde>
 80045ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f837 2b02 	ldrh.w	r2, [r7], #2
 80045ba:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80045bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80045c6:	f04f 0901 	mov.w	r9, #1
 80045ca:	e024      	b.n	8004616 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	6853      	ldr	r3, [r2, #4]
 80045d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045d4:	6053      	str	r3, [r2, #4]
 80045d6:	e7da      	b.n	800458e <HAL_SPI_TransmitReceive+0xb8>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80045d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80045dc:	b29b      	uxth	r3, r3
 80045de:	b183      	cbz	r3, 8004602 <HAL_SPI_TransmitReceive+0x12c>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	f012 0f01 	tst.w	r2, #1
 80045e8:	d00b      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80045f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80045fe:	f04f 0901 	mov.w	r9, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004602:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004606:	d006      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x140>
 8004608:	f7fd ff76 	bl	80024f8 <HAL_GetTick>
 800460c:	eba0 0008 	sub.w	r0, r0, r8
 8004610:	4285      	cmp	r5, r0
 8004612:	f240 80be 	bls.w	8004792 <HAL_SPI_TransmitReceive+0x2bc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	b92b      	cbnz	r3, 8004628 <HAL_SPI_TransmitReceive+0x152>
 800461c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a1 	beq.w	800476a <HAL_SPI_TransmitReceive+0x294>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004628:	f1b9 0f00 	cmp.w	r9, #0
 800462c:	d0d4      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x102>
 800462e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0d0      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x102>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	f012 0f02 	tst.w	r2, #2
 800463e:	d0cb      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004640:	f837 2b02 	ldrh.w	r2, [r7], #2
 8004644:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8004646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004650:	f04f 0900 	mov.w	r9, #0
 8004654:	e7c0      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004656:	6863      	ldr	r3, [r4, #4]
 8004658:	b11b      	cbz	r3, 8004662 <HAL_SPI_TransmitReceive+0x18c>
 800465a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10c      	bne.n	800467c <HAL_SPI_TransmitReceive+0x1a6>
      if (hspi->TxXferCount > 1U)
 8004662:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d90b      	bls.n	8004682 <HAL_SPI_TransmitReceive+0x1ac>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f837 2b02 	ldrh.w	r2, [r7], #2
 8004670:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004672:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	b29b      	uxth	r3, r3
 800467a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800467c:	f04f 0901 	mov.w	r9, #1
 8004680:	e03b      	b.n	80046fa <HAL_SPI_TransmitReceive+0x224>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	783a      	ldrb	r2, [r7, #0]
 8004686:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004688:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004692:	3701      	adds	r7, #1
 8004694:	e7f2      	b.n	800467c <HAL_SPI_TransmitReceive+0x1a6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004696:	783a      	ldrb	r2, [r7, #0]
 8004698:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800469a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80046a4:	3701      	adds	r7, #1
        txallowed = 0U;
 80046a6:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80046aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	b1d3      	cbz	r3, 80046e8 <HAL_SPI_TransmitReceive+0x212>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	f012 0f01 	tst.w	r2, #1
 80046ba:	d015      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
        if (hspi->RxXferCount > 1U)
 80046bc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80046c0:	b292      	uxth	r2, r2
 80046c2:	2a01      	cmp	r2, #1
 80046c4:	d944      	bls.n	8004750 <HAL_SPI_TransmitReceive+0x27a>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f826 3b02 	strh.w	r3, [r6], #2
          hspi->RxXferCount -= 2U;
 80046cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b02      	subs	r3, #2
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d92d      	bls.n	8004740 <HAL_SPI_TransmitReceive+0x26a>
        txallowed = 1U;
 80046e4:	f04f 0901 	mov.w	r9, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80046e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80046ec:	d005      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x224>
 80046ee:	f7fd ff03 	bl	80024f8 <HAL_GetTick>
 80046f2:	eba0 0008 	sub.w	r0, r0, r8
 80046f6:	4285      	cmp	r5, r0
 80046f8:	d94d      	bls.n	8004796 <HAL_SPI_TransmitReceive+0x2c0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b923      	cbnz	r3, 800470a <HAL_SPI_TransmitReceive+0x234>
 8004700:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02f      	beq.n	800476a <HAL_SPI_TransmitReceive+0x294>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800470a:	f1b9 0f00 	cmp.w	r9, #0
 800470e:	d0cc      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x1d4>
 8004710:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0c8      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x1d4>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	f012 0f02 	tst.w	r2, #2
 8004720:	d0c3      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x1d4>
        if (hspi->TxXferCount > 1U)
 8004722:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004724:	b292      	uxth	r2, r2
 8004726:	2a01      	cmp	r2, #1
 8004728:	d9b5      	bls.n	8004696 <HAL_SPI_TransmitReceive+0x1c0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800472a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800472e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8004730:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b02      	subs	r3, #2
 8004736:	b29b      	uxth	r3, r3
 8004738:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800473a:	f04f 0900 	mov.w	r9, #0
 800473e:	e7b4      	b.n	80046aa <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	6853      	ldr	r3, [r2, #4]
 8004744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004748:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800474a:	f04f 0901 	mov.w	r9, #1
 800474e:	e7cb      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004750:	7b1b      	ldrb	r3, [r3, #12]
 8004752:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8004754:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004762:	3601      	adds	r6, #1
        txallowed = 1U;
 8004764:	f04f 0901 	mov.w	r9, #1
 8004768:	e7be      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476a:	4642      	mov	r2, r8
 800476c:	4629      	mov	r1, r5
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff fce1 	bl	8004136 <SPI_EndRxTxTransaction>
 8004774:	b108      	cbz	r0, 800477a <HAL_SPI_TransmitReceive+0x2a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004776:	2320      	movs	r3, #32
 8004778:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800477a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800477c:	b96b      	cbnz	r3, 800479a <HAL_SPI_TransmitReceive+0x2c4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477e:	2000      	movs	r0, #0
 8004780:	e6c7      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8004782:	2002      	movs	r0, #2
 8004784:	e6c5      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8004786:	2001      	movs	r0, #1
 8004788:	e6c3      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
 800478a:	2001      	movs	r0, #1
 800478c:	e6c1      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
 800478e:	2001      	movs	r0, #1
 8004790:	e6bf      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8004792:	2003      	movs	r0, #3
 8004794:	e6bd      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e6bb      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800479a:	2001      	movs	r0, #1
 800479c:	e6b9      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3c>

0800479e <HAL_SPI_Receive>:
{
 800479e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	4604      	mov	r4, r0
 80047a6:	460e      	mov	r6, r1
 80047a8:	4690      	mov	r8, r2
 80047aa:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ac:	6843      	ldr	r3, [r0, #4]
 80047ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b2:	d007      	beq.n	80047c4 <HAL_SPI_Receive+0x26>
  __HAL_LOCK(hspi);
 80047b4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10f      	bne.n	80047dc <HAL_SPI_Receive+0x3e>
 80047bc:	2002      	movs	r0, #2
}
 80047be:	b002      	add	sp, #8
 80047c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047c4:	6883      	ldr	r3, [r0, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f4      	bne.n	80047b4 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047ca:	2304      	movs	r3, #4
 80047cc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047d0:	9500      	str	r5, [sp, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	460a      	mov	r2, r1
 80047d6:	f7ff fe7e 	bl	80044d6 <HAL_SPI_TransmitReceive>
 80047da:	e7f0      	b.n	80047be <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 80047dc:	2301      	movs	r3, #1
 80047de:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80047e2:	f7fd fe89 	bl	80024f8 <HAL_GetTick>
 80047e6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047e8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d007      	beq.n	8004802 <HAL_SPI_Receive+0x64>
    errorcode = HAL_BUSY;
 80047f2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047fa:	2300      	movs	r3, #0
 80047fc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8004800:	e7dd      	b.n	80047be <HAL_SPI_Receive+0x20>
  if ((pData == NULL) || (Size == 0U))
 8004802:	2e00      	cmp	r6, #0
 8004804:	d07f      	beq.n	8004906 <HAL_SPI_Receive+0x168>
 8004806:	f1b8 0f00 	cmp.w	r8, #0
 800480a:	d07e      	beq.n	800490a <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800480c:	2304      	movs	r3, #4
 800480e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004816:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004818:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800481c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004820:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004822:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004824:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004826:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004828:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004830:	d916      	bls.n	8004860 <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	6853      	ldr	r3, [r2, #4]
 8004836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483a:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d013      	beq.n	800486c <HAL_SPI_Receive+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	f012 0f40 	tst.w	r2, #64	; 0x40
 800484c:	d103      	bne.n	8004856 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800485c:	d916      	bls.n	800488c <HAL_SPI_Receive+0xee>
 800485e:	e032      	b.n	80048c6 <HAL_SPI_Receive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	6853      	ldr	r3, [r2, #4]
 8004864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004868:	6053      	str	r3, [r2, #4]
 800486a:	e7e7      	b.n	800483c <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e7e5      	b.n	8004844 <HAL_SPI_Receive+0xa6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004878:	2d00      	cmp	r5, #0
 800487a:	d048      	beq.n	800490e <HAL_SPI_Receive+0x170>
 800487c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004880:	d004      	beq.n	800488c <HAL_SPI_Receive+0xee>
 8004882:	f7fd fe39 	bl	80024f8 <HAL_GetTick>
 8004886:	1bc0      	subs	r0, r0, r7
 8004888:	4285      	cmp	r5, r0
 800488a:	d942      	bls.n	8004912 <HAL_SPI_Receive+0x174>
    while (hspi->RxXferCount > 0U)
 800488c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004890:	b29b      	uxth	r3, r3
 8004892:	b363      	cbz	r3, 80048ee <HAL_SPI_Receive+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	f012 0f01 	tst.w	r2, #1
 800489c:	d0ec      	beq.n	8004878 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800489e:	7b1b      	ldrb	r3, [r3, #12]
 80048a0:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 80048a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80048b2:	e7eb      	b.n	800488c <HAL_SPI_Receive+0xee>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80048b4:	b37d      	cbz	r5, 8004916 <HAL_SPI_Receive+0x178>
 80048b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048ba:	d004      	beq.n	80048c6 <HAL_SPI_Receive+0x128>
 80048bc:	f7fd fe1c 	bl	80024f8 <HAL_GetTick>
 80048c0:	1bc0      	subs	r0, r0, r7
 80048c2:	4285      	cmp	r5, r0
 80048c4:	d929      	bls.n	800491a <HAL_SPI_Receive+0x17c>
    while (hspi->RxXferCount > 0U)
 80048c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b17b      	cbz	r3, 80048ee <HAL_SPI_Receive+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	f012 0f01 	tst.w	r2, #1
 80048d6:	d0ed      	beq.n	80048b4 <HAL_SPI_Receive+0x116>
        *((uint16_t *)pData) = hspi->Instance->DR;
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80048de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80048ec:	e7eb      	b.n	80048c6 <HAL_SPI_Receive+0x128>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ee:	463a      	mov	r2, r7
 80048f0:	4629      	mov	r1, r5
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7ff fc53 	bl	800419e <SPI_EndRxTransaction>
 80048f8:	b108      	cbz	r0, 80048fe <HAL_SPI_Receive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fa:	2320      	movs	r3, #32
 80048fc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004900:	b96b      	cbnz	r3, 800491e <HAL_SPI_Receive+0x180>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004902:	2000      	movs	r0, #0
 8004904:	e776      	b.n	80047f4 <HAL_SPI_Receive+0x56>
    errorcode = HAL_ERROR;
 8004906:	2001      	movs	r0, #1
 8004908:	e774      	b.n	80047f4 <HAL_SPI_Receive+0x56>
 800490a:	2001      	movs	r0, #1
 800490c:	e772      	b.n	80047f4 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 800490e:	2003      	movs	r0, #3
 8004910:	e770      	b.n	80047f4 <HAL_SPI_Receive+0x56>
 8004912:	2003      	movs	r0, #3
 8004914:	e76e      	b.n	80047f4 <HAL_SPI_Receive+0x56>
          errorcode = HAL_TIMEOUT;
 8004916:	2003      	movs	r0, #3
 8004918:	e76c      	b.n	80047f4 <HAL_SPI_Receive+0x56>
 800491a:	2003      	movs	r0, #3
 800491c:	e76a      	b.n	80047f4 <HAL_SPI_Receive+0x56>
    errorcode = HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e768      	b.n	80047f4 <HAL_SPI_Receive+0x56>

08004922 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004922:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004924:	6a04      	ldr	r4, [r0, #32]
 8004926:	f024 0410 	bic.w	r4, r4, #16
 800492a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800492e:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004930:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004934:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004938:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	b29b      	uxth	r3, r3
 8004940:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004942:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004946:	0109      	lsls	r1, r1, #4
 8004948:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800494c:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004950:	6205      	str	r5, [r0, #32]
}
 8004952:	bc30      	pop	{r4, r5}
 8004954:	4770      	bx	lr

08004956 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004956:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004958:	6a04      	ldr	r4, [r0, #32]
 800495a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800495e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004960:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8004962:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004964:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8004968:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800496a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	b2db      	uxtb	r3, r3
 8004972:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004974:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004978:	0209      	lsls	r1, r1, #8
 800497a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800497e:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004980:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8004982:	6205      	str	r5, [r0, #32]
}
 8004984:	bc30      	pop	{r4, r5}
 8004986:	4770      	bx	lr

08004988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004988:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800498a:	6a04      	ldr	r4, [r0, #32]
 800498c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8004990:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004992:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8004994:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004996:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800499a:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800499e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049a2:	031b      	lsls	r3, r3, #12
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a8:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049ac:	0309      	lsls	r1, r1, #12
 80049ae:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80049b2:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049b4:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80049b6:	6205      	str	r5, [r0, #32]
}
 80049b8:	bc30      	pop	{r4, r5}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_ReadCapturedValue>:
{
 80049bc:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80049be:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80049c2:	2a01      	cmp	r2, #1
 80049c4:	d01e      	beq.n	8004a04 <HAL_TIM_ReadCapturedValue+0x48>
 80049c6:	2201      	movs	r2, #1
 80049c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 80049cc:	290c      	cmp	r1, #12
 80049ce:	d817      	bhi.n	8004a00 <HAL_TIM_ReadCapturedValue+0x44>
 80049d0:	e8df f001 	tbb	[pc, r1]
 80049d4:	16161607 	.word	0x16161607
 80049d8:	1616160d 	.word	0x1616160d
 80049dc:	16161610 	.word	0x16161610
 80049e0:	13          	.byte	0x13
 80049e1:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 80049e2:	6802      	ldr	r2, [r0, #0]
 80049e4:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 80049ec:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 80049ee:	6802      	ldr	r2, [r0, #0]
 80049f0:	6b90      	ldr	r0, [r2, #56]	; 0x38
      break;
 80049f2:	e7f8      	b.n	80049e6 <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR3;
 80049f4:	6802      	ldr	r2, [r0, #0]
 80049f6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
      break;
 80049f8:	e7f5      	b.n	80049e6 <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR4;
 80049fa:	6802      	ldr	r2, [r0, #0]
 80049fc:	6c10      	ldr	r0, [r2, #64]	; 0x40
      break;
 80049fe:	e7f2      	b.n	80049e6 <HAL_TIM_ReadCapturedValue+0x2a>
  uint32_t tmpreg = 0U;
 8004a00:	2000      	movs	r0, #0
 8004a02:	e7f0      	b.n	80049e6 <HAL_TIM_ReadCapturedValue+0x2a>
  __HAL_LOCK(htim);
 8004a04:	2002      	movs	r0, #2
}
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_PeriodElapsedCallback>:
{
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_OC_DelayElapsedCallback>:
{
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_TriggerCallback>:
{
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_IRQHandler>:
{
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a14:	6803      	ldr	r3, [r0, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	f012 0f02 	tst.w	r2, #2
 8004a1c:	d011      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	f012 0f02 	tst.w	r2, #2
 8004a24:	d00d      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a26:	f06f 0202 	mvn.w	r2, #2
 8004a2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a30:	6803      	ldr	r3, [r0, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f013 0f03 	tst.w	r3, #3
 8004a38:	d079      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	f001 f89b 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	f012 0f04 	tst.w	r2, #4
 8004a4a:	d012      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	f012 0f04 	tst.w	r2, #4
 8004a52:	d00e      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a66:	d068      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f001 f883 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	f012 0f08 	tst.w	r2, #8
 8004a7a:	d012      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	f012 0f08 	tst.w	r2, #8
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a84:	f06f 0208 	mvn.w	r2, #8
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f013 0f03 	tst.w	r3, #3
 8004a96:	d057      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f001 f86b 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	f012 0f10 	tst.w	r2, #16
 8004aaa:	d012      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	f012 0f10 	tst.w	r2, #16
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ab4:	f06f 0210 	mvn.w	r2, #16
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aba:	2308      	movs	r3, #8
 8004abc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ac6:	d046      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f001 f853 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	f012 0f01 	tst.w	r2, #1
 8004ada:	d003      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	f012 0f01 	tst.w	r2, #1
 8004ae2:	d13f      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004af4:	d13d      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004afe:	d003      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b06:	d13b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b18:	d139      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	f012 0f20 	tst.w	r2, #32
 8004b22:	d003      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	f012 0f20 	tst.w	r2, #32
 8004b2a:	d137      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x18c>
 8004b2c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	f7ff ff6c 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7ff ff6a 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
 8004b38:	e781      	b.n	8004a3e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f7ff ff65 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff ff63 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
 8004b46:	e792      	b.n	8004a6e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff ff5e 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff ff5c 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
 8004b54:	e7a3      	b.n	8004a9e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff ff57 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff ff55 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
 8004b62:	e7b4      	b.n	8004ace <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b64:	f06f 0201 	mvn.w	r2, #1
 8004b68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7ff ff4c 	bl	8004a08 <HAL_TIM_PeriodElapsedCallback>
 8004b70:	e7b8      	b.n	8004ae4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 f99a 	bl	8004eb2 <HAL_TIMEx_BreakCallback>
 8004b7e:	e7ba      	b.n	8004af6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 f994 	bl	8004eb4 <HAL_TIMEx_Break2Callback>
 8004b8c:	e7bc      	b.n	8004b08 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7ff ff3a 	bl	8004a0e <HAL_TIM_TriggerCallback>
 8004b9a:	e7be      	b.n	8004b1a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b9c:	f06f 0220 	mvn.w	r2, #32
 8004ba0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 f984 	bl	8004eb0 <HAL_TIMEx_CommutationCallback>
}
 8004ba8:	e7c0      	b.n	8004b2c <HAL_TIM_IRQHandler+0x11c>
	...

08004bac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004bac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <TIM_Base_SetConfig+0xb4>)
 8004bb0:	4290      	cmp	r0, r2
 8004bb2:	d00e      	beq.n	8004bd2 <TIM_Base_SetConfig+0x26>
 8004bb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0x26>
 8004bba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004bbe:	4290      	cmp	r0, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0x26>
 8004bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bc6:	4290      	cmp	r0, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0x26>
 8004bca:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004bce:	4290      	cmp	r0, r2
 8004bd0:	d103      	bne.n	8004bda <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bd6:	684a      	ldr	r2, [r1, #4]
 8004bd8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <TIM_Base_SetConfig+0xb4>)
 8004bdc:	4290      	cmp	r0, r2
 8004bde:	d01a      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004be0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004be6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004bea:	4290      	cmp	r0, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf2:	4290      	cmp	r0, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004bf6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004bfe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004c02:	4290      	cmp	r0, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0a:	4290      	cmp	r0, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0x6a>
 8004c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c12:	4290      	cmp	r0, r2
 8004c14:	d103      	bne.n	8004c1e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	68ca      	ldr	r2, [r1, #12]
 8004c1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c22:	694a      	ldr	r2, [r1, #20]
 8004c24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	688b      	ldr	r3, [r1, #8]
 8004c2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004c2c:	680b      	ldr	r3, [r1, #0]
 8004c2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <TIM_Base_SetConfig+0xb4>)
 8004c32:	4298      	cmp	r0, r3
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0xaa>
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0xaa>
 8004c3e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004c42:	4298      	cmp	r0, r3
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0xaa>
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0xaa>
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	4298      	cmp	r0, r3
 8004c54:	d101      	bne.n	8004c5a <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	6143      	str	r3, [r0, #20]
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00

08004c64 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8004c64:	b1a8      	cbz	r0, 8004c92 <HAL_TIM_IC_Init+0x2e>
{
 8004c66:	b510      	push	{r4, lr}
 8004c68:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c6e:	b15b      	cbz	r3, 8004c88 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY; 
 8004c70:	2302      	movs	r3, #2
 8004c72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004c76:	1d21      	adds	r1, r4, #4
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	f7ff ff97 	bl	8004bac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c84:	2000      	movs	r0, #0
 8004c86:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004c8c:	f001 fe6a 	bl	8006964 <HAL_TIM_IC_MspInit>
 8004c90:	e7ee      	b.n	8004c70 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004c92:	2001      	movs	r0, #1
 8004c94:	4770      	bx	lr
	...

08004c98 <TIM_TI1_SetConfig>:
{
 8004c98:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	6a04      	ldr	r4, [r0, #32]
 8004c9c:	f024 0401 	bic.w	r4, r4, #1
 8004ca0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004ca4:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ca6:	4e1c      	ldr	r6, [pc, #112]	; (8004d18 <TIM_TI1_SetConfig+0x80>)
 8004ca8:	42b0      	cmp	r0, r6
 8004caa:	d026      	beq.n	8004cfa <TIM_TI1_SetConfig+0x62>
 8004cac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cb0:	d025      	beq.n	8004cfe <TIM_TI1_SetConfig+0x66>
 8004cb2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004cb6:	42b0      	cmp	r0, r6
 8004cb8:	d023      	beq.n	8004d02 <TIM_TI1_SetConfig+0x6a>
 8004cba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cbe:	42b0      	cmp	r0, r6
 8004cc0:	d021      	beq.n	8004d06 <TIM_TI1_SetConfig+0x6e>
 8004cc2:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8004cc6:	42b0      	cmp	r0, r6
 8004cc8:	d01f      	beq.n	8004d0a <TIM_TI1_SetConfig+0x72>
 8004cca:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004cce:	42b0      	cmp	r0, r6
 8004cd0:	d011      	beq.n	8004cf6 <TIM_TI1_SetConfig+0x5e>
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	b9de      	cbnz	r6, 8004d0e <TIM_TI1_SetConfig+0x76>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cd6:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce4:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ce8:	f001 010a 	and.w	r1, r1, #10
 8004cec:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8004cee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	6201      	str	r1, [r0, #32]
}
 8004cf2:	bc70      	pop	{r4, r5, r6}
 8004cf4:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cf6:	2601      	movs	r6, #1
 8004cf8:	e7ec      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
 8004cfa:	2601      	movs	r6, #1
 8004cfc:	e7ea      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
 8004cfe:	2601      	movs	r6, #1
 8004d00:	e7e8      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
 8004d02:	2601      	movs	r6, #1
 8004d04:	e7e6      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
 8004d06:	2601      	movs	r6, #1
 8004d08:	e7e4      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
 8004d0a:	2601      	movs	r6, #1
 8004d0c:	e7e2      	b.n	8004cd4 <TIM_TI1_SetConfig+0x3c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d0e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004d12:	4322      	orrs	r2, r4
 8004d14:	e7e1      	b.n	8004cda <TIM_TI1_SetConfig+0x42>
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00

08004d1c <HAL_TIM_IC_ConfigChannel>:
{
 8004d1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004d1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d058      	beq.n	8004dd8 <HAL_TIM_IC_ConfigChannel+0xbc>
 8004d26:	460d      	mov	r5, r1
 8004d28:	4604      	mov	r4, r0
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	2302      	movs	r3, #2
 8004d32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8004d36:	b1da      	cbz	r2, 8004d70 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8004d38:	2a04      	cmp	r2, #4
 8004d3a:	d02a      	beq.n	8004d92 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8004d3c:	2a08      	cmp	r2, #8
 8004d3e:	d03a      	beq.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 8004d40:	68cb      	ldr	r3, [r1, #12]
 8004d42:	684a      	ldr	r2, [r1, #4]
 8004d44:	6809      	ldr	r1, [r1, #0]
 8004d46:	6800      	ldr	r0, [r0, #0]
 8004d48:	f7ff fe1e 	bl	8004988 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	69d3      	ldr	r3, [r2, #28]
 8004d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d54:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	69d3      	ldr	r3, [r2, #28]
 8004d5a:	68a9      	ldr	r1, [r5, #8]
 8004d5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d60:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK; 
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004d70:	68cb      	ldr	r3, [r1, #12]
 8004d72:	684a      	ldr	r2, [r1, #4]
 8004d74:	6809      	ldr	r1, [r1, #0]
 8004d76:	6800      	ldr	r0, [r0, #0]
 8004d78:	f7ff ff8e 	bl	8004c98 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	6993      	ldr	r3, [r2, #24]
 8004d80:	f023 030c 	bic.w	r3, r3, #12
 8004d84:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	6993      	ldr	r3, [r2, #24]
 8004d8a:	68a9      	ldr	r1, [r5, #8]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6193      	str	r3, [r2, #24]
 8004d90:	e7e7      	b.n	8004d62 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 8004d92:	68cb      	ldr	r3, [r1, #12]
 8004d94:	684a      	ldr	r2, [r1, #4]
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	6800      	ldr	r0, [r0, #0]
 8004d9a:	f7ff fdc2 	bl	8004922 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	6993      	ldr	r3, [r2, #24]
 8004da2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004da6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	6993      	ldr	r3, [r2, #24]
 8004dac:	68a9      	ldr	r1, [r5, #8]
 8004dae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004db2:	6193      	str	r3, [r2, #24]
 8004db4:	e7d5      	b.n	8004d62 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 8004db6:	68cb      	ldr	r3, [r1, #12]
 8004db8:	684a      	ldr	r2, [r1, #4]
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f7ff fdca 	bl	8004956 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	69d3      	ldr	r3, [r2, #28]
 8004dc6:	f023 030c 	bic.w	r3, r3, #12
 8004dca:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	69d3      	ldr	r3, [r2, #28]
 8004dd0:	68a9      	ldr	r1, [r5, #8]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	61d3      	str	r3, [r2, #28]
 8004dd6:	e7c4      	b.n	8004d62 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8004dd8:	2002      	movs	r0, #2
}
 8004dda:	bd38      	pop	{r3, r4, r5, pc}

08004ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ddc:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8004dde:	2301      	movs	r3, #1
 8004de0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de4:	6a03      	ldr	r3, [r0, #32]
 8004de6:	ea23 0304 	bic.w	r3, r3, r4
 8004dea:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004dec:	6a03      	ldr	r3, [r0, #32]
 8004dee:	408a      	lsls	r2, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	6203      	str	r3, [r0, #32]
}
 8004df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_IC_Start_IT>:
{
 8004dfa:	b510      	push	{r4, lr}
 8004dfc:	4604      	mov	r4, r0
  switch (Channel)
 8004dfe:	290c      	cmp	r1, #12
 8004e00:	d80d      	bhi.n	8004e1e <HAL_TIM_IC_Start_IT+0x24>
 8004e02:	e8df f001 	tbb	[pc, r1]
 8004e06:	0c07      	.short	0x0c07
 8004e08:	0c170c0c 	.word	0x0c170c0c
 8004e0c:	0c1d0c0c 	.word	0x0c1d0c0c
 8004e10:	0c0c      	.short	0x0c0c
 8004e12:	23          	.byte	0x23
 8004e13:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e14:	6802      	ldr	r2, [r0, #0]
 8004e16:	68d3      	ldr	r3, [r2, #12]
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	f7ff ffdb 	bl	8004ddc <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]
} 
 8004e30:	2000      	movs	r0, #0
 8004e32:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e34:	6802      	ldr	r2, [r0, #0]
 8004e36:	68d3      	ldr	r3, [r2, #12]
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	60d3      	str	r3, [r2, #12]
    break;
 8004e3e:	e7ee      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e40:	6802      	ldr	r2, [r0, #0]
 8004e42:	68d3      	ldr	r3, [r2, #12]
 8004e44:	f043 0308 	orr.w	r3, r3, #8
 8004e48:	60d3      	str	r3, [r2, #12]
    break;
 8004e4a:	e7e8      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e4c:	6802      	ldr	r2, [r0, #0]
 8004e4e:	68d3      	ldr	r3, [r2, #12]
 8004e50:	f043 0310 	orr.w	r3, r3, #16
 8004e54:	60d3      	str	r3, [r2, #12]
    break;
 8004e56:	e7e2      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0x24>

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004e58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d023      	beq.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
{
 8004e60:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004e62:	2301      	movs	r3, #1
 8004e64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	6804      	ldr	r4, [r0, #0]
 8004e6a:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e6e:	4d0f      	ldr	r5, [pc, #60]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004e70:	42ac      	cmp	r4, r5
 8004e72:	d014      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004e74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e78:	42ac      	cmp	r4, r5
 8004e7a:	d010      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e80:	680d      	ldr	r5, [r1, #0]
 8004e82:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e88:	6889      	ldr	r1, [r1, #8]
 8004e8a:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8c:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e8e:	6803      	ldr	r3, [r0, #0]
 8004e90:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8004e92:	2300      	movs	r3, #0
 8004e94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8004e98:	4618      	mov	r0, r3
} 
 8004e9a:	bc30      	pop	{r4, r5}
 8004e9c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea2:	684d      	ldr	r5, [r1, #4]
 8004ea4:	432b      	orrs	r3, r5
 8004ea6:	e7e9      	b.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8004ea8:	2002      	movs	r0, #2
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00

08004eb0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004eb4:	4770      	bx	lr

08004eb6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	6802      	ldr	r2, [r0, #0]
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebe:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	6802      	ldr	r2, [r0, #0]
 8004ec2:	6893      	ldr	r3, [r2, #8]
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_UART_TxCpltCallback>:
{
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_RxCpltCallback>:
{
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_UART_ErrorCallback>:
{
 8004ed6:	4770      	bx	lr

08004ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004eda:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ee2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8004ee6:	f7ff fff6 	bl	8004ed6 <HAL_UART_ErrorCallback>
 8004eea:	bd08      	pop	{r3, pc}

08004eec <UART_SetConfig>:
{
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef0:	6883      	ldr	r3, [r0, #8]
 8004ef2:	6902      	ldr	r2, [r0, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	6942      	ldr	r2, [r0, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	69c2      	ldr	r2, [r0, #28]
 8004efc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004efe:	6801      	ldr	r1, [r0, #0]
 8004f00:	680a      	ldr	r2, [r1, #0]
 8004f02:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8004f06:	f022 020c 	bic.w	r2, r2, #12
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0e:	6802      	ldr	r2, [r0, #0]
 8004f10:	6853      	ldr	r3, [r2, #4]
 8004f12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f16:	68c1      	ldr	r1, [r0, #12]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004f1c:	6983      	ldr	r3, [r0, #24]
 8004f1e:	6a02      	ldr	r2, [r0, #32]
 8004f20:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004f22:	6801      	ldr	r1, [r0, #0]
 8004f24:	688a      	ldr	r2, [r1, #8]
 8004f26:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2e:	6805      	ldr	r5, [r0, #0]
 8004f30:	4b90      	ldr	r3, [pc, #576]	; (8005174 <UART_SetConfig+0x288>)
 8004f32:	429d      	cmp	r5, r3
 8004f34:	d01f      	beq.n	8004f76 <UART_SetConfig+0x8a>
 8004f36:	4b90      	ldr	r3, [pc, #576]	; (8005178 <UART_SetConfig+0x28c>)
 8004f38:	429d      	cmp	r5, r3
 8004f3a:	d02f      	beq.n	8004f9c <UART_SetConfig+0xb0>
 8004f3c:	4b8f      	ldr	r3, [pc, #572]	; (800517c <UART_SetConfig+0x290>)
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	d046      	beq.n	8004fd0 <UART_SetConfig+0xe4>
 8004f42:	4b8f      	ldr	r3, [pc, #572]	; (8005180 <UART_SetConfig+0x294>)
 8004f44:	429d      	cmp	r5, r3
 8004f46:	d05d      	beq.n	8005004 <UART_SetConfig+0x118>
 8004f48:	4b8e      	ldr	r3, [pc, #568]	; (8005184 <UART_SetConfig+0x298>)
 8004f4a:	429d      	cmp	r5, r3
 8004f4c:	d074      	beq.n	8005038 <UART_SetConfig+0x14c>
 8004f4e:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f50:	69e2      	ldr	r2, [r4, #28]
 8004f52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004f56:	f000 808b 	beq.w	8005070 <UART_SetConfig+0x184>
    switch (clocksource)
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	f200 8107 	bhi.w	800516e <UART_SetConfig+0x282>
 8004f60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f64:	00d900ce 	.word	0x00d900ce
 8004f68:	010500e4 	.word	0x010500e4
 8004f6c:	010500f0 	.word	0x010500f0
 8004f70:	01050105 	.word	0x01050105
 8004f74:	00fb      	.short	0x00fb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d809      	bhi.n	8004f98 <UART_SetConfig+0xac>
 8004f84:	e8df f003 	tbb	[pc, r3]
 8004f88:	72060402 	.word	0x72060402
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e7df      	b.n	8004f50 <UART_SetConfig+0x64>
 8004f90:	2304      	movs	r3, #4
 8004f92:	e7dd      	b.n	8004f50 <UART_SetConfig+0x64>
 8004f94:	2308      	movs	r3, #8
 8004f96:	e7db      	b.n	8004f50 <UART_SetConfig+0x64>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	e7d9      	b.n	8004f50 <UART_SetConfig+0x64>
 8004f9c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d00b      	beq.n	8004fc4 <UART_SetConfig+0xd8>
 8004fac:	d907      	bls.n	8004fbe <UART_SetConfig+0xd2>
 8004fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb2:	d009      	beq.n	8004fc8 <UART_SetConfig+0xdc>
 8004fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb8:	d108      	bne.n	8004fcc <UART_SetConfig+0xe0>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e7c8      	b.n	8004f50 <UART_SetConfig+0x64>
 8004fbe:	b92b      	cbnz	r3, 8004fcc <UART_SetConfig+0xe0>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e7c5      	b.n	8004f50 <UART_SetConfig+0x64>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	e7c3      	b.n	8004f50 <UART_SetConfig+0x64>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	e7c1      	b.n	8004f50 <UART_SetConfig+0x64>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	e7bf      	b.n	8004f50 <UART_SetConfig+0x64>
 8004fd0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fde:	d00b      	beq.n	8004ff8 <UART_SetConfig+0x10c>
 8004fe0:	d907      	bls.n	8004ff2 <UART_SetConfig+0x106>
 8004fe2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fe6:	d009      	beq.n	8004ffc <UART_SetConfig+0x110>
 8004fe8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fec:	d108      	bne.n	8005000 <UART_SetConfig+0x114>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e7ae      	b.n	8004f50 <UART_SetConfig+0x64>
 8004ff2:	b92b      	cbnz	r3, 8005000 <UART_SetConfig+0x114>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e7ab      	b.n	8004f50 <UART_SetConfig+0x64>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	e7a9      	b.n	8004f50 <UART_SetConfig+0x64>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	e7a7      	b.n	8004f50 <UART_SetConfig+0x64>
 8005000:	2310      	movs	r3, #16
 8005002:	e7a5      	b.n	8004f50 <UART_SetConfig+0x64>
 8005004:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d00b      	beq.n	800502c <UART_SetConfig+0x140>
 8005014:	d907      	bls.n	8005026 <UART_SetConfig+0x13a>
 8005016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501a:	d009      	beq.n	8005030 <UART_SetConfig+0x144>
 800501c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005020:	d108      	bne.n	8005034 <UART_SetConfig+0x148>
 8005022:	2302      	movs	r3, #2
 8005024:	e794      	b.n	8004f50 <UART_SetConfig+0x64>
 8005026:	b92b      	cbnz	r3, 8005034 <UART_SetConfig+0x148>
 8005028:	2300      	movs	r3, #0
 800502a:	e791      	b.n	8004f50 <UART_SetConfig+0x64>
 800502c:	2304      	movs	r3, #4
 800502e:	e78f      	b.n	8004f50 <UART_SetConfig+0x64>
 8005030:	2308      	movs	r3, #8
 8005032:	e78d      	b.n	8004f50 <UART_SetConfig+0x64>
 8005034:	2310      	movs	r3, #16
 8005036:	e78b      	b.n	8004f50 <UART_SetConfig+0x64>
 8005038:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005046:	d00b      	beq.n	8005060 <UART_SetConfig+0x174>
 8005048:	d907      	bls.n	800505a <UART_SetConfig+0x16e>
 800504a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800504e:	d009      	beq.n	8005064 <UART_SetConfig+0x178>
 8005050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005054:	d108      	bne.n	8005068 <UART_SetConfig+0x17c>
 8005056:	2302      	movs	r3, #2
 8005058:	e77a      	b.n	8004f50 <UART_SetConfig+0x64>
 800505a:	b92b      	cbnz	r3, 8005068 <UART_SetConfig+0x17c>
 800505c:	2300      	movs	r3, #0
 800505e:	e777      	b.n	8004f50 <UART_SetConfig+0x64>
 8005060:	2304      	movs	r3, #4
 8005062:	e775      	b.n	8004f50 <UART_SetConfig+0x64>
 8005064:	2308      	movs	r3, #8
 8005066:	e773      	b.n	8004f50 <UART_SetConfig+0x64>
 8005068:	2310      	movs	r3, #16
 800506a:	e771      	b.n	8004f50 <UART_SetConfig+0x64>
 800506c:	2302      	movs	r3, #2
 800506e:	e76f      	b.n	8004f50 <UART_SetConfig+0x64>
    switch (clocksource)
 8005070:	2b08      	cmp	r3, #8
 8005072:	d842      	bhi.n	80050fa <UART_SetConfig+0x20e>
 8005074:	e8df f003 	tbb	[pc, r3]
 8005078:	41221705 	.word	0x41221705
 800507c:	4141412d 	.word	0x4141412d
 8005080:	38          	.byte	0x38
 8005081:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005082:	f7fe fe5d 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	0853      	lsrs	r3, r2, #1
 800508a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800508e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005092:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005094:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8005096:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800509a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800509e:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	60d3      	str	r3, [r2, #12]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80050a6:	f7fe fe61 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	0853      	lsrs	r3, r2, #1
 80050ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80050b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80050b8:	2000      	movs	r0, #0
        break;
 80050ba:	e7ec      	b.n	8005096 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80050bc:	6862      	ldr	r2, [r4, #4]
 80050be:	0853      	lsrs	r3, r2, #1
 80050c0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80050c4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80050c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050cc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ce:	2000      	movs	r0, #0
        break;
 80050d0:	e7e1      	b.n	8005096 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80050d2:	f7fe fd0d 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	0853      	lsrs	r3, r2, #1
 80050da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80050de:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80050e4:	2000      	movs	r0, #0
        break;
 80050e6:	e7d6      	b.n	8005096 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	0853      	lsrs	r3, r2, #1
 80050ec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80050f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f6:	2000      	movs	r0, #0
        break;
 80050f8:	e7cd      	b.n	8005096 <UART_SetConfig+0x1aa>
        ret = HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e7ca      	b.n	8005096 <UART_SetConfig+0x1aa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005100:	f7fe fe1e 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800510a:	fbb0 f0f3 	udiv	r0, r0, r3
 800510e:	b280      	uxth	r0, r0
 8005110:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005112:	2000      	movs	r0, #0
        break;
 8005114:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005116:	f7fe fe29 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005120:	fbb0 f0f3 	udiv	r0, r0, r3
 8005124:	b280      	uxth	r0, r0
 8005126:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005128:	2000      	movs	r0, #0
        break;
 800512a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800512c:	6862      	ldr	r2, [r4, #4]
 800512e:	0853      	lsrs	r3, r2, #1
 8005130:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005134:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005138:	fbb3 f3f2 	udiv	r3, r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005140:	2000      	movs	r0, #0
        break;
 8005142:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005144:	f7fe fcd4 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800514e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005152:	b280      	uxth	r0, r0
 8005154:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005156:	2000      	movs	r0, #0
        break;
 8005158:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800515a:	6862      	ldr	r2, [r4, #4]
 800515c:	0853      	lsrs	r3, r2, #1
 800515e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005162:	fbb3 f3f2 	udiv	r3, r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800516a:	2000      	movs	r0, #0
        break;
 800516c:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 800516e:	2001      	movs	r0, #1
}
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	40013800 	.word	0x40013800
 8005178:	40004400 	.word	0x40004400
 800517c:	40004800 	.word	0x40004800
 8005180:	40004c00 	.word	0x40004c00
 8005184:	40005000 	.word	0x40005000

08005188 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005188:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800518a:	f013 0f01 	tst.w	r3, #1
 800518e:	d006      	beq.n	800519e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005190:	6802      	ldr	r2, [r0, #0]
 8005192:	6853      	ldr	r3, [r2, #4]
 8005194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005198:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800519a:	430b      	orrs	r3, r1
 800519c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051a0:	f013 0f02 	tst.w	r3, #2
 80051a4:	d006      	beq.n	80051b4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a6:	6802      	ldr	r2, [r0, #0]
 80051a8:	6853      	ldr	r3, [r2, #4]
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051b6:	f013 0f04 	tst.w	r3, #4
 80051ba:	d006      	beq.n	80051ca <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051bc:	6802      	ldr	r2, [r0, #0]
 80051be:	6853      	ldr	r3, [r2, #4]
 80051c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051c6:	430b      	orrs	r3, r1
 80051c8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051cc:	f013 0f08 	tst.w	r3, #8
 80051d0:	d006      	beq.n	80051e0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d2:	6802      	ldr	r2, [r0, #0]
 80051d4:	6853      	ldr	r3, [r2, #4]
 80051d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80051dc:	430b      	orrs	r3, r1
 80051de:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051e2:	f013 0f10 	tst.w	r3, #16
 80051e6:	d006      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e8:	6802      	ldr	r2, [r0, #0]
 80051ea:	6893      	ldr	r3, [r2, #8]
 80051ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051f8:	f013 0f20 	tst.w	r3, #32
 80051fc:	d006      	beq.n	800520c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	6802      	ldr	r2, [r0, #0]
 8005200:	6893      	ldr	r3, [r2, #8]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005208:	430b      	orrs	r3, r1
 800520a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800520c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800520e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	6853      	ldr	r3, [r2, #4]
 8005218:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800521c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800521e:	430b      	orrs	r3, r1
 8005220:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005222:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005228:	d00b      	beq.n	8005242 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800522c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005230:	d006      	beq.n	8005240 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005232:	6802      	ldr	r2, [r0, #0]
 8005234:	6853      	ldr	r3, [r2, #4]
 8005236:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800523a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800523c:	430b      	orrs	r3, r1
 800523e:	6053      	str	r3, [r2, #4]
 8005240:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005242:	6802      	ldr	r2, [r0, #0]
 8005244:	6853      	ldr	r3, [r2, #4]
 8005246:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800524a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800524c:	430b      	orrs	r3, r1
 800524e:	6053      	str	r3, [r2, #4]
 8005250:	e7eb      	b.n	800522a <UART_AdvFeatureConfig+0xa2>

08005252 <UART_WaitOnFlagUntilTimeout>:
{
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	4605      	mov	r5, r0
 8005258:	460f      	mov	r7, r1
 800525a:	4616      	mov	r6, r2
 800525c:	4698      	mov	r8, r3
 800525e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	ea37 0303 	bics.w	r3, r7, r3
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	42b3      	cmp	r3, r6
 8005270:	d11e      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8005272:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005276:	d0f3      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005278:	b12c      	cbz	r4, 8005286 <UART_WaitOnFlagUntilTimeout+0x34>
 800527a:	f7fd f93d 	bl	80024f8 <HAL_GetTick>
 800527e:	eba0 0008 	sub.w	r0, r0, r8
 8005282:	4284      	cmp	r4, r0
 8005284:	d2ec      	bcs.n	8005260 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005286:	682a      	ldr	r2, [r5, #0]
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800528e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	682a      	ldr	r2, [r5, #0]
 8005292:	6893      	ldr	r3, [r2, #8]
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800529a:	2320      	movs	r3, #32
 800529c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80052a0:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80052a4:	2300      	movs	r3, #0
 80052a6:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80052aa:	2003      	movs	r0, #3
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80052b0:	2000      	movs	r0, #0
}
 80052b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052b6 <HAL_UART_Transmit>:
{
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80052be:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d004      	beq.n	80052d2 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	b002      	add	sp, #8
 80052ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d2:	4604      	mov	r4, r0
 80052d4:	460d      	mov	r5, r1
 80052d6:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80052d8:	2900      	cmp	r1, #0
 80052da:	d04e      	beq.n	800537a <HAL_UART_Transmit+0xc4>
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d04e      	beq.n	800537e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80052e0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UART_Transmit+0x36>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e7ee      	b.n	80052ca <HAL_UART_Transmit+0x14>
 80052ec:	2301      	movs	r3, #1
 80052ee:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f6:	2321      	movs	r3, #33	; 0x21
 80052f8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80052fc:	f7fd f8fc 	bl	80024f8 <HAL_GetTick>
 8005300:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005302:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8005306:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800530a:	e003      	b.n	8005314 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	782a      	ldrb	r2, [r5, #0]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
 8005312:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8005314:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005318:	b29b      	uxth	r3, r3
 800531a:	b1e3      	cbz	r3, 8005356 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 800531c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532a:	9600      	str	r6, [sp, #0]
 800532c:	463b      	mov	r3, r7
 800532e:	2200      	movs	r2, #0
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff ff8d 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 8005338:	bb18      	cbnz	r0, 8005382 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d1e4      	bne.n	800530c <HAL_UART_Transmit+0x56>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e1      	bne.n	800530c <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8005354:	e7de      	b.n	8005314 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	9600      	str	r6, [sp, #0]
 8005358:	463b      	mov	r3, r7
 800535a:	2200      	movs	r2, #0
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ff77 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	b108      	cbz	r0, 800536c <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e7ae      	b.n	80052ca <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800536c:	2220      	movs	r2, #32
 800536e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8005372:	2200      	movs	r2, #0
 8005374:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8005378:	e7a7      	b.n	80052ca <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e7a5      	b.n	80052ca <HAL_UART_Transmit+0x14>
 800537e:	2301      	movs	r3, #1
 8005380:	e7a3      	b.n	80052ca <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e7a1      	b.n	80052ca <HAL_UART_Transmit+0x14>

08005386 <UART_CheckIdleState>:
{
 8005386:	b530      	push	{r4, r5, lr}
 8005388:	b083      	sub	sp, #12
 800538a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	2300      	movs	r3, #0
 800538e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8005390:	f7fd f8b2 	bl	80024f8 <HAL_GetTick>
 8005394:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f013 0f08 	tst.w	r3, #8
 800539e:	d10e      	bne.n	80053be <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f013 0f04 	tst.w	r3, #4
 80053a8:	d117      	bne.n	80053da <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 80053aa:	2320      	movs	r3, #32
 80053ac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80053ba:	b003      	add	sp, #12
 80053bc:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	4603      	mov	r3, r0
 80053c6:	2200      	movs	r2, #0
 80053c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7ff ff40 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0e4      	beq.n	80053a0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80053d6:	2003      	movs	r0, #3
 80053d8:	e7ef      	b.n	80053ba <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	462b      	mov	r3, r5
 80053e2:	2200      	movs	r2, #0
 80053e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff ff32 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d0db      	beq.n	80053aa <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80053f2:	2003      	movs	r0, #3
 80053f4:	e7e1      	b.n	80053ba <UART_CheckIdleState+0x34>

080053f6 <HAL_UART_Init>:
  if(huart == NULL)
 80053f6:	b378      	cbz	r0, 8005458 <HAL_UART_Init+0x62>
{
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80053fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005400:	b30b      	cbz	r3, 8005446 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005402:	2324      	movs	r3, #36	; 0x24
 8005404:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff fd6a 	bl	8004eec <UART_SetConfig>
 8005418:	2801      	cmp	r0, #1
 800541a:	d01f      	beq.n	800545c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800541e:	b9bb      	cbnz	r3, 8005450 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	6853      	ldr	r3, [r2, #4]
 8005424:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005428:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	6893      	ldr	r3, [r2, #8]
 800542e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005432:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff ffa1 	bl	8005386 <UART_CheckIdleState>
 8005444:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005446:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800544a:	f001 fb05 	bl	8006a58 <HAL_UART_MspInit>
 800544e:	e7d8      	b.n	8005402 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fe99 	bl	8005188 <UART_AdvFeatureConfig>
 8005456:	e7e3      	b.n	8005420 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005458:	2001      	movs	r0, #1
 800545a:	4770      	bx	lr
}
 800545c:	bd10      	pop	{r4, pc}

0800545e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800545e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b21      	cmp	r3, #33	; 0x21
 8005466:	d001      	beq.n	800546c <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8005468:	2002      	movs	r0, #2
  }
}
 800546a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800546c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8005470:	b29b      	uxth	r3, r3
 8005472:	b193      	cbz	r3, 800549a <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	6883      	ldr	r3, [r0, #8]
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547a:	d01a      	beq.n	80054b2 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800547c:	6802      	ldr	r2, [r0, #0]
 800547e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	64c1      	str	r1, [r0, #76]	; 0x4c
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005488:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29b      	uxth	r3, r3
 8005492:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8005496:	2000      	movs	r0, #0
 8005498:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800549a:	6802      	ldr	r2, [r0, #0]
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054a4:	6802      	ldr	r2, [r0, #0]
 80054a6:	6813      	ldr	r3, [r2, #0]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ac:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80054ae:	2000      	movs	r0, #0
 80054b0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b2:	6903      	ldr	r3, [r0, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e1      	bne.n	800547c <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80054b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80054ba:	6802      	ldr	r2, [r0, #0]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80054c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80054c6:	3302      	adds	r3, #2
 80054c8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80054ca:	e7dd      	b.n	8005488 <UART_Transmit_IT+0x2a>

080054cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054cc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ce:	6801      	ldr	r1, [r0, #0]
 80054d0:	680b      	ldr	r3, [r1, #0]
 80054d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d6:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d8:	2320      	movs	r3, #32
 80054da:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80054de:	f7ff fcf8 	bl	8004ed2 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80054e2:	2000      	movs	r0, #0
 80054e4:	bd08      	pop	{r3, pc}

080054e6 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80054e6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b22      	cmp	r3, #34	; 0x22
 80054f2:	d006      	beq.n	8005502 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f4:	6802      	ldr	r2, [r0, #0]
 80054f6:	6993      	ldr	r3, [r2, #24]
 80054f8:	f043 0308 	orr.w	r3, r3, #8
 80054fc:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80054fe:	2002      	movs	r0, #2
 8005500:	4770      	bx	lr
{
 8005502:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005504:	6803      	ldr	r3, [r0, #0]
 8005506:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005508:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550a:	6881      	ldr	r1, [r0, #8]
 800550c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005510:	d00f      	beq.n	8005532 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005512:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005514:	1c4c      	adds	r4, r1, #1
 8005516:	6544      	str	r4, [r0, #84]	; 0x54
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	401a      	ands	r2, r3
 800551c:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800551e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29b      	uxth	r3, r3
 8005528:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800552c:	b15b      	cbz	r3, 8005546 <UART_Receive_IT+0x60>
    return HAL_OK;
 800552e:	2000      	movs	r0, #0
  }
}
 8005530:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005532:	6901      	ldr	r1, [r0, #16]
 8005534:	2900      	cmp	r1, #0
 8005536:	d1ec      	bne.n	8005512 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8005538:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 800553a:	401a      	ands	r2, r3
 800553c:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 800553e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005540:	3302      	adds	r3, #2
 8005542:	6543      	str	r3, [r0, #84]	; 0x54
 8005544:	e7eb      	b.n	800551e <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005546:	6802      	ldr	r2, [r0, #0]
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	6802      	ldr	r2, [r0, #0]
 8005552:	6893      	ldr	r3, [r2, #8]
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800555a:	2320      	movs	r3, #32
 800555c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8005560:	f7ff fcb8 	bl	8004ed4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005564:	2000      	movs	r0, #0
 8005566:	bd10      	pop	{r4, pc}

08005568 <HAL_UART_IRQHandler>:
{
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800556c:	6802      	ldr	r2, [r0, #0]
 800556e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005570:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8005572:	f013 050f 	ands.w	r5, r3, #15
 8005576:	d105      	bne.n	8005584 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005578:	f013 0f20 	tst.w	r3, #32
 800557c:	d002      	beq.n	8005584 <HAL_UART_IRQHandler+0x1c>
 800557e:	f011 0f20 	tst.w	r1, #32
 8005582:	d160      	bne.n	8005646 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8005584:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8005586:	2d00      	cmp	r5, #0
 8005588:	d072      	beq.n	8005670 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800558a:	f010 0501 	ands.w	r5, r0, #1
 800558e:	d102      	bne.n	8005596 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005590:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005594:	d06c      	beq.n	8005670 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005596:	f013 0f01 	tst.w	r3, #1
 800559a:	d007      	beq.n	80055ac <HAL_UART_IRQHandler+0x44>
 800559c:	f411 7f80 	tst.w	r1, #256	; 0x100
 80055a0:	d004      	beq.n	80055ac <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80055a2:	2001      	movs	r0, #1
 80055a4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80055a8:	4302      	orrs	r2, r0
 80055aa:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ac:	f013 0f02 	tst.w	r3, #2
 80055b0:	d007      	beq.n	80055c2 <HAL_UART_IRQHandler+0x5a>
 80055b2:	b135      	cbz	r5, 80055c2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	2002      	movs	r0, #2
 80055b8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ba:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80055bc:	f042 0204 	orr.w	r2, r2, #4
 80055c0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c2:	f013 0f04 	tst.w	r3, #4
 80055c6:	d007      	beq.n	80055d8 <HAL_UART_IRQHandler+0x70>
 80055c8:	b135      	cbz	r5, 80055d8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	2004      	movs	r0, #4
 80055ce:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80055d2:	f042 0202 	orr.w	r2, r2, #2
 80055d6:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80055d8:	f013 0f08 	tst.w	r3, #8
 80055dc:	d009      	beq.n	80055f2 <HAL_UART_IRQHandler+0x8a>
 80055de:	f011 0f20 	tst.w	r1, #32
 80055e2:	d100      	bne.n	80055e6 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e4:	b12d      	cbz	r5, 80055f2 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	2008      	movs	r0, #8
 80055ea:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80055ee:	4302      	orrs	r2, r0
 80055f0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055f2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	d04d      	beq.n	8005694 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f8:	f013 0f20 	tst.w	r3, #32
 80055fc:	d002      	beq.n	8005604 <HAL_UART_IRQHandler+0x9c>
 80055fe:	f011 0f20 	tst.w	r1, #32
 8005602:	d123      	bne.n	800564c <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005604:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005606:	f013 0f08 	tst.w	r3, #8
 800560a:	d104      	bne.n	8005616 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005610:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005614:	d026      	beq.n	8005664 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8005616:	4620      	mov	r0, r4
 8005618:	f7ff fc4d 	bl	8004eb6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005624:	d01a      	beq.n	800565c <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800562e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005630:	b183      	cbz	r3, 8005654 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005632:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <HAL_UART_IRQHandler+0x158>)
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005636:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005638:	f7fd fa3e 	bl	8002ab8 <HAL_DMA_Abort_IT>
 800563c:	b350      	cbz	r0, 8005694 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800563e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005640:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005642:	4798      	blx	r3
 8005644:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8005646:	f7ff ff4e 	bl	80054e6 <UART_Receive_IT>
      return;
 800564a:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff ff4a 	bl	80054e6 <UART_Receive_IT>
 8005652:	e7d7      	b.n	8005604 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fc3e 	bl	8004ed6 <HAL_UART_ErrorCallback>
 800565a:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800565c:	4620      	mov	r0, r4
 800565e:	f7ff fc3a 	bl	8004ed6 <HAL_UART_ErrorCallback>
 8005662:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8005664:	4620      	mov	r0, r4
 8005666:	f7ff fc36 	bl	8004ed6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800566e:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005670:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005674:	d002      	beq.n	800567c <HAL_UART_IRQHandler+0x114>
 8005676:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800567a:	d10c      	bne.n	8005696 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800567c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005680:	d002      	beq.n	8005688 <HAL_UART_IRQHandler+0x120>
 8005682:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005686:	d112      	bne.n	80056ae <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005688:	f013 0f40 	tst.w	r3, #64	; 0x40
 800568c:	d002      	beq.n	8005694 <HAL_UART_IRQHandler+0x12c>
 800568e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005692:	d110      	bne.n	80056b6 <HAL_UART_IRQHandler+0x14e>
 8005694:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800569a:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800569c:	2320      	movs	r3, #32
 800569e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80056a2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 f80c 	bl	80056c4 <HAL_UARTEx_WakeupCallback>
    return;
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff fed5 	bl	800545e <UART_Transmit_IT>
    return;
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff ff08 	bl	80054cc <UART_EndTransmit_IT>
    return;
 80056bc:	e7ea      	b.n	8005694 <HAL_UART_IRQHandler+0x12c>
 80056be:	bf00      	nop
 80056c0:	08004ed9 	.word	0x08004ed9

080056c4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056c4:	4770      	bx	lr
	...

080056c8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80056c8:	4603      	mov	r3, r0
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80056ca:	7a02      	ldrb	r2, [r0, #8]
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	f000 80ab 	beq.w	8005828 <LL_EXTI_Init+0x160>
{
 80056d2:	b410      	push	{r4}
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80056d4:	6802      	ldr	r2, [r0, #0]
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d051      	beq.n	800577e <LL_EXTI_Init+0xb6>
    {
      switch (EXTI_InitStruct->Mode)
 80056da:	7a41      	ldrb	r1, [r0, #9]
 80056dc:	2901      	cmp	r1, #1
 80056de:	d019      	beq.n	8005714 <LL_EXTI_Init+0x4c>
 80056e0:	b119      	cbz	r1, 80056ea <LL_EXTI_Init+0x22>
 80056e2:	2902      	cmp	r1, #2
 80056e4:	d021      	beq.n	800572a <LL_EXTI_Init+0x62>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 80056e6:	2000      	movs	r0, #0
 80056e8:	e009      	b.n	80056fe <LL_EXTI_Init+0x36>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80056ea:	495b      	ldr	r1, [pc, #364]	; (8005858 <LL_EXTI_Init+0x190>)
 80056ec:	6848      	ldr	r0, [r1, #4]
 80056ee:	ea20 0202 	bic.w	r2, r0, r2
 80056f2:	604a      	str	r2, [r1, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80056f4:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 80056f6:	6808      	ldr	r0, [r1, #0]
 80056f8:	4302      	orrs	r2, r0
 80056fa:	600a      	str	r2, [r1, #0]
  ErrorStatus status = SUCCESS;
 80056fc:	2001      	movs	r0, #1
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80056fe:	7a9a      	ldrb	r2, [r3, #10]
 8005700:	2a00      	cmp	r2, #0
 8005702:	d03d      	beq.n	8005780 <LL_EXTI_Init+0xb8>
      {
        switch (EXTI_InitStruct->Trigger)
 8005704:	2a02      	cmp	r2, #2
 8005706:	d025      	beq.n	8005754 <LL_EXTI_Init+0x8c>
 8005708:	2a03      	cmp	r2, #3
 800570a:	d02e      	beq.n	800576a <LL_EXTI_Init+0xa2>
 800570c:	2a01      	cmp	r2, #1
 800570e:	d016      	beq.n	800573e <LL_EXTI_Init+0x76>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status = ERROR;
 8005710:	2000      	movs	r0, #0
 8005712:	e035      	b.n	8005780 <LL_EXTI_Init+0xb8>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005714:	4950      	ldr	r1, [pc, #320]	; (8005858 <LL_EXTI_Init+0x190>)
 8005716:	6808      	ldr	r0, [r1, #0]
 8005718:	ea20 0202 	bic.w	r2, r0, r2
 800571c:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800571e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005720:	6848      	ldr	r0, [r1, #4]
 8005722:	4302      	orrs	r2, r0
 8005724:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8005726:	2001      	movs	r0, #1
 8005728:	e7e9      	b.n	80056fe <LL_EXTI_Init+0x36>
  SET_BIT(EXTI->IMR, ExtiLine);
 800572a:	494b      	ldr	r1, [pc, #300]	; (8005858 <LL_EXTI_Init+0x190>)
 800572c:	6808      	ldr	r0, [r1, #0]
 800572e:	4302      	orrs	r2, r0
 8005730:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005732:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005734:	6848      	ldr	r0, [r1, #4]
 8005736:	4302      	orrs	r2, r0
 8005738:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 800573a:	2001      	movs	r0, #1
 800573c:	e7df      	b.n	80056fe <LL_EXTI_Init+0x36>
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800573e:	681c      	ldr	r4, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005740:	4a45      	ldr	r2, [pc, #276]	; (8005858 <LL_EXTI_Init+0x190>)
 8005742:	68d1      	ldr	r1, [r2, #12]
 8005744:	ea21 0104 	bic.w	r1, r1, r4
 8005748:	60d1      	str	r1, [r2, #12]
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800574a:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800574c:	6894      	ldr	r4, [r2, #8]
 800574e:	4321      	orrs	r1, r4
 8005750:	6091      	str	r1, [r2, #8]
 8005752:	e015      	b.n	8005780 <LL_EXTI_Init+0xb8>
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005754:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005756:	4a40      	ldr	r2, [pc, #256]	; (8005858 <LL_EXTI_Init+0x190>)
 8005758:	6891      	ldr	r1, [r2, #8]
 800575a:	ea21 0104 	bic.w	r1, r1, r4
 800575e:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005760:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005762:	68d4      	ldr	r4, [r2, #12]
 8005764:	4321      	orrs	r1, r4
 8005766:	60d1      	str	r1, [r2, #12]
 8005768:	e00a      	b.n	8005780 <LL_EXTI_Init+0xb8>
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800576a:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800576c:	4a3a      	ldr	r2, [pc, #232]	; (8005858 <LL_EXTI_Init+0x190>)
 800576e:	6894      	ldr	r4, [r2, #8]
 8005770:	4321      	orrs	r1, r4
 8005772:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005774:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005776:	68d4      	ldr	r4, [r2, #12]
 8005778:	4321      	orrs	r1, r4
 800577a:	60d1      	str	r1, [r2, #12]
 800577c:	e000      	b.n	8005780 <LL_EXTI_Init+0xb8>
  ErrorStatus status = SUCCESS;
 800577e:	2001      	movs	r0, #1
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	2a00      	cmp	r2, #0
 8005784:	d038      	beq.n	80057f8 <LL_EXTI_Init+0x130>
    {
      switch (EXTI_InitStruct->Mode)
 8005786:	7a59      	ldrb	r1, [r3, #9]
 8005788:	2901      	cmp	r1, #1
 800578a:	d018      	beq.n	80057be <LL_EXTI_Init+0xf6>
 800578c:	b169      	cbz	r1, 80057aa <LL_EXTI_Init+0xe2>
 800578e:	2902      	cmp	r1, #2
 8005790:	d01f      	beq.n	80057d2 <LL_EXTI_Init+0x10a>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
          break;
        default:
          status = ERROR;
 8005792:	2000      	movs	r0, #0
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005794:	7a9a      	ldrb	r2, [r3, #10]
 8005796:	2a00      	cmp	r2, #0
 8005798:	d02e      	beq.n	80057f8 <LL_EXTI_Init+0x130>
      {
        switch (EXTI_InitStruct->Trigger)
 800579a:	2a02      	cmp	r2, #2
 800579c:	d02f      	beq.n	80057fe <LL_EXTI_Init+0x136>
 800579e:	2a03      	cmp	r2, #3
 80057a0:	d038      	beq.n	8005814 <LL_EXTI_Init+0x14c>
 80057a2:	2a01      	cmp	r2, #1
 80057a4:	d01e      	beq.n	80057e4 <LL_EXTI_Init+0x11c>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
            break;
          default:
            status = ERROR;
 80057a6:	2000      	movs	r0, #0
 80057a8:	e026      	b.n	80057f8 <LL_EXTI_Init+0x130>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80057aa:	492b      	ldr	r1, [pc, #172]	; (8005858 <LL_EXTI_Init+0x190>)
 80057ac:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80057ae:	ea24 0202 	bic.w	r2, r4, r2
 80057b2:	624a      	str	r2, [r1, #36]	; 0x24
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80057b4:	685a      	ldr	r2, [r3, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80057b6:	6a0c      	ldr	r4, [r1, #32]
 80057b8:	4322      	orrs	r2, r4
 80057ba:	620a      	str	r2, [r1, #32]
 80057bc:	e7ea      	b.n	8005794 <LL_EXTI_Init+0xcc>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80057be:	4926      	ldr	r1, [pc, #152]	; (8005858 <LL_EXTI_Init+0x190>)
 80057c0:	6a0c      	ldr	r4, [r1, #32]
 80057c2:	ea24 0202 	bic.w	r2, r4, r2
 80057c6:	620a      	str	r2, [r1, #32]
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80057c8:	685a      	ldr	r2, [r3, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80057ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80057cc:	4322      	orrs	r2, r4
 80057ce:	624a      	str	r2, [r1, #36]	; 0x24
 80057d0:	e7e0      	b.n	8005794 <LL_EXTI_Init+0xcc>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80057d2:	4921      	ldr	r1, [pc, #132]	; (8005858 <LL_EXTI_Init+0x190>)
 80057d4:	6a0c      	ldr	r4, [r1, #32]
 80057d6:	4322      	orrs	r2, r4
 80057d8:	620a      	str	r2, [r1, #32]
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80057da:	685a      	ldr	r2, [r3, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80057dc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80057de:	4322      	orrs	r2, r4
 80057e0:	624a      	str	r2, [r1, #36]	; 0x24
 80057e2:	e7d7      	b.n	8005794 <LL_EXTI_Init+0xcc>
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80057e4:	685c      	ldr	r4, [r3, #4]
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <LL_EXTI_Init+0x190>)
 80057e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80057ea:	ea21 0104 	bic.w	r1, r1, r4
 80057ee:	62d1      	str	r1, [r2, #44]	; 0x2c
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80057f0:	685b      	ldr	r3, [r3, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80057f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6293      	str	r3, [r2, #40]	; 0x28
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif
  }
  return status;
}
 80057f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057fc:	4770      	bx	lr
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80057fe:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005800:	4a15      	ldr	r2, [pc, #84]	; (8005858 <LL_EXTI_Init+0x190>)
 8005802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005804:	ea21 0104 	bic.w	r1, r1, r4
 8005808:	6291      	str	r1, [r2, #40]	; 0x28
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800580a:	685b      	ldr	r3, [r3, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800580c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800580e:	430b      	orrs	r3, r1
 8005810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005812:	e7f1      	b.n	80057f8 <LL_EXTI_Init+0x130>
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005814:	6859      	ldr	r1, [r3, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005816:	4a10      	ldr	r2, [pc, #64]	; (8005858 <LL_EXTI_Init+0x190>)
 8005818:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800581a:	4321      	orrs	r1, r4
 800581c:	6291      	str	r1, [r2, #40]	; 0x28
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800581e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005820:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005822:	430b      	orrs	r3, r1
 8005824:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005826:	e7e7      	b.n	80057f8 <LL_EXTI_Init+0x130>
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005828:	6800      	ldr	r0, [r0, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800582a:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <LL_EXTI_Init+0x190>)
 800582c:	6811      	ldr	r1, [r2, #0]
 800582e:	ea21 0100 	bic.w	r1, r1, r0
 8005832:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005834:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8005836:	6851      	ldr	r1, [r2, #4]
 8005838:	ea21 0100 	bic.w	r1, r1, r0
 800583c:	6051      	str	r1, [r2, #4]
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800583e:	6858      	ldr	r0, [r3, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005840:	6a11      	ldr	r1, [r2, #32]
 8005842:	ea21 0100 	bic.w	r1, r1, r0
 8005846:	6211      	str	r1, [r2, #32]
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005848:	6859      	ldr	r1, [r3, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800584a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800584c:	ea23 0301 	bic.w	r3, r3, r1
 8005850:	6253      	str	r3, [r2, #36]	; 0x24
  ErrorStatus status = SUCCESS;
 8005852:	2001      	movs	r0, #1
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010400 	.word	0x40010400

0800585c <MX_GPIO_Init>:
 * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
 */
static void MX_GPIO_Init(void)
{
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	b08e      	sub	sp, #56	; 0x38

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005862:	4bbf      	ldr	r3, [pc, #764]	; (8005b60 <MX_GPIO_Init+0x304>)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005872:	9200      	str	r2, [sp, #0]
 8005874:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800587c:	615a      	str	r2, [r3, #20]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800588e:	615a      	str	r2, [r3, #20]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005896:	9202      	str	r2, [sp, #8]
 8005898:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058a0:	615a      	str	r2, [r3, #20]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80058a8:	9203      	str	r2, [sp, #12]
 80058aa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058ba:	9204      	str	r2, [sp, #16]
 80058bc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058c4:	615a      	str	r2, [r3, #20]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058cc:	9305      	str	r3, [sp, #20]
 80058ce:	9b05      	ldr	r3, [sp, #20]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80058d0:	4da4      	ldr	r5, [pc, #656]	; (8005b64 <MX_GPIO_Init+0x308>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80058d8:	4628      	mov	r0, r5
 80058da:	f7fd fa68 	bl	8002dae <HAL_GPIO_WritePin>
            |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
            |LD6_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, US_AV_G_Trig_Pin|US_AV_C_Trig_Pin|US_AV_D_Trig_Pin|US_AR_G_Trig_Pin
 80058de:	4fa2      	ldr	r7, [pc, #648]	; (8005b68 <MX_GPIO_Init+0x30c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	213f      	movs	r1, #63	; 0x3f
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7fd fa62 	bl	8002dae <HAL_GPIO_WritePin>
            |US_AR_C_Trig_Pin|US_AR_D_Trig_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80058ea:	2337      	movs	r3, #55	; 0x37
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
            |MEMS_INT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80058ee:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <MX_GPIO_Init+0x310>)
 80058f0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2600      	movs	r6, #0
 80058f4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058f6:	a909      	add	r1, sp, #36	; 0x24
 80058f8:	4628      	mov	r0, r5
 80058fa:	f7fd f903 	bl	8002b04 <HAL_GPIO_Init>

    /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80058fe:	f64f 7308 	movw	r3, #65288	; 0xff08
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
            |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
            |LD6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005904:	2401      	movs	r4, #1
 8005906:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005908:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800590a:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800590c:	a909      	add	r1, sp, #36	; 0x24
 800590e:	4628      	mov	r0, r5
 8005910:	f7fd f8f8 	bl	8002b04 <HAL_GPIO_Init>

    /*Configure GPIO pins : US_AV_G_Trig_Pin US_AV_C_Trig_Pin US_AV_D_Trig_Pin US_AR_G_Trig_Pin
                           US_AR_C_Trig_Pin US_AR_D_Trig_Pin */
    GPIO_InitStruct.Pin = US_AV_G_Trig_Pin|US_AV_C_Trig_Pin|US_AV_D_Trig_Pin|US_AR_G_Trig_Pin
 8005914:	233f      	movs	r3, #63	; 0x3f
 8005916:	9309      	str	r3, [sp, #36]	; 0x24
            |US_AR_C_Trig_Pin|US_AR_D_Trig_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005918:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591c:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800591e:	a909      	add	r1, sp, #36	; 0x24
 8005920:	4638      	mov	r0, r7
 8005922:	f7fd f8ef 	bl	8002b04 <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8005926:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005928:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800592c:	a909      	add	r1, sp, #36	; 0x24
 800592e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005932:	f7fd f8e7 	bl	8002b04 <HAL_GPIO_Init>

    /*Configure GPIO pins : DM_Pin DP_Pin */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8005936:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800593a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	f04f 0802 	mov.w	r8, #2
 8005940:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005946:	2703      	movs	r7, #3
 8005948:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800594a:	230e      	movs	r3, #14
 800594c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594e:	a909      	add	r1, sp, #36	; 0x24
 8005950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005954:	f7fd f8d6 	bl	8002b04 <HAL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8005958:	4a85      	ldr	r2, [pc, #532]	; (8005b70 <MX_GPIO_Init+0x314>)
 800595a:	6890      	ldr	r0, [r2, #8]
 800595c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8005960:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005964:	fa91 f1a1 	rbit	r1, r1
 8005968:	fab1 f181 	clz	r1, r1
 800596c:	2304      	movs	r3, #4
 800596e:	fa03 f101 	lsl.w	r1, r3, r1
 8005972:	4301      	orrs	r1, r0
 8005974:	6091      	str	r1, [r2, #8]
 8005976:	68d1      	ldr	r1, [r2, #12]
 8005978:	f021 010f 	bic.w	r1, r1, #15
 800597c:	200f      	movs	r0, #15
 800597e:	fa90 fea0 	rbit	lr, r0
 8005982:	fabe fe8e 	clz	lr, lr
 8005986:	fa03 fe0e 	lsl.w	lr, r3, lr
 800598a:	ea41 010e 	orr.w	r1, r1, lr
 800598e:	60d1      	str	r1, [r2, #12]
 8005990:	68d1      	ldr	r1, [r2, #12]
 8005992:	f021 0ef0 	bic.w	lr, r1, #240	; 0xf0
 8005996:	21f0      	movs	r1, #240	; 0xf0
 8005998:	fa91 fca1 	rbit	ip, r1
 800599c:	fabc fc8c 	clz	ip, ip
 80059a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80059a4:	ea4e 0e0c 	orr.w	lr, lr, ip
 80059a8:	f8c2 e00c 	str.w	lr, [r2, #12]
 80059ac:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80059b0:	f02e 0e0f 	bic.w	lr, lr, #15
 80059b4:	fa90 f0a0 	rbit	r0, r0
 80059b8:	fab0 f080 	clz	r0, r0
 80059bc:	fa03 f000 	lsl.w	r0, r3, r0
 80059c0:	ea4e 0000 	orr.w	r0, lr, r0
 80059c4:	6090      	str	r0, [r2, #8]
 80059c6:	6890      	ldr	r0, [r2, #8]
 80059c8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 80059cc:	fa91 f1a1 	rbit	r1, r1
 80059d0:	fab1 f181 	clz	r1, r1
 80059d4:	fa03 f101 	lsl.w	r1, r3, r1
 80059d8:	4301      	orrs	r1, r0
 80059da:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80059dc:	68e9      	ldr	r1, [r5, #12]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	fab2 f282 	clz	r2, r2
 80059e6:	40a2      	lsls	r2, r4
 80059e8:	fa07 f202 	lsl.w	r2, r7, r2
 80059ec:	ea21 0202 	bic.w	r2, r1, r2
 80059f0:	fa93 f1a3 	rbit	r1, r3
 80059f4:	60ea      	str	r2, [r5, #12]
 80059f6:	68e9      	ldr	r1, [r5, #12]
 80059f8:	f04f 0a10 	mov.w	sl, #16
 80059fc:	fa9a f2aa 	rbit	r2, sl
 8005a00:	fab2 f282 	clz	r2, r2
 8005a04:	40a2      	lsls	r2, r4
 8005a06:	fa07 f202 	lsl.w	r2, r7, r2
 8005a0a:	ea21 0202 	bic.w	r2, r1, r2
 8005a0e:	fa9a f1aa 	rbit	r1, sl
 8005a12:	60ea      	str	r2, [r5, #12]
 8005a14:	68e9      	ldr	r1, [r5, #12]
 8005a16:	f04f 0920 	mov.w	r9, #32
 8005a1a:	fa99 f2a9 	rbit	r2, r9
 8005a1e:	fab2 f282 	clz	r2, r2
 8005a22:	40a2      	lsls	r2, r4
 8005a24:	fa07 f202 	lsl.w	r2, r7, r2
 8005a28:	ea21 0202 	bic.w	r2, r1, r2
 8005a2c:	fa99 f1a9 	rbit	r1, r9
 8005a30:	60ea      	str	r2, [r5, #12]
 8005a32:	68e9      	ldr	r1, [r5, #12]
 8005a34:	fa94 f2a4 	rbit	r2, r4
 8005a38:	fab2 f282 	clz	r2, r2
 8005a3c:	40a2      	lsls	r2, r4
 8005a3e:	fa07 f202 	lsl.w	r2, r7, r2
 8005a42:	ea21 0202 	bic.w	r2, r1, r2
 8005a46:	fa94 f1a4 	rbit	r1, r4
 8005a4a:	60ea      	str	r2, [r5, #12]
 8005a4c:	68e9      	ldr	r1, [r5, #12]
 8005a4e:	fa98 f2a8 	rbit	r2, r8
 8005a52:	fab2 f282 	clz	r2, r2
 8005a56:	40a2      	lsls	r2, r4
 8005a58:	fa07 f202 	lsl.w	r2, r7, r2
 8005a5c:	ea21 0202 	bic.w	r2, r1, r2
 8005a60:	fa98 f1a8 	rbit	r1, r8
 8005a64:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005a66:	6829      	ldr	r1, [r5, #0]
 8005a68:	fa93 f2a3 	rbit	r2, r3
 8005a6c:	fab2 f282 	clz	r2, r2
 8005a70:	40a2      	lsls	r2, r4
 8005a72:	fa07 f202 	lsl.w	r2, r7, r2
 8005a76:	ea21 0202 	bic.w	r2, r1, r2
 8005a7a:	fa93 f1a3 	rbit	r1, r3
 8005a7e:	602a      	str	r2, [r5, #0]
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	fa9a f2aa 	rbit	r2, sl
 8005a86:	fab2 f282 	clz	r2, r2
 8005a8a:	40a2      	lsls	r2, r4
 8005a8c:	fa07 f202 	lsl.w	r2, r7, r2
 8005a90:	ea21 0202 	bic.w	r2, r1, r2
 8005a94:	fa9a f1aa 	rbit	r1, sl
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	6829      	ldr	r1, [r5, #0]
 8005a9c:	fa99 f2a9 	rbit	r2, r9
 8005aa0:	fab2 f282 	clz	r2, r2
 8005aa4:	40a2      	lsls	r2, r4
 8005aa6:	fa07 f202 	lsl.w	r2, r7, r2
 8005aaa:	ea21 0202 	bic.w	r2, r1, r2
 8005aae:	fa99 f1a9 	rbit	r1, r9
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	6829      	ldr	r1, [r5, #0]
 8005ab6:	fa94 f2a4 	rbit	r2, r4
 8005aba:	fab2 f282 	clz	r2, r2
 8005abe:	40a2      	lsls	r2, r4
 8005ac0:	fa07 f202 	lsl.w	r2, r7, r2
 8005ac4:	ea21 0202 	bic.w	r2, r1, r2
 8005ac8:	fa94 f1a4 	rbit	r1, r4
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	6829      	ldr	r1, [r5, #0]
 8005ad0:	fa98 f2a8 	rbit	r2, r8
 8005ad4:	fab2 f282 	clz	r2, r2
 8005ad8:	40a2      	lsls	r2, r4
 8005ada:	4097      	lsls	r7, r2
 8005adc:	ea21 0707 	bic.w	r7, r1, r7
 8005ae0:	fa98 f2a8 	rbit	r2, r8
 8005ae4:	602f      	str	r7, [r5, #0]

    /**/
    LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);

    /**/
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8005ae6:	9306      	str	r3, [sp, #24]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8005ae8:	9607      	str	r6, [sp, #28]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005aea:	f88d 4020 	strb.w	r4, [sp, #32]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8005aee:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005af2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    LL_EXTI_Init(&EXTI_InitStruct);
 8005af6:	a806      	add	r0, sp, #24
 8005af8:	f7ff fde6 	bl	80056c8 <LL_EXTI_Init>

    /**/
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8005afc:	f8cd a018 	str.w	sl, [sp, #24]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8005b00:	9607      	str	r6, [sp, #28]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005b02:	f88d 4020 	strb.w	r4, [sp, #32]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8005b06:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005b0a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    LL_EXTI_Init(&EXTI_InitStruct);
 8005b0e:	a806      	add	r0, sp, #24
 8005b10:	f7ff fdda 	bl	80056c8 <LL_EXTI_Init>

    /**/
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8005b14:	f8cd 9018 	str.w	r9, [sp, #24]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8005b18:	9607      	str	r6, [sp, #28]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005b1a:	f88d 4020 	strb.w	r4, [sp, #32]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8005b1e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005b22:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    LL_EXTI_Init(&EXTI_InitStruct);
 8005b26:	a806      	add	r0, sp, #24
 8005b28:	f7ff fdce 	bl	80056c8 <LL_EXTI_Init>

    /**/
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8005b2c:	9406      	str	r4, [sp, #24]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8005b2e:	9607      	str	r6, [sp, #28]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005b30:	f88d 4020 	strb.w	r4, [sp, #32]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8005b34:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005b38:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    LL_EXTI_Init(&EXTI_InitStruct);
 8005b3c:	a806      	add	r0, sp, #24
 8005b3e:	f7ff fdc3 	bl	80056c8 <LL_EXTI_Init>

    /**/
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8005b42:	f8cd 8018 	str.w	r8, [sp, #24]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8005b46:	9607      	str	r6, [sp, #28]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005b48:	f88d 4020 	strb.w	r4, [sp, #32]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8005b4c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005b50:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    LL_EXTI_Init(&EXTI_InitStruct);
 8005b54:	a806      	add	r0, sp, #24
 8005b56:	f7ff fdb7 	bl	80056c8 <LL_EXTI_Init>
}
 8005b5a:	b00e      	add	sp, #56	; 0x38
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	40021000 	.word	0x40021000
 8005b64:	48001000 	.word	0x48001000
 8005b68:	48000800 	.word	0x48000800
 8005b6c:	10120000 	.word	0x10120000
 8005b70:	40010000 	.word	0x40010000

08005b74 <HAL_TIM_IC_CaptureCallback>:
{
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4604      	mov	r4, r0
    if (htim->Instance==TIM1)
 8005b78:	6802      	ldr	r2, [r0, #0]
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d008      	beq.n	8005b92 <HAL_TIM_IC_CaptureCallback+0x1e>
    if (htim->Instance==TIM2)
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d00f      	beq.n	8005ba8 <HAL_TIM_IC_CaptureCallback+0x34>
    if (htim->Instance==TIM3)
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d016      	beq.n	8005bbe <HAL_TIM_IC_CaptureCallback+0x4a>
 8005b90:	bd38      	pop	{r3, r4, r5, pc}
        US_G_Echo = HAL_TIM_ReadCapturedValue (&htim1,TIM_CHANNEL_2);//mesure capture Duree pulse
 8005b92:	4d12      	ldr	r5, [pc, #72]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0x68>)
 8005b94:	2104      	movs	r1, #4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7fe ff10 	bl	80049bc <HAL_TIM_ReadCapturedValue>
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8005b9e:	6018      	str	r0, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim1,0);// mise a zero compteur apres capture
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ba6:	e7eb      	b.n	8005b80 <HAL_TIM_IC_CaptureCallback+0xc>
        US_C_Echo =	HAL_TIM_ReadCapturedValue (&htim2,TIM_CHANNEL_2);
 8005ba8:	4d0e      	ldr	r5, [pc, #56]	; (8005be4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005baa:	2104      	movs	r1, #4
 8005bac:	4628      	mov	r0, r5
 8005bae:	f7fe ff05 	bl	80049bc <HAL_TIM_ReadCapturedValue>
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <HAL_TIM_IC_CaptureCallback+0x74>)
 8005bb4:	6018      	str	r0, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim2,0);// mise a zero compteur apres capture
 8005bb6:	682b      	ldr	r3, [r5, #0]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
 8005bbc:	e7e4      	b.n	8005b88 <HAL_TIM_IC_CaptureCallback+0x14>
        US_D_Echo =	HAL_TIM_ReadCapturedValue (&htim3,TIM_CHANNEL_2);
 8005bbe:	4c0b      	ldr	r4, [pc, #44]	; (8005bec <HAL_TIM_IC_CaptureCallback+0x78>)
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f7fe fefa 	bl	80049bc <HAL_TIM_ReadCapturedValue>
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8005bca:	6018      	str	r0, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim3,0);// mise a zero compteur apres capture
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005bd2:	e7dd      	b.n	8005b90 <HAL_TIM_IC_CaptureCallback+0x1c>
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	20000240 	.word	0x20000240
 8005be0:	20000158 	.word	0x20000158
 8005be4:	200002f0 	.word	0x200002f0
 8005be8:	2000014c 	.word	0x2000014c
 8005bec:	20000200 	.word	0x20000200
 8005bf0:	20000150 	.word	0x20000150

08005bf4 <SYS_MicroDelay>:
{
 8005bf4:	b082      	sub	sp, #8
    volatile uint32_t cnt=(delay*6)+5;
 8005bf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005bfa:	0043      	lsls	r3, r0, #1
 8005bfc:	3305      	adds	r3, #5
 8005bfe:	9301      	str	r3, [sp, #4]
    while (cnt >0) {
 8005c00:	e002      	b.n	8005c08 <SYS_MicroDelay+0x14>
        cnt--;
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	9301      	str	r3, [sp, #4]
    while (cnt >0) {
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f9      	bne.n	8005c02 <SYS_MicroDelay+0xe>
}
 8005c0e:	b002      	add	sp, #8
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_SYSTICK_Callback>:
    counter++;
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <HAL_SYSTICK_Callback+0x38>)
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	6013      	str	r3, [r2, #0]
    counterAHRS++;
 8005c1c:	490c      	ldr	r1, [pc, #48]	; (8005c50 <HAL_SYSTICK_Callback+0x3c>)
 8005c1e:	680a      	ldr	r2, [r1, #0]
 8005c20:	3201      	adds	r2, #1
 8005c22:	600a      	str	r2, [r1, #0]
    if (counterAHRS>=500){
 8005c24:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8005c28:	d305      	bcc.n	8005c36 <HAL_SYSTICK_Callback+0x22>
        counterAHRS=0;
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <HAL_SYSTICK_Callback+0x3c>)
 8005c2e:	6011      	str	r1, [r2, #0]
        AHRS_Flag=1;
 8005c30:	2101      	movs	r1, #1
 8005c32:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <HAL_SYSTICK_Callback+0x40>)
 8005c34:	7011      	strb	r1, [r2, #0]
    if (counter>=1000) {
 8005c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c3a:	d305      	bcc.n	8005c48 <HAL_SYSTICK_Callback+0x34>
        counter=0;
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <HAL_SYSTICK_Callback+0x38>)
 8005c40:	601a      	str	r2, [r3, #0]
        US_Flag=1;
 8005c42:	2201      	movs	r2, #1
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <HAL_SYSTICK_Callback+0x44>)
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000160 	.word	0x20000160
 8005c50:	20000164 	.word	0x20000164
 8005c54:	20000132 	.word	0x20000132
 8005c58:	20000154 	.word	0x20000154

08005c5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c5c:	b508      	push	{r3, lr}
    if (USER_BUTTON_PIN == GPIO_Pin)
 8005c5e:	2801      	cmp	r0, #1
 8005c60:	d002      	beq.n	8005c68 <HAL_GPIO_EXTI_Callback+0xc>
    {
        while (BSP_PB_GetState(BUTTON_USER) != RESET);
        UserPressButton = 1;
    } else {
        Sensors_GPIO_EXTI_Callback(GPIO_Pin);
 8005c62:	f7fc f919 	bl	8001e98 <Sensors_GPIO_EXTI_Callback>
 8005c66:	bd08      	pop	{r3, pc}
        while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f000 fd91 	bl	8006790 <BSP_PB_GetState>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d1fa      	bne.n	8005c68 <HAL_GPIO_EXTI_Callback+0xc>
        UserPressButton = 1;
 8005c72:	2201      	movs	r2, #1
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <HAL_GPIO_EXTI_Callback+0x20>)
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	bd08      	pop	{r3, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2000015c 	.word	0x2000015c

08005c80 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4604      	mov	r4, r0
 8005c84:	460d      	mov	r5, r1
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    BSP_LED_On(LED10);
 8005c86:	2007      	movs	r0, #7
 8005c88:	f000 fd0a 	bl	80066a0 <BSP_LED_On>
    printf("%s | line : %d", file, line);
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4801      	ldr	r0, [pc, #4]	; (8005c98 <_Error_Handler+0x18>)
 8005c92:	f001 f852 	bl	8006d3a <iprintf>
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	08007a9c 	.word	0x08007a9c

08005c9c <MX_I2C1_Init>:
{
 8005c9c:	b508      	push	{r3, lr}
    hi2c1.Instance = I2C1;
 8005c9e:	4817      	ldr	r0, [pc, #92]	; (8005cfc <MX_I2C1_Init+0x60>)
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <MX_I2C1_Init+0x64>)
 8005ca2:	6003      	str	r3, [r0, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <MX_I2C1_Init+0x68>)
 8005ca6:	6043      	str	r3, [r0, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6083      	str	r3, [r0, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cac:	2201      	movs	r2, #1
 8005cae:	60c2      	str	r2, [r0, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005cb0:	6103      	str	r3, [r0, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8005cb2:	6143      	str	r3, [r0, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005cb4:	6183      	str	r3, [r0, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005cb6:	61c3      	str	r3, [r0, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005cb8:	6203      	str	r3, [r0, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cba:	f7fd f9bc 	bl	8003036 <HAL_I2C_Init>
 8005cbe:	b950      	cbnz	r0, 8005cd6 <MX_I2C1_Init+0x3a>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <MX_I2C1_Init+0x60>)
 8005cc4:	f7fd fbb4 	bl	8003430 <HAL_I2CEx_ConfigAnalogFilter>
 8005cc8:	b958      	cbnz	r0, 8005ce2 <MX_I2C1_Init+0x46>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005cca:	2100      	movs	r1, #0
 8005ccc:	480b      	ldr	r0, [pc, #44]	; (8005cfc <MX_I2C1_Init+0x60>)
 8005cce:	f7fd fbdd 	bl	800348c <HAL_I2CEx_ConfigDigitalFilter>
 8005cd2:	b960      	cbnz	r0, 8005cee <MX_I2C1_Init+0x52>
 8005cd4:	bd08      	pop	{r3, pc}
        _Error_Handler(__FILE__, __LINE__);
 8005cd6:	f240 11d1 	movw	r1, #465	; 0x1d1
 8005cda:	480b      	ldr	r0, [pc, #44]	; (8005d08 <MX_I2C1_Init+0x6c>)
 8005cdc:	f7ff ffd0 	bl	8005c80 <_Error_Handler>
 8005ce0:	e7ee      	b.n	8005cc0 <MX_I2C1_Init+0x24>
        _Error_Handler(__FILE__, __LINE__);
 8005ce2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005ce6:	4808      	ldr	r0, [pc, #32]	; (8005d08 <MX_I2C1_Init+0x6c>)
 8005ce8:	f7ff ffca 	bl	8005c80 <_Error_Handler>
 8005cec:	e7ed      	b.n	8005cca <MX_I2C1_Init+0x2e>
        _Error_Handler(__FILE__, __LINE__);
 8005cee:	f240 11df 	movw	r1, #479	; 0x1df
 8005cf2:	4805      	ldr	r0, [pc, #20]	; (8005d08 <MX_I2C1_Init+0x6c>)
 8005cf4:	f7ff ffc4 	bl	8005c80 <_Error_Handler>
}
 8005cf8:	e7ec      	b.n	8005cd4 <MX_I2C1_Init+0x38>
 8005cfa:	bf00      	nop
 8005cfc:	20000170 	.word	0x20000170
 8005d00:	40005400 	.word	0x40005400
 8005d04:	2000090e 	.word	0x2000090e
 8005d08:	08007a8c 	.word	0x08007a8c

08005d0c <MX_SPI1_Init>:
{
 8005d0c:	b508      	push	{r3, lr}
    hspi1.Instance = SPI1;
 8005d0e:	4812      	ldr	r0, [pc, #72]	; (8005d58 <MX_SPI1_Init+0x4c>)
 8005d10:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <MX_SPI1_Init+0x50>)
 8005d12:	6003      	str	r3, [r0, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005d18:	6043      	str	r3, [r0, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6083      	str	r3, [r0, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d22:	60c2      	str	r2, [r0, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d24:	6103      	str	r3, [r0, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d26:	6143      	str	r3, [r0, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2c:	6182      	str	r2, [r0, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005d2e:	2238      	movs	r2, #56	; 0x38
 8005d30:	61c2      	str	r2, [r0, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d32:	6203      	str	r3, [r0, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d34:	6243      	str	r3, [r0, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d36:	6283      	str	r3, [r0, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8005d38:	2207      	movs	r2, #7
 8005d3a:	62c2      	str	r2, [r0, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d3c:	6303      	str	r3, [r0, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	6343      	str	r3, [r0, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d42:	f7fe fa6f 	bl	8004224 <HAL_SPI_Init>
 8005d46:	b900      	cbnz	r0, 8005d4a <MX_SPI1_Init+0x3e>
 8005d48:	bd08      	pop	{r3, pc}
        _Error_Handler(__FILE__, __LINE__);
 8005d4a:	f240 11f9 	movw	r1, #505	; 0x1f9
 8005d4e:	4804      	ldr	r0, [pc, #16]	; (8005d60 <MX_SPI1_Init+0x54>)
 8005d50:	f7ff ff96 	bl	8005c80 <_Error_Handler>
}
 8005d54:	e7f8      	b.n	8005d48 <MX_SPI1_Init+0x3c>
 8005d56:	bf00      	nop
 8005d58:	2000028c 	.word	0x2000028c
 8005d5c:	40013000 	.word	0x40013000
 8005d60:	08007a8c 	.word	0x08007a8c

08005d64 <MX_TIM2_Init>:
{
 8005d64:	b500      	push	{lr}
 8005d66:	b089      	sub	sp, #36	; 0x24
    htim2.Instance = TIM2;
 8005d68:	4825      	ldr	r0, [pc, #148]	; (8005e00 <MX_TIM2_Init+0x9c>)
 8005d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d6e:	6003      	str	r3, [r0, #0]
    htim2.Init.Prescaler = 63;
 8005d70:	233f      	movs	r3, #63	; 0x3f
 8005d72:	6043      	str	r3, [r0, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d74:	2300      	movs	r3, #0
 8005d76:	6083      	str	r3, [r0, #8]
    htim2.Init.Period = 65535;
 8005d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d7c:	60c2      	str	r2, [r0, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d7e:	6103      	str	r3, [r0, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d80:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005d82:	f7fe ff6f 	bl	8004c64 <HAL_TIM_IC_Init>
 8005d86:	bb18      	cbnz	r0, 8005dd0 <MX_TIM2_Init+0x6c>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9305      	str	r3, [sp, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d8c:	9307      	str	r3, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d8e:	a905      	add	r1, sp, #20
 8005d90:	481b      	ldr	r0, [pc, #108]	; (8005e00 <MX_TIM2_Init+0x9c>)
 8005d92:	f7ff f861 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8005d96:	bb08      	cbnz	r0, 8005ddc <MX_TIM2_Init+0x78>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	9302      	str	r3, [sp, #8]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005da0:	2200      	movs	r2, #0
 8005da2:	9203      	str	r2, [sp, #12]
    sConfigIC.ICFilter = 15;
 8005da4:	230f      	movs	r3, #15
 8005da6:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005da8:	a901      	add	r1, sp, #4
 8005daa:	4815      	ldr	r0, [pc, #84]	; (8005e00 <MX_TIM2_Init+0x9c>)
 8005dac:	f7fe ffb6 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005db0:	b9d0      	cbnz	r0, 8005de8 <MX_TIM2_Init+0x84>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005db2:	2300      	movs	r3, #0
 8005db4:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005db6:	2202      	movs	r2, #2
 8005db8:	9202      	str	r2, [sp, #8]
    sConfigIC.ICFilter = 0;
 8005dba:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	eb0d 0102 	add.w	r1, sp, r2
 8005dc2:	480f      	ldr	r0, [pc, #60]	; (8005e00 <MX_TIM2_Init+0x9c>)
 8005dc4:	f7fe ffaa 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005dc8:	b9a0      	cbnz	r0, 8005df4 <MX_TIM2_Init+0x90>
}
 8005dca:	b009      	add	sp, #36	; 0x24
 8005dcc:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 8005dd0:	f240 213b 	movw	r1, #571	; 0x23b
 8005dd4:	480b      	ldr	r0, [pc, #44]	; (8005e04 <MX_TIM2_Init+0xa0>)
 8005dd6:	f7ff ff53 	bl	8005c80 <_Error_Handler>
 8005dda:	e7d5      	b.n	8005d88 <MX_TIM2_Init+0x24>
        _Error_Handler(__FILE__, __LINE__);
 8005ddc:	f240 2142 	movw	r1, #578	; 0x242
 8005de0:	4808      	ldr	r0, [pc, #32]	; (8005e04 <MX_TIM2_Init+0xa0>)
 8005de2:	f7ff ff4d 	bl	8005c80 <_Error_Handler>
 8005de6:	e7d7      	b.n	8005d98 <MX_TIM2_Init+0x34>
        _Error_Handler(__FILE__, __LINE__);
 8005de8:	f240 214b 	movw	r1, #587	; 0x24b
 8005dec:	4805      	ldr	r0, [pc, #20]	; (8005e04 <MX_TIM2_Init+0xa0>)
 8005dee:	f7ff ff47 	bl	8005c80 <_Error_Handler>
 8005df2:	e7de      	b.n	8005db2 <MX_TIM2_Init+0x4e>
        _Error_Handler(__FILE__, __LINE__);
 8005df4:	f240 2153 	movw	r1, #595	; 0x253
 8005df8:	4802      	ldr	r0, [pc, #8]	; (8005e04 <MX_TIM2_Init+0xa0>)
 8005dfa:	f7ff ff41 	bl	8005c80 <_Error_Handler>
}
 8005dfe:	e7e4      	b.n	8005dca <MX_TIM2_Init+0x66>
 8005e00:	200002f0 	.word	0x200002f0
 8005e04:	08007a8c 	.word	0x08007a8c

08005e08 <MX_USART2_UART_Init>:
{
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	b086      	sub	sp, #24
    huart2.Instance = USART2;
 8005e0c:	481f      	ldr	r0, [pc, #124]	; (8005e8c <MX_USART2_UART_Init+0x84>)
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <MX_USART2_UART_Init+0x88>)
 8005e10:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 115200;
 8005e12:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005e16:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8005e1c:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8005e1e:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8005e20:	220c      	movs	r2, #12
 8005e22:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e24:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e26:	61c3      	str	r3, [r0, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e28:	6203      	str	r3, [r0, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e2a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e2c:	f7ff fae3 	bl	80053f6 <HAL_UART_Init>
 8005e30:	bb28      	cbnz	r0, 8005e7e <MX_USART2_UART_Init+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <MX_USART2_UART_Init+0x8c>)
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e3a:	615a      	str	r2, [r3, #20]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e46:	2304      	movs	r3, #4
 8005e48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	2400      	movs	r4, #0
 8005e50:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e52:	2603      	movs	r6, #3
 8005e54:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e56:	2507      	movs	r5, #7
 8005e58:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5a:	a901      	add	r1, sp, #4
 8005e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e60:	f7fc fe50 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e64:	2308      	movs	r3, #8
 8005e66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e68:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e6c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e6e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e70:	a901      	add	r1, sp, #4
 8005e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e76:	f7fc fe45 	bl	8002b04 <HAL_GPIO_Init>
}
 8005e7a:	b006      	add	sp, #24
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
        _Error_Handler(__FILE__, __LINE__);
 8005e7e:	f44f 7125 	mov.w	r1, #660	; 0x294
 8005e82:	4805      	ldr	r0, [pc, #20]	; (8005e98 <MX_USART2_UART_Init+0x90>)
 8005e84:	f7ff fefc 	bl	8005c80 <_Error_Handler>
 8005e88:	e7d3      	b.n	8005e32 <MX_USART2_UART_Init+0x2a>
 8005e8a:	bf00      	nop
 8005e8c:	20000330 	.word	0x20000330
 8005e90:	40004400 	.word	0x40004400
 8005e94:	40021000 	.word	0x40021000
 8005e98:	08007a8c 	.word	0x08007a8c

08005e9c <MX_TIM3_Init>:
{
 8005e9c:	b500      	push	{lr}
 8005e9e:	b089      	sub	sp, #36	; 0x24
    htim3.Instance = TIM3;
 8005ea0:	4825      	ldr	r0, [pc, #148]	; (8005f38 <MX_TIM3_Init+0x9c>)
 8005ea2:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <MX_TIM3_Init+0xa0>)
 8005ea4:	6003      	str	r3, [r0, #0]
    htim3.Init.Prescaler = 63;
 8005ea6:	233f      	movs	r3, #63	; 0x3f
 8005ea8:	6043      	str	r3, [r0, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6083      	str	r3, [r0, #8]
    htim3.Init.Period = 65535;
 8005eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eb2:	60c2      	str	r2, [r0, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb4:	6103      	str	r3, [r0, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eb6:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005eb8:	f7fe fed4 	bl	8004c64 <HAL_TIM_IC_Init>
 8005ebc:	bb18      	cbnz	r0, 8005f06 <MX_TIM3_Init+0x6a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9305      	str	r3, [sp, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec2:	9307      	str	r3, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ec4:	a905      	add	r1, sp, #20
 8005ec6:	481c      	ldr	r0, [pc, #112]	; (8005f38 <MX_TIM3_Init+0x9c>)
 8005ec8:	f7fe ffc6 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8005ecc:	bb08      	cbnz	r0, 8005f12 <MX_TIM3_Init+0x76>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	9302      	str	r3, [sp, #8]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	9203      	str	r2, [sp, #12]
    sConfigIC.ICFilter = 15;
 8005eda:	230f      	movs	r3, #15
 8005edc:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005ede:	a901      	add	r1, sp, #4
 8005ee0:	4815      	ldr	r0, [pc, #84]	; (8005f38 <MX_TIM3_Init+0x9c>)
 8005ee2:	f7fe ff1b 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005ee6:	b9d0      	cbnz	r0, 8005f1e <MX_TIM3_Init+0x82>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005eec:	2202      	movs	r2, #2
 8005eee:	9202      	str	r2, [sp, #8]
    sConfigIC.ICFilter = 0;
 8005ef0:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	eb0d 0102 	add.w	r1, sp, r2
 8005ef8:	480f      	ldr	r0, [pc, #60]	; (8005f38 <MX_TIM3_Init+0x9c>)
 8005efa:	f7fe ff0f 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005efe:	b9a0      	cbnz	r0, 8005f2a <MX_TIM3_Init+0x8e>
}
 8005f00:	b009      	add	sp, #36	; 0x24
 8005f02:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 8005f06:	f240 2167 	movw	r1, #615	; 0x267
 8005f0a:	480d      	ldr	r0, [pc, #52]	; (8005f40 <MX_TIM3_Init+0xa4>)
 8005f0c:	f7ff feb8 	bl	8005c80 <_Error_Handler>
 8005f10:	e7d5      	b.n	8005ebe <MX_TIM3_Init+0x22>
        _Error_Handler(__FILE__, __LINE__);
 8005f12:	f240 216e 	movw	r1, #622	; 0x26e
 8005f16:	480a      	ldr	r0, [pc, #40]	; (8005f40 <MX_TIM3_Init+0xa4>)
 8005f18:	f7ff feb2 	bl	8005c80 <_Error_Handler>
 8005f1c:	e7d7      	b.n	8005ece <MX_TIM3_Init+0x32>
        _Error_Handler(__FILE__, __LINE__);
 8005f1e:	f240 2177 	movw	r1, #631	; 0x277
 8005f22:	4807      	ldr	r0, [pc, #28]	; (8005f40 <MX_TIM3_Init+0xa4>)
 8005f24:	f7ff feac 	bl	8005c80 <_Error_Handler>
 8005f28:	e7de      	b.n	8005ee8 <MX_TIM3_Init+0x4c>
        _Error_Handler(__FILE__, __LINE__);
 8005f2a:	f240 217f 	movw	r1, #639	; 0x27f
 8005f2e:	4804      	ldr	r0, [pc, #16]	; (8005f40 <MX_TIM3_Init+0xa4>)
 8005f30:	f7ff fea6 	bl	8005c80 <_Error_Handler>
}
 8005f34:	e7e4      	b.n	8005f00 <MX_TIM3_Init+0x64>
 8005f36:	bf00      	nop
 8005f38:	20000200 	.word	0x20000200
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	08007a8c 	.word	0x08007a8c

08005f44 <MX_CAN_Init>:
{
 8005f44:	b508      	push	{r3, lr}
    hcan.Instance = CAN;
 8005f46:	480f      	ldr	r0, [pc, #60]	; (8005f84 <MX_CAN_Init+0x40>)
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <MX_CAN_Init+0x44>)
 8005f4a:	6003      	str	r3, [r0, #0]
    hcan.Init.Prescaler = 8;
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	6043      	str	r3, [r0, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	6083      	str	r3, [r0, #8]
    hcan.Init.SJW = CAN_SJW_1TQ;
 8005f54:	60c3      	str	r3, [r0, #12]
    hcan.Init.BS1 = CAN_BS1_7TQ;
 8005f56:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8005f5a:	6102      	str	r2, [r0, #16]
    hcan.Init.BS2 = CAN_BS2_2TQ;
 8005f5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f60:	6142      	str	r2, [r0, #20]
    hcan.Init.TTCM = DISABLE;
 8005f62:	6183      	str	r3, [r0, #24]
    hcan.Init.ABOM = DISABLE;
 8005f64:	61c3      	str	r3, [r0, #28]
    hcan.Init.AWUM = DISABLE;
 8005f66:	6203      	str	r3, [r0, #32]
    hcan.Init.NART = DISABLE;
 8005f68:	6243      	str	r3, [r0, #36]	; 0x24
    hcan.Init.RFLM = DISABLE;
 8005f6a:	6283      	str	r3, [r0, #40]	; 0x28
    hcan.Init.TXFP = DISABLE;
 8005f6c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005f6e:	f7fc fb5c 	bl	800262a <HAL_CAN_Init>
 8005f72:	b900      	cbnz	r0, 8005f76 <MX_CAN_Init+0x32>
 8005f74:	bd08      	pop	{r3, pc}
        _Error_Handler(__FILE__, __LINE__);
 8005f76:	f240 11bd 	movw	r1, #445	; 0x1bd
 8005f7a:	4804      	ldr	r0, [pc, #16]	; (8005f8c <MX_CAN_Init+0x48>)
 8005f7c:	f7ff fe80 	bl	8005c80 <_Error_Handler>
}
 8005f80:	e7f8      	b.n	8005f74 <MX_CAN_Init+0x30>
 8005f82:	bf00      	nop
 8005f84:	200001bc 	.word	0x200001bc
 8005f88:	40006400 	.word	0x40006400
 8005f8c:	08007a8c 	.word	0x08007a8c

08005f90 <MX_TIM1_Init>:
{
 8005f90:	b500      	push	{lr}
 8005f92:	b089      	sub	sp, #36	; 0x24
    htim1.Instance = TIM1;
 8005f94:	4826      	ldr	r0, [pc, #152]	; (8006030 <MX_TIM1_Init+0xa0>)
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <MX_TIM1_Init+0xa4>)
 8005f98:	6003      	str	r3, [r0, #0]
    htim1.Init.Prescaler = 63;
 8005f9a:	233f      	movs	r3, #63	; 0x3f
 8005f9c:	6043      	str	r3, [r0, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6083      	str	r3, [r0, #8]
    htim1.Init.Period = 65535;
 8005fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa6:	60c2      	str	r2, [r0, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fa8:	6103      	str	r3, [r0, #16]
    htim1.Init.RepetitionCounter = 0;
 8005faa:	6143      	str	r3, [r0, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fac:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8005fae:	f7fe fe59 	bl	8004c64 <HAL_TIM_IC_Init>
 8005fb2:	bb20      	cbnz	r0, 8005ffe <MX_TIM1_Init+0x6e>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9305      	str	r3, [sp, #20]
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005fb8:	9306      	str	r3, [sp, #24]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fba:	9307      	str	r3, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fbc:	a905      	add	r1, sp, #20
 8005fbe:	481c      	ldr	r0, [pc, #112]	; (8006030 <MX_TIM1_Init+0xa0>)
 8005fc0:	f7fe ff4a 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8005fc4:	bb08      	cbnz	r0, 800600a <MX_TIM1_Init+0x7a>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9302      	str	r3, [sp, #8]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005fce:	2200      	movs	r2, #0
 8005fd0:	9203      	str	r2, [sp, #12]
    sConfigIC.ICFilter = 15;
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005fd6:	a901      	add	r1, sp, #4
 8005fd8:	4815      	ldr	r0, [pc, #84]	; (8006030 <MX_TIM1_Init+0xa0>)
 8005fda:	f7fe fe9f 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005fde:	b9d0      	cbnz	r0, 8006016 <MX_TIM1_Init+0x86>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9301      	str	r3, [sp, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	9202      	str	r2, [sp, #8]
    sConfigIC.ICFilter = 0;
 8005fe8:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005fea:	2204      	movs	r2, #4
 8005fec:	eb0d 0102 	add.w	r1, sp, r2
 8005ff0:	480f      	ldr	r0, [pc, #60]	; (8006030 <MX_TIM1_Init+0xa0>)
 8005ff2:	f7fe fe93 	bl	8004d1c <HAL_TIM_IC_ConfigChannel>
 8005ff6:	b9a0      	cbnz	r0, 8006022 <MX_TIM1_Init+0x92>
}
 8005ff8:	b009      	add	sp, #36	; 0x24
 8005ffa:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 8005ffe:	f240 210e 	movw	r1, #526	; 0x20e
 8006002:	480d      	ldr	r0, [pc, #52]	; (8006038 <MX_TIM1_Init+0xa8>)
 8006004:	f7ff fe3c 	bl	8005c80 <_Error_Handler>
 8006008:	e7d4      	b.n	8005fb4 <MX_TIM1_Init+0x24>
        _Error_Handler(__FILE__, __LINE__);
 800600a:	f240 2116 	movw	r1, #534	; 0x216
 800600e:	480a      	ldr	r0, [pc, #40]	; (8006038 <MX_TIM1_Init+0xa8>)
 8006010:	f7ff fe36 	bl	8005c80 <_Error_Handler>
 8006014:	e7d7      	b.n	8005fc6 <MX_TIM1_Init+0x36>
        _Error_Handler(__FILE__, __LINE__);
 8006016:	f240 211f 	movw	r1, #543	; 0x21f
 800601a:	4807      	ldr	r0, [pc, #28]	; (8006038 <MX_TIM1_Init+0xa8>)
 800601c:	f7ff fe30 	bl	8005c80 <_Error_Handler>
 8006020:	e7de      	b.n	8005fe0 <MX_TIM1_Init+0x50>
        _Error_Handler(__FILE__, __LINE__);
 8006022:	f240 2127 	movw	r1, #551	; 0x227
 8006026:	4804      	ldr	r0, [pc, #16]	; (8006038 <MX_TIM1_Init+0xa8>)
 8006028:	f7ff fe2a 	bl	8005c80 <_Error_Handler>
}
 800602c:	e7e4      	b.n	8005ff8 <MX_TIM1_Init+0x68>
 800602e:	bf00      	nop
 8006030:	20000240 	.word	0x20000240
 8006034:	40012c00 	.word	0x40012c00
 8006038:	08007a8c 	.word	0x08007a8c

0800603c <SystemClock_Config>:
{
 800603c:	b500      	push	{lr}
 800603e:	b09f      	sub	sp, #124	; 0x7c
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006040:	2303      	movs	r3, #3
 8006042:	9314      	str	r3, [sp, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006044:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006048:	9315      	str	r3, [sp, #84]	; 0x54
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800604a:	2300      	movs	r3, #0
 800604c:	9316      	str	r3, [sp, #88]	; 0x58
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800604e:	2301      	movs	r3, #1
 8006050:	9318      	str	r3, [sp, #96]	; 0x60
    RCC_OscInitStruct.HSICalibrationValue = 16;
 8006052:	2310      	movs	r3, #16
 8006054:	9319      	str	r3, [sp, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006056:	2302      	movs	r3, #2
 8006058:	931b      	str	r3, [sp, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800605a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605e:	931c      	str	r3, [sp, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8006060:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8006064:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006066:	a814      	add	r0, sp, #80	; 0x50
 8006068:	f7fd fa3c 	bl	80034e4 <HAL_RCC_OscConfig>
 800606c:	bb68      	cbnz	r0, 80060ca <SystemClock_Config+0x8e>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800606e:	230f      	movs	r3, #15
 8006070:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006072:	2302      	movs	r3, #2
 8006074:	9310      	str	r3, [sp, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006076:	2300      	movs	r3, #0
 8006078:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800607a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800607e:	9212      	str	r2, [sp, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006080:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006082:	2101      	movs	r1, #1
 8006084:	a80f      	add	r0, sp, #60	; 0x3c
 8006086:	f7fd fd6b 	bl	8003b60 <HAL_RCC_ClockConfig>
 800608a:	bb20      	cbnz	r0, 80060d6 <SystemClock_Config+0x9a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800608c:	f241 0322 	movw	r3, #4130	; 0x1022
 8006090:	9300      	str	r3, [sp, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006092:	2300      	movs	r3, #0
 8006094:	9303      	str	r3, [sp, #12]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8006096:	9307      	str	r3, [sp, #28]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8006098:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609a:	4668      	mov	r0, sp
 800609c:	f7fd fe7c 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 80060a0:	b9f8      	cbnz	r0, 80060e2 <SystemClock_Config+0xa6>
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80060a2:	f7fd fe47 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 80060a6:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <SystemClock_Config+0xb4>)
 80060a8:	fba3 3000 	umull	r3, r0, r3, r0
 80060ac:	0980      	lsrs	r0, r0, #6
 80060ae:	f7fc fcd9 	bl	8002a64 <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80060b2:	2004      	movs	r0, #4
 80060b4:	f7fc fcec 	bl	8002a90 <HAL_SYSTICK_CLKSourceConfig>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80060b8:	2200      	movs	r2, #0
 80060ba:	4611      	mov	r1, r2
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	f7fc fc92 	bl	80029e8 <HAL_NVIC_SetPriority>
}
 80060c4:	b01f      	add	sp, #124	; 0x7c
 80060c6:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 80060ca:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80060ce:	4809      	ldr	r0, [pc, #36]	; (80060f4 <SystemClock_Config+0xb8>)
 80060d0:	f7ff fdd6 	bl	8005c80 <_Error_Handler>
 80060d4:	e7cb      	b.n	800606e <SystemClock_Config+0x32>
        _Error_Handler(__FILE__, __LINE__);
 80060d6:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80060da:	4806      	ldr	r0, [pc, #24]	; (80060f4 <SystemClock_Config+0xb8>)
 80060dc:	f7ff fdd0 	bl	8005c80 <_Error_Handler>
 80060e0:	e7d4      	b.n	800608c <SystemClock_Config+0x50>
        _Error_Handler(__FILE__, __LINE__);
 80060e2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80060e6:	4803      	ldr	r0, [pc, #12]	; (80060f4 <SystemClock_Config+0xb8>)
 80060e8:	f7ff fdca 	bl	8005c80 <_Error_Handler>
 80060ec:	e7d9      	b.n	80060a2 <SystemClock_Config+0x66>
 80060ee:	bf00      	nop
 80060f0:	10624dd3 	.word	0x10624dd3
 80060f4:	08007a8c 	.word	0x08007a8c

080060f8 <CAN_FilterConfig>:
{
 80060f8:	b500      	push	{lr}
 80060fa:	b08b      	sub	sp, #44	; 0x2c
    sFilterConfig.FilterNumber = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	9305      	str	r3, [sp, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006100:	9306      	str	r3, [sp, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006102:	2201      	movs	r2, #1
 8006104:	9207      	str	r2, [sp, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8006106:	9300      	str	r3, [sp, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8006108:	9301      	str	r3, [sp, #4]
    sFilterConfig.FilterFIFOAssignment = 0;
 800610a:	9304      	str	r3, [sp, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800610c:	9208      	str	r2, [sp, #32]
    sFilterConfig.BankNumber = 14;
 800610e:	230e      	movs	r3, #14
 8006110:	9309      	str	r3, [sp, #36]	; 0x24
    if( HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK )
 8006112:	4669      	mov	r1, sp
 8006114:	4806      	ldr	r0, [pc, #24]	; (8006130 <CAN_FilterConfig+0x38>)
 8006116:	f7fc fa09 	bl	800252c <HAL_CAN_ConfigFilter>
 800611a:	b910      	cbnz	r0, 8006122 <CAN_FilterConfig+0x2a>
}
 800611c:	b00b      	add	sp, #44	; 0x2c
 800611e:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 8006122:	f240 3171 	movw	r1, #881	; 0x371
 8006126:	4803      	ldr	r0, [pc, #12]	; (8006134 <CAN_FilterConfig+0x3c>)
 8006128:	f7ff fdaa 	bl	8005c80 <_Error_Handler>
}
 800612c:	e7f6      	b.n	800611c <CAN_FilterConfig+0x24>
 800612e:	bf00      	nop
 8006130:	200001bc 	.word	0x200001bc
 8006134:	08007a8c 	.word	0x08007a8c

08006138 <CAN_Send>:
{
 8006138:	b508      	push	{r3, lr}
    hcan.pTxMsg->StdId = id;
 800613a:	4b17      	ldr	r3, [pc, #92]	; (8006198 <CAN_Send+0x60>)
 800613c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613e:	6011      	str	r1, [r2, #0]
    hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8006140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	60ca      	str	r2, [r1, #12]
    hcan.pTxMsg->IDE = CAN_ID_STD;
 8006146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006148:	608a      	str	r2, [r1, #8]
    hcan.pTxMsg->DLC = 8;
 800614a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614c:	2108      	movs	r1, #8
 800614e:	6111      	str	r1, [r2, #16]
    hcan.pTxMsg->Data[0] = data[0];
 8006150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006152:	7801      	ldrb	r1, [r0, #0]
 8006154:	7511      	strb	r1, [r2, #20]
    hcan.pTxMsg->Data[1] = data[1];
 8006156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006158:	7841      	ldrb	r1, [r0, #1]
 800615a:	7551      	strb	r1, [r2, #21]
    hcan.pTxMsg->Data[2] = data[2];
 800615c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615e:	7881      	ldrb	r1, [r0, #2]
 8006160:	7591      	strb	r1, [r2, #22]
    hcan.pTxMsg->Data[3] = data[3];
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	78c1      	ldrb	r1, [r0, #3]
 8006166:	75d1      	strb	r1, [r2, #23]
    hcan.pTxMsg->Data[4] = data[4];
 8006168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616a:	7901      	ldrb	r1, [r0, #4]
 800616c:	7611      	strb	r1, [r2, #24]
    hcan.pTxMsg->Data[5] = data[5];
 800616e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006170:	7941      	ldrb	r1, [r0, #5]
 8006172:	7651      	strb	r1, [r2, #25]
    hcan.pTxMsg->Data[6] = data[6];
 8006174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006176:	7981      	ldrb	r1, [r0, #6]
 8006178:	7691      	strb	r1, [r2, #26]
    hcan.pTxMsg->Data[7] = data[7];
 800617a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617c:	79c1      	ldrb	r1, [r0, #7]
 800617e:	76d1      	strb	r1, [r2, #27]
    if( HAL_CAN_Transmit(&hcan, 10) != HAL_OK )
 8006180:	210a      	movs	r1, #10
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc fb12 	bl	80027ac <HAL_CAN_Transmit>
 8006188:	b900      	cbnz	r0, 800618c <CAN_Send+0x54>
 800618a:	bd08      	pop	{r3, pc}
        Error_Handler();
 800618c:	f240 318d 	movw	r1, #909	; 0x38d
 8006190:	4802      	ldr	r0, [pc, #8]	; (800619c <CAN_Send+0x64>)
 8006192:	f7ff fd75 	bl	8005c80 <_Error_Handler>
}
 8006196:	e7f8      	b.n	800618a <CAN_Send+0x52>
 8006198:	200001bc 	.word	0x200001bc
 800619c:	08007a8c 	.word	0x08007a8c

080061a0 <main>:
{
 80061a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a4:	b09f      	sub	sp, #124	; 0x7c
    HAL_Init();
 80061a6:	f7fc f989 	bl	80024bc <HAL_Init>
    hcan.pTxMsg = &TxMessage;
 80061aa:	4bc9      	ldr	r3, [pc, #804]	; (80064d0 <main+0x330>)
 80061ac:	4ac9      	ldr	r2, [pc, #804]	; (80064d4 <main+0x334>)
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
    hcan.pRxMsg = &RxMessage;
 80061b0:	4ac9      	ldr	r2, [pc, #804]	; (80064d8 <main+0x338>)
 80061b2:	635a      	str	r2, [r3, #52]	; 0x34
    GyroDRDFlag = 1;
 80061b4:	2401      	movs	r4, #1
 80061b6:	4bc9      	ldr	r3, [pc, #804]	; (80064dc <main+0x33c>)
 80061b8:	701c      	strb	r4, [r3, #0]
    SystemClock_Config();
 80061ba:	f7ff ff3f 	bl	800603c <SystemClock_Config>
    MX_GPIO_Init();
 80061be:	f7ff fb4d 	bl	800585c <MX_GPIO_Init>
    MX_I2C1_Init();
 80061c2:	f7ff fd6b 	bl	8005c9c <MX_I2C1_Init>
    MX_SPI1_Init();
 80061c6:	f7ff fda1 	bl	8005d0c <MX_SPI1_Init>
    MX_TIM2_Init();
 80061ca:	f7ff fdcb 	bl	8005d64 <MX_TIM2_Init>
    MX_USART2_UART_Init();
 80061ce:	f7ff fe1b 	bl	8005e08 <MX_USART2_UART_Init>
    MX_TIM3_Init();
 80061d2:	f7ff fe63 	bl	8005e9c <MX_TIM3_Init>
    MX_CAN_Init();
 80061d6:	f7ff feb5 	bl	8005f44 <MX_CAN_Init>
    MX_TIM1_Init();
 80061da:	f7ff fed9 	bl	8005f90 <MX_TIM1_Init>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80061de:	4dc0      	ldr	r5, [pc, #768]	; (80064e0 <main+0x340>)
 80061e0:	2100      	movs	r1, #0
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7fe fe09 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80061e8:	2104      	movs	r1, #4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fe fe05 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80061f0:	4dbc      	ldr	r5, [pc, #752]	; (80064e4 <main+0x344>)
 80061f2:	2100      	movs	r1, #0
 80061f4:	4628      	mov	r0, r5
 80061f6:	f7fe fe00 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80061fa:	2104      	movs	r1, #4
 80061fc:	4628      	mov	r0, r5
 80061fe:	f7fe fdfc 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8006202:	4db9      	ldr	r5, [pc, #740]	; (80064e8 <main+0x348>)
 8006204:	2100      	movs	r1, #0
 8006206:	4628      	mov	r0, r5
 8006208:	f7fe fdf7 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800620c:	2104      	movs	r1, #4
 800620e:	4628      	mov	r0, r5
 8006210:	f7fe fdf3 	bl	8004dfa <HAL_TIM_IC_Start_IT>
    CAN_FilterConfig();
 8006214:	f7ff ff70 	bl	80060f8 <CAN_FilterConfig>
    BSP_LED_Init(LED10);
 8006218:	2007      	movs	r0, #7
 800621a:	f000 f9bb 	bl	8006594 <BSP_LED_Init>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800621e:	4621      	mov	r1, r4
 8006220:	2000      	movs	r0, #0
 8006222:	f000 fa6b 	bl	80066fc <BSP_PB_Init>
    Demo_GyroConfig();
 8006226:	f7fb fa13 	bl	8001650 <Demo_GyroConfig>
    UpdateGyroBias();
 800622a:	f7fb fb8d 	bl	8001948 <UpdateGyroBias>
    Demo_CompassConfig();
 800622e:	f7fb fa63 	bl	80016f8 <Demo_CompassConfig>
    GyroExtiConfig();
 8006232:	f7fb fbd7 	bl	80019e4 <GyroExtiConfig>
    readAllSensors(GyroTempBuffer, AccTempBuffer, MagTempBuffer);
 8006236:	4aad      	ldr	r2, [pc, #692]	; (80064ec <main+0x34c>)
 8006238:	49ad      	ldr	r1, [pc, #692]	; (80064f0 <main+0x350>)
 800623a:	48ae      	ldr	r0, [pc, #696]	; (80064f4 <main+0x354>)
 800623c:	f7fb f9ee 	bl	800161c <readAllSensors>
    for(int i = 0; i < 8; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	e007      	b.n	8006254 <main+0xb4>
        CAN_US_mes[i] = 0;
 8006244:	aa1e      	add	r2, sp, #120	; 0x78
 8006246:	441a      	add	r2, r3
 8006248:	2100      	movs	r1, #0
 800624a:	f802 1c08 	strb.w	r1, [r2, #-8]
        CAN_OMx_mes[i] = 0;
 800624e:	f802 1c10 	strb.w	r1, [r2, #-16]
    for(int i = 0; i < 8; i++)
 8006252:	3301      	adds	r3, #1
 8006254:	2b07      	cmp	r3, #7
 8006256:	ddf5      	ble.n	8006244 <main+0xa4>
 8006258:	e004      	b.n	8006264 <main+0xc4>
        if (AHRS_Flag)
 800625a:	4ba7      	ldr	r3, [pc, #668]	; (80064f8 <main+0x358>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 80b9 	bne.w	80063d6 <main+0x236>
        if (US_Flag==1)
 8006264:	4ba5      	ldr	r3, [pc, #660]	; (80064fc <main+0x35c>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	d1f5      	bne.n	800625a <main+0xba>
            US_Flag=0;
 800626e:	2700      	movs	r7, #0
 8006270:	4ba2      	ldr	r3, [pc, #648]	; (80064fc <main+0x35c>)
 8006272:	701f      	strb	r7, [r3, #0]
            HAL_GPIO_WritePin( US_AV_G_Trig_GPIO_Port, US_AV_G_Trig_Pin, GPIO_PIN_SET); //PC0	: US_AV_G_Trig � 1
 8006274:	4ca2      	ldr	r4, [pc, #648]	; (8006500 <main+0x360>)
 8006276:	2201      	movs	r2, #1
 8006278:	4611      	mov	r1, r2
 800627a:	4620      	mov	r0, r4
 800627c:	f7fc fd97 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AV_D_Trig_GPIO_Port, US_AV_D_Trig_Pin, GPIO_PIN_SET); //PC2 : US_AV_D_Trig � 1
 8006280:	2201      	movs	r2, #1
 8006282:	2104      	movs	r1, #4
 8006284:	4620      	mov	r0, r4
 8006286:	f7fc fd92 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AR_C_Trig_GPIO_Port, US_AR_C_Trig_Pin, GPIO_PIN_SET); //PC4 : US_AR_C_Trig � 1
 800628a:	2201      	movs	r2, #1
 800628c:	2110      	movs	r1, #16
 800628e:	4620      	mov	r0, r4
 8006290:	f7fc fd8d 	bl	8002dae <HAL_GPIO_WritePin>
            SYS_MicroDelay(10); // 10µs
 8006294:	200a      	movs	r0, #10
 8006296:	f7ff fcad 	bl	8005bf4 <SYS_MicroDelay>
            HAL_GPIO_WritePin( US_AV_G_Trig_GPIO_Port, US_AV_G_Trig_Pin, GPIO_PIN_RESET); //PC0	: US_AV_G_Trig � 0
 800629a:	463a      	mov	r2, r7
 800629c:	2101      	movs	r1, #1
 800629e:	4620      	mov	r0, r4
 80062a0:	f7fc fd85 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AV_D_Trig_GPIO_Port, US_AV_D_Trig_Pin, GPIO_PIN_RESET); //PC2 : US_AV_D_Trig � 0
 80062a4:	463a      	mov	r2, r7
 80062a6:	2104      	movs	r1, #4
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7fc fd80 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AR_C_Trig_GPIO_Port, US_AR_C_Trig_Pin, GPIO_PIN_RESET); //PC4 : US_AR_C_Trig � 0
 80062ae:	463a      	mov	r2, r7
 80062b0:	2110      	movs	r1, #16
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7fc fd7b 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_Delay(30); // 30ms
 80062b8:	201e      	movs	r0, #30
 80062ba:	f7fc f923 	bl	8002504 <HAL_Delay>
            US_AV_G_mes = US_G_Echo/58;
 80062be:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8006538 <main+0x398>
 80062c2:	f8d9 3000 	ldr.w	r3, [r9]
 80062c6:	4d8f      	ldr	r5, [pc, #572]	; (8006504 <main+0x364>)
 80062c8:	fb85 2003 	smull	r2, r0, r5, r3
 80062cc:	4418      	add	r0, r3
 80062ce:	17db      	asrs	r3, r3, #31
 80062d0:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 80062d4:	4b8c      	ldr	r3, [pc, #560]	; (8006508 <main+0x368>)
 80062d6:	6018      	str	r0, [r3, #0]
            US_AV_D_mes = US_D_Echo/58;
 80062d8:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800653c <main+0x39c>
 80062dc:	f8d8 3000 	ldr.w	r3, [r8]
 80062e0:	fb85 2103 	smull	r2, r1, r5, r3
 80062e4:	4419      	add	r1, r3
 80062e6:	17db      	asrs	r3, r3, #31
 80062e8:	ebc3 1161 	rsb	r1, r3, r1, asr #5
 80062ec:	4b87      	ldr	r3, [pc, #540]	; (800650c <main+0x36c>)
 80062ee:	6019      	str	r1, [r3, #0]
            US_AR_C_mes = US_C_Echo/58;
 80062f0:	4e87      	ldr	r6, [pc, #540]	; (8006510 <main+0x370>)
 80062f2:	6832      	ldr	r2, [r6, #0]
 80062f4:	fb85 e302 	smull	lr, r3, r5, r2
 80062f8:	eb03 0e02 	add.w	lr, r3, r2
 80062fc:	17d3      	asrs	r3, r2, #31
 80062fe:	ebc3 136e 	rsb	r3, r3, lr, asr #5
 8006302:	4a84      	ldr	r2, [pc, #528]	; (8006514 <main+0x374>)
 8006304:	6013      	str	r3, [r2, #0]
            CAN_US_mes[0] = (US_AV_G_mes >> 8) & 0xFF;
 8006306:	1202      	asrs	r2, r0, #8
 8006308:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
			CAN_US_mes[1] = US_AV_G_mes & 0xFF;
 800630c:	f88d 0071 	strb.w	r0, [sp, #113]	; 0x71
			CAN_US_mes[2] = (US_AV_D_mes >> 8) & 0xFF;
 8006310:	120a      	asrs	r2, r1, #8
 8006312:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
			CAN_US_mes[3] = US_AV_D_mes & 0xFF;
 8006316:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
			CAN_US_mes[4] = (US_AR_C_mes >> 8) & 0xFF;
 800631a:	121a      	asrs	r2, r3, #8
 800631c:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
			CAN_US_mes[5] = US_AR_C_mes & 0xFF;
 8006320:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
			CAN_Send(CAN_US_mes, CAN_US1_id);
 8006324:	4639      	mov	r1, r7
 8006326:	a81c      	add	r0, sp, #112	; 0x70
 8006328:	f7ff ff06 	bl	8006138 <CAN_Send>
            HAL_GPIO_WritePin( US_AV_C_Trig_GPIO_Port, US_AV_C_Trig_Pin, GPIO_PIN_SET); // PC1 : US_AV_C_Trig � 1
 800632c:	2201      	movs	r2, #1
 800632e:	2102      	movs	r1, #2
 8006330:	4620      	mov	r0, r4
 8006332:	f7fc fd3c 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AR_G_Trig_GPIO_Port, US_AR_G_Trig_Pin, GPIO_PIN_SET); // PC3 : US_AR_G_Trig � 1
 8006336:	2201      	movs	r2, #1
 8006338:	2108      	movs	r1, #8
 800633a:	4620      	mov	r0, r4
 800633c:	f7fc fd37 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AR_D_Trig_GPIO_Port, US_AR_D_Trig_Pin, GPIO_PIN_SET); // PC5 : US_AR_D_Trig � 1
 8006340:	2201      	movs	r2, #1
 8006342:	2120      	movs	r1, #32
 8006344:	4620      	mov	r0, r4
 8006346:	f7fc fd32 	bl	8002dae <HAL_GPIO_WritePin>
            SYS_MicroDelay(10); // 10µs
 800634a:	200a      	movs	r0, #10
 800634c:	f7ff fc52 	bl	8005bf4 <SYS_MicroDelay>
            HAL_GPIO_WritePin( US_AR_D_Trig_GPIO_Port, US_AR_D_Trig_Pin, GPIO_PIN_RESET); // PC1 : US_AV_C_Trig � 0
 8006350:	463a      	mov	r2, r7
 8006352:	2120      	movs	r1, #32
 8006354:	4620      	mov	r0, r4
 8006356:	f7fc fd2a 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AR_G_Trig_GPIO_Port, US_AR_G_Trig_Pin, GPIO_PIN_RESET); // PC3 : US_AR_G_Trig � 0
 800635a:	463a      	mov	r2, r7
 800635c:	2108      	movs	r1, #8
 800635e:	4620      	mov	r0, r4
 8006360:	f7fc fd25 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( US_AV_C_Trig_GPIO_Port, US_AV_C_Trig_Pin, GPIO_PIN_RESET); // PC5 : US_AR_D_Trig � 0
 8006364:	463a      	mov	r2, r7
 8006366:	2102      	movs	r1, #2
 8006368:	4620      	mov	r0, r4
 800636a:	f7fc fd20 	bl	8002dae <HAL_GPIO_WritePin>
            HAL_Delay(30); // 30ms
 800636e:	201e      	movs	r0, #30
 8006370:	f7fc f8c8 	bl	8002504 <HAL_Delay>
            US_AR_G_mes = US_G_Echo/58;
 8006374:	f8d9 3000 	ldr.w	r3, [r9]
 8006378:	fb85 2103 	smull	r2, r1, r5, r3
 800637c:	4419      	add	r1, r3
 800637e:	17db      	asrs	r3, r3, #31
 8006380:	ebc3 1161 	rsb	r1, r3, r1, asr #5
 8006384:	4b64      	ldr	r3, [pc, #400]	; (8006518 <main+0x378>)
 8006386:	6019      	str	r1, [r3, #0]
            US_AR_D_mes = US_D_Echo/58;
 8006388:	f8d8 3000 	ldr.w	r3, [r8]
 800638c:	fb85 0203 	smull	r0, r2, r5, r3
 8006390:	441a      	add	r2, r3
 8006392:	17db      	asrs	r3, r3, #31
 8006394:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 8006398:	4b60      	ldr	r3, [pc, #384]	; (800651c <main+0x37c>)
 800639a:	601a      	str	r2, [r3, #0]
            US_AV_C_mes = US_C_Echo/58;
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	fb85 0503 	smull	r0, r5, r5, r3
 80063a2:	441d      	add	r5, r3
 80063a4:	17db      	asrs	r3, r3, #31
 80063a6:	ebc3 1565 	rsb	r5, r3, r5, asr #5
 80063aa:	4b5d      	ldr	r3, [pc, #372]	; (8006520 <main+0x380>)
 80063ac:	601d      	str	r5, [r3, #0]
            CAN_US_mes[0] = (US_AR_G_mes >> 8) & 0xFF;
 80063ae:	120b      	asrs	r3, r1, #8
 80063b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
			CAN_US_mes[1] = US_AR_G_mes & 0xFF;
 80063b4:	f88d 1071 	strb.w	r1, [sp, #113]	; 0x71
			CAN_US_mes[2] = (US_AR_D_mes >> 8) & 0xFF;
 80063b8:	1213      	asrs	r3, r2, #8
 80063ba:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
			CAN_US_mes[3] = US_AR_D_mes & 0xFF;
 80063be:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
			CAN_US_mes[4] = (US_AV_C_mes >> 8) & 0xFF;
 80063c2:	122b      	asrs	r3, r5, #8
 80063c4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
			CAN_US_mes[5] = US_AV_C_mes & 0xFF;
 80063c8:	f88d 5075 	strb.w	r5, [sp, #117]	; 0x75
			CAN_Send(CAN_US_mes, CAN_US2_id);
 80063cc:	2101      	movs	r1, #1
 80063ce:	a81c      	add	r0, sp, #112	; 0x70
 80063d0:	f7ff feb2 	bl	8006138 <CAN_Send>
 80063d4:	e741      	b.n	800625a <main+0xba>
            AHRS_Flag = 0;
 80063d6:	2200      	movs	r2, #0
 80063d8:	4b47      	ldr	r3, [pc, #284]	; (80064f8 <main+0x358>)
 80063da:	701a      	strb	r2, [r3, #0]
            getEulerAngles(eulerBuffer);
 80063dc:	4c51      	ldr	r4, [pc, #324]	; (8006524 <main+0x384>)
 80063de:	4620      	mov	r0, r4
 80063e0:	f7fb fc2e 	bl	8001c40 <getEulerAngles>
            sprintf (bufferMsg, "Axe X(Pitch): %d\n\r",(int)eulerBuffer[0]);
 80063e4:	edd4 7a00 	vldr	s15, [r4]
 80063e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ec:	ee17 2a90 	vmov	r2, s15
 80063f0:	494d      	ldr	r1, [pc, #308]	; (8006528 <main+0x388>)
 80063f2:	a801      	add	r0, sp, #4
 80063f4:	f000 fc93 	bl	8006d1e <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)bufferMsg, strlen(bufferMsg), 1000);
 80063f8:	a801      	add	r0, sp, #4
 80063fa:	f7f9 fee5 	bl	80001c8 <strlen>
 80063fe:	4d4b      	ldr	r5, [pc, #300]	; (800652c <main+0x38c>)
 8006400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006404:	b282      	uxth	r2, r0
 8006406:	a901      	add	r1, sp, #4
 8006408:	4628      	mov	r0, r5
 800640a:	f7fe ff54 	bl	80052b6 <HAL_UART_Transmit>
            sprintf (bufferMsg, "Axe Y(Roll): %d\n\r",(int)eulerBuffer[2]);
 800640e:	edd4 7a02 	vldr	s15, [r4, #8]
 8006412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006416:	ee17 2a90 	vmov	r2, s15
 800641a:	4945      	ldr	r1, [pc, #276]	; (8006530 <main+0x390>)
 800641c:	a801      	add	r0, sp, #4
 800641e:	f000 fc7e 	bl	8006d1e <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)bufferMsg, strlen(bufferMsg), 1000);
 8006422:	a801      	add	r0, sp, #4
 8006424:	f7f9 fed0 	bl	80001c8 <strlen>
 8006428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800642c:	b282      	uxth	r2, r0
 800642e:	a901      	add	r1, sp, #4
 8006430:	4628      	mov	r0, r5
 8006432:	f7fe ff40 	bl	80052b6 <HAL_UART_Transmit>
            sprintf (bufferMsg, "Axe Z(Yaw): %d\n\r\n\r",(int)eulerBuffer[1]);
 8006436:	edd4 7a01 	vldr	s15, [r4, #4]
 800643a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800643e:	ee17 2a90 	vmov	r2, s15
 8006442:	493c      	ldr	r1, [pc, #240]	; (8006534 <main+0x394>)
 8006444:	a801      	add	r0, sp, #4
 8006446:	f000 fc6a 	bl	8006d1e <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)bufferMsg, strlen(bufferMsg), 1000);
 800644a:	a801      	add	r0, sp, #4
 800644c:	f7f9 febc 	bl	80001c8 <strlen>
 8006450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006454:	b282      	uxth	r2, r0
 8006456:	a901      	add	r1, sp, #4
 8006458:	4628      	mov	r0, r5
 800645a:	f7fe ff2c 	bl	80052b6 <HAL_UART_Transmit>
            CAN_AHRS_mes.val = eulerBuffer[0];
 800645e:	6823      	ldr	r3, [r4, #0]
            CAN_OMx_mes[0] = CAN_AHRS_mes.buffer[3];
 8006460:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8006464:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
            CAN_OMx_mes[1] = CAN_AHRS_mes.buffer[2];
 8006468:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800646c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
            CAN_OMx_mes[2] = CAN_AHRS_mes.buffer[1];
 8006470:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006474:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
            CAN_OMx_mes[3] = CAN_AHRS_mes.buffer[0];
 8006478:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
            CAN_AHRS_mes.val = eulerBuffer[1];
 800647c:	6863      	ldr	r3, [r4, #4]
            CAN_OMx_mes[4] = CAN_AHRS_mes.buffer[3];
 800647e:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8006482:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            CAN_OMx_mes[5] = CAN_AHRS_mes.buffer[2];
 8006486:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800648a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            CAN_OMx_mes[6] = CAN_AHRS_mes.buffer[1];
 800648e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006492:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            CAN_OMx_mes[7] = CAN_AHRS_mes.buffer[0];
 8006496:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
            CAN_Send(CAN_OMx_mes, CAN_OM1_id); // envoi du yaw et pitch
 800649a:	f240 1101 	movw	r1, #257	; 0x101
 800649e:	a81a      	add	r0, sp, #104	; 0x68
 80064a0:	f7ff fe4a 	bl	8006138 <CAN_Send>
            CAN_AHRS_mes.val = eulerBuffer[2];
 80064a4:	68a3      	ldr	r3, [r4, #8]
            CAN_OMx_mes[0] = CAN_AHRS_mes.buffer[3];
 80064a6:	f3c3 6207 	ubfx	r2, r3, #24, #8
 80064aa:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
			CAN_OMx_mes[1] = CAN_AHRS_mes.buffer[2];
 80064ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80064b2:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
            CAN_OMx_mes[2] = CAN_AHRS_mes.buffer[1];
 80064b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80064ba:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
            CAN_OMx_mes[3] = CAN_AHRS_mes.buffer[0];
 80064be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
            CAN_Send(CAN_OMx_mes, CAN_OM2_id);
 80064c2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80064c6:	a81a      	add	r0, sp, #104	; 0x68
 80064c8:	f7ff fe36 	bl	8006138 <CAN_Send>
 80064cc:	e6ca      	b.n	8006264 <main+0xc4>
 80064ce:	bf00      	nop
 80064d0:	200001bc 	.word	0x200001bc
 80064d4:	200003a0 	.word	0x200003a0
 80064d8:	200003bc 	.word	0x200003bc
 80064dc:	2000010c 	.word	0x2000010c
 80064e0:	20000240 	.word	0x20000240
 80064e4:	200002f0 	.word	0x200002f0
 80064e8:	20000200 	.word	0x20000200
 80064ec:	20000128 	.word	0x20000128
 80064f0:	200000ec 	.word	0x200000ec
 80064f4:	20000114 	.word	0x20000114
 80064f8:	20000132 	.word	0x20000132
 80064fc:	20000154 	.word	0x20000154
 8006500:	48000800 	.word	0x48000800
 8006504:	8d3dcb09 	.word	0x8d3dcb09
 8006508:	20000148 	.word	0x20000148
 800650c:	20000144 	.word	0x20000144
 8006510:	2000014c 	.word	0x2000014c
 8006514:	20000134 	.word	0x20000134
 8006518:	2000013c 	.word	0x2000013c
 800651c:	20000138 	.word	0x20000138
 8006520:	20000140 	.word	0x20000140
 8006524:	20000280 	.word	0x20000280
 8006528:	08007aac 	.word	0x08007aac
 800652c:	20000330 	.word	0x20000330
 8006530:	08007ac0 	.word	0x08007ac0
 8006534:	08007ad4 	.word	0x08007ad4
 8006538:	20000158 	.word	0x20000158
 800653c:	20000150 	.word	0x20000150

08006540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006544:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006546:	e003      	b.n	8006550 <LoopCopyDataInit>

08006548 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800654a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800654c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800654e:	3104      	adds	r1, #4

08006550 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006550:	480b      	ldr	r0, [pc, #44]	; (8006580 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006552:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006554:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006556:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006558:	d3f6      	bcc.n	8006548 <CopyDataInit>
	ldr	r2, =_sbss
 800655a:	4a0b      	ldr	r2, [pc, #44]	; (8006588 <LoopForever+0x12>)
	b	LoopFillZerobss
 800655c:	e002      	b.n	8006564 <LoopFillZerobss>

0800655e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800655e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006560:	f842 3b04 	str.w	r3, [r2], #4

08006564 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <LoopForever+0x16>)
	cmp	r2, r3
 8006566:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006568:	d3f9      	bcc.n	800655e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800656a:	f000 facf 	bl	8006b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800656e:	f000 fc07 	bl	8006d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006572:	f7ff fe15 	bl	80061a0 <main>

08006576 <LoopForever>:

LoopForever:
    b LoopForever
 8006576:	e7fe      	b.n	8006576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006578:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800657c:	08007b68 	.word	0x08007b68
	ldr	r0, =_sdata
 8006580:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006584:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 8006588:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 800658c:	200003e4 	.word	0x200003e4

08006590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006590:	e7fe      	b.n	8006590 <ADC1_2_IRQHandler>
	...

08006594 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006598:	4604      	mov	r4, r0
 800659a:	b1c0      	cbz	r0, 80065ce <BSP_LED_Init+0x3a>
 800659c:	2801      	cmp	r0, #1
 800659e:	d037      	beq.n	8006610 <BSP_LED_Init+0x7c>
 80065a0:	2802      	cmp	r0, #2
 80065a2:	d040      	beq.n	8006626 <BSP_LED_Init+0x92>
 80065a4:	2803      	cmp	r0, #3
 80065a6:	d049      	beq.n	800663c <BSP_LED_Init+0xa8>
 80065a8:	2804      	cmp	r0, #4
 80065aa:	d052      	beq.n	8006652 <BSP_LED_Init+0xbe>
 80065ac:	2805      	cmp	r0, #5
 80065ae:	d05b      	beq.n	8006668 <BSP_LED_Init+0xd4>
 80065b0:	2806      	cmp	r0, #6
 80065b2:	d064      	beq.n	800667e <BSP_LED_Init+0xea>
 80065b4:	2807      	cmp	r0, #7
 80065b6:	d114      	bne.n	80065e2 <BSP_LED_Init+0x4e>
 80065b8:	4b36      	ldr	r3, [pc, #216]	; (8006694 <BSP_LED_Init+0x100>)
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80065c0:	615a      	str	r2, [r3, #20]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c8:	9308      	str	r3, [sp, #32]
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	e009      	b.n	80065e2 <BSP_LED_Init+0x4e>
 80065ce:	4b31      	ldr	r3, [pc, #196]	; (8006694 <BSP_LED_Init+0x100>)
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80065d6:	615a      	str	r2, [r3, #20]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80065e2:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <BSP_LED_Init+0x104>)
 80065e4:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
 80065e8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065ea:	2301      	movs	r3, #1
 80065ec:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065f0:	2303      	movs	r3, #3
 80065f2:	930c      	str	r3, [sp, #48]	; 0x30
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80065f4:	4d29      	ldr	r5, [pc, #164]	; (800669c <BSP_LED_Init+0x108>)
 80065f6:	a909      	add	r1, sp, #36	; 0x24
 80065f8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80065fc:	f7fc fa82 	bl	8002b04 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8006600:	2200      	movs	r2, #0
 8006602:	4631      	mov	r1, r6
 8006604:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006608:	f7fc fbd1 	bl	8002dae <HAL_GPIO_WritePin>
}
 800660c:	b00e      	add	sp, #56	; 0x38
 800660e:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8006610:	4b20      	ldr	r3, [pc, #128]	; (8006694 <BSP_LED_Init+0x100>)
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006618:	615a      	str	r2, [r3, #20]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006620:	9302      	str	r3, [sp, #8]
 8006622:	9b02      	ldr	r3, [sp, #8]
 8006624:	e7dd      	b.n	80065e2 <BSP_LED_Init+0x4e>
 8006626:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <BSP_LED_Init+0x100>)
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800662e:	615a      	str	r2, [r3, #20]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	e7d2      	b.n	80065e2 <BSP_LED_Init+0x4e>
 800663c:	4b15      	ldr	r3, [pc, #84]	; (8006694 <BSP_LED_Init+0x100>)
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006644:	615a      	str	r2, [r3, #20]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	e7c7      	b.n	80065e2 <BSP_LED_Init+0x4e>
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <BSP_LED_Init+0x100>)
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800665a:	615a      	str	r2, [r3, #20]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	e7bc      	b.n	80065e2 <BSP_LED_Init+0x4e>
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <BSP_LED_Init+0x100>)
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006670:	615a      	str	r2, [r3, #20]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006678:	9306      	str	r3, [sp, #24]
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	e7b1      	b.n	80065e2 <BSP_LED_Init+0x4e>
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <BSP_LED_Init+0x100>)
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006686:	615a      	str	r2, [r3, #20]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800668e:	9307      	str	r3, [sp, #28]
 8006690:	9b07      	ldr	r3, [sp, #28]
 8006692:	e7a6      	b.n	80065e2 <BSP_LED_Init+0x4e>
 8006694:	40021000 	.word	0x40021000
 8006698:	08007ae8 	.word	0x08007ae8
 800669c:	2000002c 	.word	0x2000002c

080066a0 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80066a0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80066a2:	2201      	movs	r2, #1
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <BSP_LED_On+0x18>)
 80066a6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80066aa:	4b04      	ldr	r3, [pc, #16]	; (80066bc <BSP_LED_On+0x1c>)
 80066ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80066b0:	f7fc fb7d 	bl	8002dae <HAL_GPIO_WritePin>
 80066b4:	bd08      	pop	{r3, pc}
 80066b6:	bf00      	nop
 80066b8:	08007ae8 	.word	0x08007ae8
 80066bc:	2000002c 	.word	0x2000002c

080066c0 <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80066c0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80066c2:	2200      	movs	r2, #0
 80066c4:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <BSP_LED_Off+0x18>)
 80066c6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80066ca:	4b04      	ldr	r3, [pc, #16]	; (80066dc <BSP_LED_Off+0x1c>)
 80066cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80066d0:	f7fc fb6d 	bl	8002dae <HAL_GPIO_WritePin>
 80066d4:	bd08      	pop	{r3, pc}
 80066d6:	bf00      	nop
 80066d8:	08007ae8 	.word	0x08007ae8
 80066dc:	2000002c 	.word	0x2000002c

080066e0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80066e0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <BSP_LED_Toggle+0x14>)
 80066e4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <BSP_LED_Toggle+0x18>)
 80066ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80066ee:	f7fc fb63 	bl	8002db8 <HAL_GPIO_TogglePin>
 80066f2:	bd08      	pop	{r3, pc}
 80066f4:	08007ae8 	.word	0x08007ae8
 80066f8:	2000002c 	.word	0x2000002c

080066fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80066fc:	b530      	push	{r4, r5, lr}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	460c      	mov	r4, r1
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006702:	4605      	mov	r5, r0
 8006704:	b948      	cbnz	r0, 800671a <BSP_PB_Init+0x1e>
 8006706:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <BSP_PB_Init+0x88>)
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800670e:	615a      	str	r2, [r3, #20]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <BSP_PB_Init+0x88>)
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	619a      	str	r2, [r3, #24]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	9b02      	ldr	r3, [sp, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800672e:	b11c      	cbz	r4, 8006738 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8006730:	2c01      	cmp	r4, #1
 8006732:	d010      	beq.n	8006756 <BSP_PB_Init+0x5a>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8006734:	b009      	add	sp, #36	; 0x24
 8006736:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006738:	2301      	movs	r3, #1
 800673a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800673c:	2300      	movs	r3, #0
 800673e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006740:	2302      	movs	r3, #2
 8006742:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006744:	2303      	movs	r3, #3
 8006746:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006748:	a903      	add	r1, sp, #12
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <BSP_PB_Init+0x8c>)
 800674c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006750:	f7fc f9d8 	bl	8002b04 <HAL_GPIO_Init>
 8006754:	e7ec      	b.n	8006730 <BSP_PB_Init+0x34>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006756:	2301      	movs	r3, #1
 8006758:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675a:	2400      	movs	r4, #0
 800675c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800675e:	2303      	movs	r3, #3
 8006760:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <BSP_PB_Init+0x90>)
 8006764:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006766:	a903      	add	r1, sp, #12
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <BSP_PB_Init+0x8c>)
 800676a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800676e:	f7fc f9c9 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8006772:	4622      	mov	r2, r4
 8006774:	210f      	movs	r1, #15
 8006776:	2006      	movs	r0, #6
 8006778:	f7fc f936 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800677c:	2006      	movs	r0, #6
 800677e:	f7fc f965 	bl	8002a4c <HAL_NVIC_EnableIRQ>
}
 8006782:	e7d7      	b.n	8006734 <BSP_PB_Init+0x38>
 8006784:	40021000 	.word	0x40021000
 8006788:	20000028 	.word	0x20000028
 800678c:	10110000 	.word	0x10110000

08006790 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006790:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006792:	2101      	movs	r1, #1
 8006794:	4b02      	ldr	r3, [pc, #8]	; (80067a0 <BSP_PB_GetState+0x10>)
 8006796:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800679a:	f7fc fb01 	bl	8002da0 <HAL_GPIO_ReadPin>
}
 800679e:	bd08      	pop	{r3, pc}
 80067a0:	20000028 	.word	0x20000028

080067a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067a4:	b500      	push	{lr}
 80067a6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067a8:	4b1c      	ldr	r3, [pc, #112]	; (800681c <HAL_MspInit+0x78>)
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	619a      	str	r2, [r3, #24]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80067bc:	2007      	movs	r0, #7
 80067be:	f7fc f901 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	4611      	mov	r1, r2
 80067c6:	f06f 000b 	mvn.w	r0, #11
 80067ca:	f7fc f90d 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80067ce:	2200      	movs	r2, #0
 80067d0:	4611      	mov	r1, r2
 80067d2:	f06f 000a 	mvn.w	r0, #10
 80067d6:	f7fc f907 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80067da:	2200      	movs	r2, #0
 80067dc:	4611      	mov	r1, r2
 80067de:	f06f 0009 	mvn.w	r0, #9
 80067e2:	f7fc f901 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80067e6:	2200      	movs	r2, #0
 80067e8:	4611      	mov	r1, r2
 80067ea:	f06f 0004 	mvn.w	r0, #4
 80067ee:	f7fc f8fb 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	4611      	mov	r1, r2
 80067f6:	f06f 0003 	mvn.w	r0, #3
 80067fa:	f7fc f8f5 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80067fe:	2200      	movs	r2, #0
 8006800:	4611      	mov	r1, r2
 8006802:	f06f 0001 	mvn.w	r0, #1
 8006806:	f7fc f8ef 	bl	80029e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800680a:	2200      	movs	r2, #0
 800680c:	4611      	mov	r1, r2
 800680e:	f04f 30ff 	mov.w	r0, #4294967295
 8006812:	f7fc f8e9 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006816:	b003      	add	sp, #12
 8006818:	f85d fb04 	ldr.w	pc, [sp], #4
 800681c:	40021000 	.word	0x40021000

08006820 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 8006820:	6802      	ldr	r2, [r0, #0]
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <HAL_CAN_MspInit+0x44>)
 8006824:	429a      	cmp	r2, r3
 8006826:	d000      	beq.n	800682a <HAL_CAN_MspInit+0xa>
 8006828:	4770      	bx	lr
{
 800682a:	b500      	push	{lr}
 800682c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800682e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006838:	61da      	str	r2, [r3, #28]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	9b00      	ldr	r3, [sp, #0]
  
    /**CAN GPIO Configuration    
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006844:	2303      	movs	r3, #3
 8006846:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006848:	2202      	movs	r2, #2
 800684a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684c:	2200      	movs	r2, #0
 800684e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006850:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8006852:	2307      	movs	r3, #7
 8006854:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006856:	a901      	add	r1, sp, #4
 8006858:	4803      	ldr	r0, [pc, #12]	; (8006868 <HAL_CAN_MspInit+0x48>)
 800685a:	f7fc f953 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800685e:	b007      	add	sp, #28
 8006860:	f85d fb04 	ldr.w	pc, [sp], #4
 8006864:	40006400 	.word	0x40006400
 8006868:	48000c00 	.word	0x48000c00

0800686c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800686c:	6802      	ldr	r2, [r0, #0]
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_I2C_MspInit+0x48>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d000      	beq.n	8006876 <HAL_I2C_MspInit+0xa>
 8006874:	4770      	bx	lr
{
 8006876:	b500      	push	{lr}
 8006878:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800687a:	23c0      	movs	r3, #192	; 0xc0
 800687c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800687e:	2312      	movs	r3, #18
 8006880:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006882:	2301      	movs	r3, #1
 8006884:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006886:	2303      	movs	r3, #3
 8006888:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800688a:	2304      	movs	r3, #4
 800688c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800688e:	eb0d 0103 	add.w	r1, sp, r3
 8006892:	4809      	ldr	r0, [pc, #36]	; (80068b8 <HAL_I2C_MspInit+0x4c>)
 8006894:	f7fc f936 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006898:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_I2C_MspInit+0x50>)
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80068a0:	61da      	str	r2, [r3, #28]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80068ac:	b007      	add	sp, #28
 80068ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80068b2:	bf00      	nop
 80068b4:	40005400 	.word	0x40005400
 80068b8:	48000400 	.word	0x48000400
 80068bc:	40021000 	.word	0x40021000

080068c0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80068c0:	b508      	push	{r3, lr}

  if(hi2c->Instance==I2C1)
 80068c2:	6802      	ldr	r2, [r0, #0]
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <HAL_I2C_MspDeInit+0x20>)
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d000      	beq.n	80068cc <HAL_I2C_MspDeInit+0xc>
 80068ca:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80068cc:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <HAL_I2C_MspDeInit+0x24>)
 80068ce:	69d3      	ldr	r3, [r2, #28]
 80068d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068d4:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, I2C1_SCL_Pin|I2C1_SDA_Pin);
 80068d6:	21c0      	movs	r1, #192	; 0xc0
 80068d8:	4803      	ldr	r0, [pc, #12]	; (80068e8 <HAL_I2C_MspDeInit+0x28>)
 80068da:	f7fc f9e3 	bl	8002ca4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80068de:	e7f4      	b.n	80068ca <HAL_I2C_MspDeInit+0xa>
 80068e0:	40005400 	.word	0x40005400
 80068e4:	40021000 	.word	0x40021000
 80068e8:	48000400 	.word	0x48000400

080068ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80068ec:	6802      	ldr	r2, [r0, #0]
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <HAL_SPI_MspInit+0x48>)
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d000      	beq.n	80068f6 <HAL_SPI_MspInit+0xa>
 80068f4:	4770      	bx	lr
{
 80068f6:	b500      	push	{lr}
 80068f8:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068fa:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006904:	619a      	str	r2, [r3, #24]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8006910:	23e0      	movs	r3, #224	; 0xe0
 8006912:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006914:	2302      	movs	r3, #2
 8006916:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006918:	2300      	movs	r3, #0
 800691a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800691c:	2303      	movs	r3, #3
 800691e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006920:	2305      	movs	r3, #5
 8006922:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006924:	a901      	add	r1, sp, #4
 8006926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800692a:	f7fc f8eb 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800692e:	b007      	add	sp, #28
 8006930:	f85d fb04 	ldr.w	pc, [sp], #4
 8006934:	40013000 	.word	0x40013000

08006938 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006938:	b508      	push	{r3, lr}

  if(hspi->Instance==SPI1)
 800693a:	6802      	ldr	r2, [r0, #0]
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <HAL_SPI_MspDeInit+0x24>)
 800693e:	429a      	cmp	r2, r3
 8006940:	d000      	beq.n	8006944 <HAL_SPI_MspDeInit+0xc>
 8006942:	bd08      	pop	{r3, pc}
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8006944:	4a06      	ldr	r2, [pc, #24]	; (8006960 <HAL_SPI_MspDeInit+0x28>)
 8006946:	6993      	ldr	r3, [r2, #24]
 8006948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800694c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 800694e:	21e0      	movs	r1, #224	; 0xe0
 8006950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006954:	f7fc f9a6 	bl	8002ca4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8006958:	e7f3      	b.n	8006942 <HAL_SPI_MspDeInit+0xa>
 800695a:	bf00      	nop
 800695c:	40013000 	.word	0x40013000
 8006960:	40021000 	.word	0x40021000

08006964 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006964:	b510      	push	{r4, lr}
 8006966:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM1)
 8006968:	6803      	ldr	r3, [r0, #0]
 800696a:	4a37      	ldr	r2, [pc, #220]	; (8006a48 <HAL_TIM_IC_MspInit+0xe4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_ic->Instance==TIM2)
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006974:	d026      	beq.n	80069c4 <HAL_TIM_IC_MspInit+0x60>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_ic->Instance==TIM3)
 8006976:	4a35      	ldr	r2, [pc, #212]	; (8006a4c <HAL_TIM_IC_MspInit+0xe8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d046      	beq.n	8006a0a <HAL_TIM_IC_MspInit+0xa6>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800697c:	b008      	add	sp, #32
 800697e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006980:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <HAL_TIM_IC_MspInit+0xec>)
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006988:	619a      	str	r2, [r3, #24]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = US_G_Echo_Pin;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699a:	2302      	movs	r3, #2
 800699c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2400      	movs	r4, #0
 80069a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80069a4:	2306      	movs	r3, #6
 80069a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(US_G_Echo_GPIO_Port, &GPIO_InitStruct);
 80069a8:	a903      	add	r1, sp, #12
 80069aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069ae:	f7fc f8a9 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80069b2:	4622      	mov	r2, r4
 80069b4:	4621      	mov	r1, r4
 80069b6:	201b      	movs	r0, #27
 80069b8:	f7fc f816 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80069bc:	201b      	movs	r0, #27
 80069be:	f7fc f845 	bl	8002a4c <HAL_NVIC_EnableIRQ>
 80069c2:	e7db      	b.n	800697c <HAL_TIM_IC_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	61da      	str	r2, [r3, #28]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = US_C_Echo_Pin;
 80069da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2400      	movs	r4, #0
 80069e6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80069ea:	2301      	movs	r3, #1
 80069ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(US_C_Echo_GPIO_Port, &GPIO_InitStruct);
 80069ee:	a903      	add	r1, sp, #12
 80069f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069f4:	f7fc f886 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80069f8:	4622      	mov	r2, r4
 80069fa:	4621      	mov	r1, r4
 80069fc:	201c      	movs	r0, #28
 80069fe:	f7fb fff3 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a02:	201c      	movs	r0, #28
 8006a04:	f7fc f822 	bl	8002a4c <HAL_NVIC_EnableIRQ>
 8006a08:	e7b8      	b.n	800697c <HAL_TIM_IC_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_TIM_IC_MspInit+0xec>)
 8006a0c:	69da      	ldr	r2, [r3, #28]
 8006a0e:	f042 0202 	orr.w	r2, r2, #2
 8006a12:	61da      	str	r2, [r3, #28]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	9302      	str	r3, [sp, #8]
 8006a1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_D_Echo_Pin;
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2302      	movs	r3, #2
 8006a24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2400      	movs	r4, #0
 8006a28:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(US_D_Echo_GPIO_Port, &GPIO_InitStruct);
 8006a2e:	a903      	add	r1, sp, #12
 8006a30:	4808      	ldr	r0, [pc, #32]	; (8006a54 <HAL_TIM_IC_MspInit+0xf0>)
 8006a32:	f7fc f867 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006a36:	4622      	mov	r2, r4
 8006a38:	4621      	mov	r1, r4
 8006a3a:	201d      	movs	r0, #29
 8006a3c:	f7fb ffd4 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a40:	201d      	movs	r0, #29
 8006a42:	f7fc f803 	bl	8002a4c <HAL_NVIC_EnableIRQ>
}
 8006a46:	e799      	b.n	800697c <HAL_TIM_IC_MspInit+0x18>
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40021000 	.word	0x40021000
 8006a54:	48000800 	.word	0x48000800

08006a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8006a58:	6802      	ldr	r2, [r0, #0]
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <HAL_UART_MspInit+0x58>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d000      	beq.n	8006a62 <HAL_UART_MspInit+0xa>
 8006a60:	4770      	bx	lr
{
 8006a62:	b510      	push	{r4, lr}
 8006a64:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a66:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006a70:	61da      	str	r2, [r3, #28]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a80:	2302      	movs	r3, #2
 8006a82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2400      	movs	r4, #0
 8006a86:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a8c:	2307      	movs	r3, #7
 8006a8e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a90:	a901      	add	r1, sp, #4
 8006a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a96:	f7fc f835 	bl	8002b04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	2026      	movs	r0, #38	; 0x26
 8006aa0:	f7fb ffa2 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006aa4:	2026      	movs	r0, #38	; 0x26
 8006aa6:	f7fb ffd1 	bl	8002a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006aaa:	b006      	add	sp, #24
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	40004400 	.word	0x40004400

08006ab4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006ab4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ab6:	f7fb fd13 	bl	80024e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006aba:	f7fb fff9 	bl	8002ab0 <HAL_SYSTICK_IRQHandler>
 8006abe:	bd08      	pop	{r3, pc}

08006ac0 <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 8006ac0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ac2:	4802      	ldr	r0, [pc, #8]	; (8006acc <TIM1_CC_IRQHandler+0xc>)
 8006ac4:	f7fd ffa4 	bl	8004a10 <HAL_TIM_IRQHandler>
 8006ac8:	bd08      	pop	{r3, pc}
 8006aca:	bf00      	nop
 8006acc:	20000240 	.word	0x20000240

08006ad0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8006ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ad2:	4802      	ldr	r0, [pc, #8]	; (8006adc <TIM2_IRQHandler+0xc>)
 8006ad4:	f7fd ff9c 	bl	8004a10 <HAL_TIM_IRQHandler>
 8006ad8:	bd08      	pop	{r3, pc}
 8006ada:	bf00      	nop
 8006adc:	200002f0 	.word	0x200002f0

08006ae0 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8006ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ae2:	4802      	ldr	r0, [pc, #8]	; (8006aec <TIM3_IRQHandler+0xc>)
 8006ae4:	f7fd ff94 	bl	8004a10 <HAL_TIM_IRQHandler>
 8006ae8:	bd08      	pop	{r3, pc}
 8006aea:	bf00      	nop
 8006aec:	20000200 	.word	0x20000200

08006af0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 8006af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006af2:	4802      	ldr	r0, [pc, #8]	; (8006afc <USART2_IRQHandler+0xc>)
 8006af4:	f7fe fd38 	bl	8005568 <HAL_UART_IRQHandler>
 8006af8:	bd08      	pop	{r3, pc}
 8006afa:	bf00      	nop
 8006afc:	20000330 	.word	0x20000330

08006b00 <EXTI0_IRQHandler>:
  /* USER CODE END USART2_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8006b00:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8006b02:	2001      	movs	r0, #1
 8006b04:	f7fc f95c 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
 8006b08:	bd08      	pop	{r3, pc}
	...

08006b0c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b0c:	4915      	ldr	r1, [pc, #84]	; (8006b64 <SystemInit+0x58>)
 8006b0e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006b12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <SystemInit+0x5c>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006b24:	6858      	ldr	r0, [r3, #4]
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <SystemInit+0x60>)
 8006b28:	4002      	ands	r2, r0
 8006b2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006b32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b36:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8006b46:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	f022 020f 	bic.w	r2, r2, #15
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006b50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b52:	4a07      	ldr	r2, [pc, #28]	; (8006b70 <SystemInit+0x64>)
 8006b54:	4002      	ands	r2, r0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006b58:	2200      	movs	r2, #0
 8006b5a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b60:	608b      	str	r3, [r1, #8]
 8006b62:	4770      	bx	lr
 8006b64:	e000ed00 	.word	0xe000ed00
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	f87fc00c 	.word	0xf87fc00c
 8006b70:	ff00fccc 	.word	0xff00fccc

08006b74 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006b74:	b470      	push	{r4, r5, r6}
	int div = 1;
 8006b76:	2301      	movs	r3, #1
	while (d/div >= base)
 8006b78:	e001      	b.n	8006b7e <ts_itoa+0xa>
		div *= base;
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 8006b7e:	fbb1 f4f3 	udiv	r4, r1, r3
 8006b82:	4294      	cmp	r4, r2
 8006b84:	d2f9      	bcs.n	8006b7a <ts_itoa+0x6>
 8006b86:	e004      	b.n	8006b92 <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 8006b88:	6805      	ldr	r5, [r0, #0]
 8006b8a:	1c6e      	adds	r6, r5, #1
 8006b8c:	6006      	str	r6, [r0, #0]
 8006b8e:	3430      	adds	r4, #48	; 0x30
 8006b90:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 8006b92:	b16b      	cbz	r3, 8006bb0 <ts_itoa+0x3c>
		int num = d/div;
 8006b94:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 8006b98:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 8006b9c:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 8006ba0:	2c09      	cmp	r4, #9
 8006ba2:	ddf1      	ble.n	8006b88 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 8006ba4:	6805      	ldr	r5, [r0, #0]
 8006ba6:	1c6e      	adds	r6, r5, #1
 8006ba8:	6006      	str	r6, [r0, #0]
 8006baa:	3437      	adds	r4, #55	; 0x37
 8006bac:	702c      	strb	r4, [r5, #0]
 8006bae:	e7f0      	b.n	8006b92 <ts_itoa+0x1e>
	}
}
 8006bb0:	bc70      	pop	{r4, r5, r6}
 8006bb2:	4770      	bx	lr

08006bb4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	9001      	str	r0, [sp, #4]
 8006bba:	460c      	mov	r4, r1
 8006bbc:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 8006bbe:	4605      	mov	r5, r0
	while(*fmt)
 8006bc0:	e03e      	b.n	8006c40 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8006bc2:	7863      	ldrb	r3, [r4, #1]
 8006bc4:	2b64      	cmp	r3, #100	; 0x64
 8006bc6:	d01c      	beq.n	8006c02 <ts_formatstring+0x4e>
 8006bc8:	d90d      	bls.n	8006be6 <ts_formatstring+0x32>
 8006bca:	2b73      	cmp	r3, #115	; 0x73
 8006bcc:	d04a      	beq.n	8006c64 <ts_formatstring+0xb0>
 8006bce:	d916      	bls.n	8006bfe <ts_formatstring+0x4a>
 8006bd0:	2b75      	cmp	r3, #117	; 0x75
 8006bd2:	d121      	bne.n	8006c18 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	1d1a      	adds	r2, r3, #4
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	220a      	movs	r2, #10
 8006bdc:	6819      	ldr	r1, [r3, #0]
 8006bde:	a801      	add	r0, sp, #4
 8006be0:	f7ff ffc8 	bl	8006b74 <ts_itoa>
				break;
 8006be4:	e02b      	b.n	8006c3e <ts_formatstring+0x8a>
			switch (*(++fmt))
 8006be6:	2b58      	cmp	r3, #88	; 0x58
 8006be8:	d018      	beq.n	8006c1c <ts_formatstring+0x68>
 8006bea:	2b63      	cmp	r3, #99	; 0x63
 8006bec:	d01f      	beq.n	8006c2e <ts_formatstring+0x7a>
 8006bee:	2b25      	cmp	r3, #37	; 0x25
 8006bf0:	d125      	bne.n	8006c3e <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8006bf2:	9b01      	ldr	r3, [sp, #4]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	2225      	movs	r2, #37	; 0x25
 8006bfa:	701a      	strb	r2, [r3, #0]
				  break;
 8006bfc:	e01f      	b.n	8006c3e <ts_formatstring+0x8a>
			switch (*(++fmt))
 8006bfe:	2b69      	cmp	r3, #105	; 0x69
 8006c00:	d11d      	bne.n	8006c3e <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	9200      	str	r2, [sp, #0]
 8006c08:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	db23      	blt.n	8006c56 <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 8006c0e:	220a      	movs	r2, #10
 8006c10:	a801      	add	r0, sp, #4
 8006c12:	f7ff ffaf 	bl	8006b74 <ts_itoa>
				break;
 8006c16:	e012      	b.n	8006c3e <ts_formatstring+0x8a>
			switch (*(++fmt))
 8006c18:	2b78      	cmp	r3, #120	; 0x78
 8006c1a:	d110      	bne.n	8006c3e <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	9200      	str	r2, [sp, #0]
 8006c22:	2210      	movs	r2, #16
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	a801      	add	r0, sp, #4
 8006c28:	f7ff ffa4 	bl	8006b74 <ts_itoa>
				break;
 8006c2c:	e007      	b.n	8006c3e <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	9a00      	ldr	r2, [sp, #0]
 8006c36:	1d11      	adds	r1, r2, #4
 8006c38:	9100      	str	r1, [sp, #0]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 8006c3e:	3402      	adds	r4, #2
	while(*fmt)
 8006c40:	7823      	ldrb	r3, [r4, #0]
 8006c42:	b1f3      	cbz	r3, 8006c82 <ts_formatstring+0xce>
		if (*fmt == '%')
 8006c44:	2b25      	cmp	r3, #37	; 0x25
 8006c46:	d0bc      	beq.n	8006bc2 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	9201      	str	r2, [sp, #4]
 8006c4e:	7822      	ldrb	r2, [r4, #0]
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	3401      	adds	r4, #1
 8006c54:	e7f4      	b.n	8006c40 <ts_formatstring+0x8c>
						val *= -1;
 8006c56:	4249      	negs	r1, r1
						*buf++ = '-';
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	9201      	str	r2, [sp, #4]
 8006c5e:	222d      	movs	r2, #45	; 0x2d
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e7d4      	b.n	8006c0e <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	9200      	str	r2, [sp, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 8006c6c:	e005      	b.n	8006c7a <ts_formatstring+0xc6>
						*buf++ = *arg++;
 8006c6e:	9a01      	ldr	r2, [sp, #4]
 8006c70:	1c51      	adds	r1, r2, #1
 8006c72:	9101      	str	r1, [sp, #4]
 8006c74:	7819      	ldrb	r1, [r3, #0]
 8006c76:	7011      	strb	r1, [r2, #0]
 8006c78:	3301      	adds	r3, #1
					while (*arg)
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	d1f6      	bne.n	8006c6e <ts_formatstring+0xba>
 8006c80:	e7dd      	b.n	8006c3e <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 8006c82:	2200      	movs	r2, #0
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 8006c88:	9801      	ldr	r0, [sp, #4]
 8006c8a:	1b40      	subs	r0, r0, r5
 8006c8c:	b003      	add	sp, #12
 8006c8e:	bd30      	pop	{r4, r5, pc}

08006c90 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8006c90:	b082      	sub	sp, #8
 8006c92:	4603      	mov	r3, r0
 8006c94:	9101      	str	r1, [sp, #4]
	int length = 0;
 8006c96:	2000      	movs	r0, #0
	while (*fmt)
 8006c98:	e01d      	b.n	8006cd6 <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 8006c9a:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	3b58      	subs	r3, #88	; 0x58
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d837      	bhi.n	8006d14 <ts_formatlength+0x84>
 8006ca4:	e8df f003 	tbb	[pc, r3]
 8006ca8:	36363630 	.word	0x36363630
 8006cac:	36363636 	.word	0x36363636
 8006cb0:	11363636 	.word	0x11363636
 8006cb4:	3636361d 	.word	0x3636361d
 8006cb8:	36361d36 	.word	0x36361d36
 8006cbc:	36363636 	.word	0x36363636
 8006cc0:	23363636 	.word	0x23363636
 8006cc4:	36361d36 	.word	0x36361d36
 8006cc8:	30          	.byte	0x30
 8006cc9:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	9301      	str	r3, [sp, #4]
				  ++length;
 8006cd0:	3001      	adds	r0, #1
			++fmt;
 8006cd2:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 8006cd4:	3301      	adds	r3, #1
	while (*fmt)
 8006cd6:	781a      	ldrb	r2, [r3, #0]
 8006cd8:	b1fa      	cbz	r2, 8006d1a <ts_formatlength+0x8a>
		if (*fmt == '%')
 8006cda:	2a25      	cmp	r2, #37	; 0x25
 8006cdc:	d0dd      	beq.n	8006c9a <ts_formatlength+0xa>
			++length;
 8006cde:	3001      	adds	r0, #1
 8006ce0:	e7f8      	b.n	8006cd4 <ts_formatlength+0x44>
				  length += 11;
 8006ce2:	300b      	adds	r0, #11
				  va_arg(va, int);
 8006ce4:	9b01      	ldr	r3, [sp, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	9301      	str	r3, [sp, #4]
			++fmt;
 8006cea:	460b      	mov	r3, r1
 8006cec:	e7f2      	b.n	8006cd4 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	9201      	str	r2, [sp, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 8006cf6:	e001      	b.n	8006cfc <ts_formatlength+0x6c>
			  			  ++length;
 8006cf8:	3001      	adds	r0, #1
			  		  while (*str++)
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f9      	bne.n	8006cf8 <ts_formatlength+0x68>
			++fmt;
 8006d04:	460b      	mov	r3, r1
 8006d06:	e7e5      	b.n	8006cd4 <ts_formatlength+0x44>
				  length += 8;
 8006d08:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	9301      	str	r3, [sp, #4]
			++fmt;
 8006d10:	460b      	mov	r3, r1
 8006d12:	e7df      	b.n	8006cd4 <ts_formatlength+0x44>
				  ++length;
 8006d14:	3001      	adds	r0, #1
			++fmt;
 8006d16:	460b      	mov	r3, r1
				  break;
 8006d18:	e7dc      	b.n	8006cd4 <ts_formatlength+0x44>
	}
	return length;
}
 8006d1a:	b002      	add	sp, #8
 8006d1c:	4770      	bx	lr

08006d1e <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8006d1e:	b40e      	push	{r1, r2, r3}
 8006d20:	b500      	push	{lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	aa03      	add	r2, sp, #12
 8006d26:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 8006d2a:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 8006d2c:	f7ff ff42 	bl	8006bb4 <ts_formatstring>
	va_end(va);
	return length;
}
 8006d30:	b002      	add	sp, #8
 8006d32:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d36:	b003      	add	sp, #12
 8006d38:	4770      	bx	lr

08006d3a <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8006d3a:	b40f      	push	{r0, r1, r2, r3}
 8006d3c:	b5b0      	push	{r4, r5, r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	f107 0418 	add.w	r4, r7, #24
 8006d46:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8006d4a:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7ff ff9e 	bl	8006c90 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 8006d54:	3007      	adds	r0, #7
 8006d56:	f020 0007 	bic.w	r0, r0, #7
 8006d5a:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 8006d5e:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8006d60:	4622      	mov	r2, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	4668      	mov	r0, sp
 8006d66:	f7ff ff25 	bl	8006bb4 <ts_formatstring>
		length = _write(1, buf, length);
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	4669      	mov	r1, sp
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f000 fe40 	bl	80079f4 <_write>
		va_end(va);
	}
	return length;
}
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr

08006d80 <__libc_init_array>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4e0d      	ldr	r6, [pc, #52]	; (8006db8 <__libc_init_array+0x38>)
 8006d84:	4c0d      	ldr	r4, [pc, #52]	; (8006dbc <__libc_init_array+0x3c>)
 8006d86:	1ba4      	subs	r4, r4, r6
 8006d88:	10a4      	asrs	r4, r4, #2
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d109      	bne.n	8006da4 <__libc_init_array+0x24>
 8006d90:	4e0b      	ldr	r6, [pc, #44]	; (8006dc0 <__libc_init_array+0x40>)
 8006d92:	4c0c      	ldr	r4, [pc, #48]	; (8006dc4 <__libc_init_array+0x44>)
 8006d94:	f000 fe36 	bl	8007a04 <_init>
 8006d98:	1ba4      	subs	r4, r4, r6
 8006d9a:	10a4      	asrs	r4, r4, #2
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	42a5      	cmp	r5, r4
 8006da0:	d105      	bne.n	8006dae <__libc_init_array+0x2e>
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006da8:	4798      	blx	r3
 8006daa:	3501      	adds	r5, #1
 8006dac:	e7ee      	b.n	8006d8c <__libc_init_array+0xc>
 8006dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db2:	4798      	blx	r3
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7f2      	b.n	8006d9e <__libc_init_array+0x1e>
 8006db8:	08007b60 	.word	0x08007b60
 8006dbc:	08007b60 	.word	0x08007b60
 8006dc0:	08007b60 	.word	0x08007b60
 8006dc4:	08007b64 	.word	0x08007b64

08006dc8 <memset>:
 8006dc8:	4402      	add	r2, r0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d100      	bne.n	8006dd2 <memset+0xa>
 8006dd0:	4770      	bx	lr
 8006dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd6:	e7f9      	b.n	8006dcc <memset+0x4>

08006dd8 <asin>:
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	ed2d 8b02 	vpush	{d8}
 8006dde:	4e26      	ldr	r6, [pc, #152]	; (8006e78 <asin+0xa0>)
 8006de0:	b08b      	sub	sp, #44	; 0x2c
 8006de2:	ec55 4b10 	vmov	r4, r5, d0
 8006de6:	f000 f8ab 	bl	8006f40 <__ieee754_asin>
 8006dea:	f996 3000 	ldrsb.w	r3, [r6]
 8006dee:	eeb0 8a40 	vmov.f32	s16, s0
 8006df2:	eef0 8a60 	vmov.f32	s17, s1
 8006df6:	3301      	adds	r3, #1
 8006df8:	d036      	beq.n	8006e68 <asin+0x90>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fe3b 	bl	8000a7c <__aeabi_dcmpun>
 8006e06:	4607      	mov	r7, r0
 8006e08:	bb70      	cbnz	r0, 8006e68 <asin+0x90>
 8006e0a:	ec45 4b10 	vmov	d0, r4, r5
 8006e0e:	f000 fdd7 	bl	80079c0 <fabs>
 8006e12:	2200      	movs	r2, #0
 8006e14:	4b19      	ldr	r3, [pc, #100]	; (8006e7c <asin+0xa4>)
 8006e16:	ec51 0b10 	vmov	r0, r1, d0
 8006e1a:	f7f9 fe25 	bl	8000a68 <__aeabi_dcmpgt>
 8006e1e:	b318      	cbz	r0, 8006e68 <asin+0x90>
 8006e20:	2301      	movs	r3, #1
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4816      	ldr	r0, [pc, #88]	; (8006e80 <asin+0xa8>)
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <asin+0xac>)
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	9708      	str	r7, [sp, #32]
 8006e2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e34:	f000 fdd0 	bl	80079d8 <nan>
 8006e38:	f996 3000 	ldrsb.w	r3, [r6]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006e42:	d104      	bne.n	8006e4e <asin+0x76>
 8006e44:	f000 fdd0 	bl	80079e8 <__errno>
 8006e48:	2321      	movs	r3, #33	; 0x21
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	e004      	b.n	8006e58 <asin+0x80>
 8006e4e:	4668      	mov	r0, sp
 8006e50:	f000 fdbd 	bl	80079ce <matherr>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d0f5      	beq.n	8006e44 <asin+0x6c>
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	b11b      	cbz	r3, 8006e64 <asin+0x8c>
 8006e5c:	f000 fdc4 	bl	80079e8 <__errno>
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	6003      	str	r3, [r0, #0]
 8006e64:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e68:	eeb0 0a48 	vmov.f32	s0, s16
 8006e6c:	eef0 0a68 	vmov.f32	s1, s17
 8006e70:	b00b      	add	sp, #44	; 0x2c
 8006e72:	ecbd 8b02 	vpop	{d8}
 8006e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e78:	20000050 	.word	0x20000050
 8006e7c:	3ff00000 	.word	0x3ff00000
 8006e80:	08007b14 	.word	0x08007b14
 8006e84:	08007b10 	.word	0x08007b10

08006e88 <atan2>:
 8006e88:	f000 ba66 	b.w	8007358 <__ieee754_atan2>

08006e8c <sqrt>:
 8006e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e90:	ed2d 8b02 	vpush	{d8}
 8006e94:	b08b      	sub	sp, #44	; 0x2c
 8006e96:	ec55 4b10 	vmov	r4, r5, d0
 8006e9a:	f000 fb37 	bl	800750c <__ieee754_sqrt>
 8006e9e:	4b26      	ldr	r3, [pc, #152]	; (8006f38 <sqrt+0xac>)
 8006ea0:	eeb0 8a40 	vmov.f32	s16, s0
 8006ea4:	eef0 8a60 	vmov.f32	s17, s1
 8006ea8:	f993 6000 	ldrsb.w	r6, [r3]
 8006eac:	1c73      	adds	r3, r6, #1
 8006eae:	d02a      	beq.n	8006f06 <sqrt+0x7a>
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 fde0 	bl	8000a7c <__aeabi_dcmpun>
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	bb10      	cbnz	r0, 8006f06 <sqrt+0x7a>
 8006ec0:	f04f 0800 	mov.w	r8, #0
 8006ec4:	f04f 0900 	mov.w	r9, #0
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	4620      	mov	r0, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f7f9 fdac 	bl	8000a2c <__aeabi_dcmplt>
 8006ed4:	b1b8      	cbz	r0, 8006f06 <sqrt+0x7a>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <sqrt+0xb0>)
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	9708      	str	r7, [sp, #32]
 8006ee0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006ee4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ee8:	b9b6      	cbnz	r6, 8006f18 <sqrt+0x8c>
 8006eea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006eee:	4668      	mov	r0, sp
 8006ef0:	f000 fd6d 	bl	80079ce <matherr>
 8006ef4:	b1d0      	cbz	r0, 8006f2c <sqrt+0xa0>
 8006ef6:	9b08      	ldr	r3, [sp, #32]
 8006ef8:	b11b      	cbz	r3, 8006f02 <sqrt+0x76>
 8006efa:	f000 fd75 	bl	80079e8 <__errno>
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	6003      	str	r3, [r0, #0]
 8006f02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006f06:	eeb0 0a48 	vmov.f32	s0, s16
 8006f0a:	eef0 0a68 	vmov.f32	s1, s17
 8006f0e:	b00b      	add	sp, #44	; 0x2c
 8006f10:	ecbd 8b02 	vpop	{d8}
 8006f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fc3c 	bl	800079c <__aeabi_ddiv>
 8006f24:	2e02      	cmp	r6, #2
 8006f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f2a:	d1e0      	bne.n	8006eee <sqrt+0x62>
 8006f2c:	f000 fd5c 	bl	80079e8 <__errno>
 8006f30:	2321      	movs	r3, #33	; 0x21
 8006f32:	6003      	str	r3, [r0, #0]
 8006f34:	e7df      	b.n	8006ef6 <sqrt+0x6a>
 8006f36:	bf00      	nop
 8006f38:	20000050 	.word	0x20000050
 8006f3c:	08007b15 	.word	0x08007b15

08006f40 <__ieee754_asin>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	ec55 4b10 	vmov	r4, r5, d0
 8006f48:	4bcb      	ldr	r3, [pc, #812]	; (8007278 <__ieee754_asin+0x338>)
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 8006f50:	459b      	cmp	fp, r3
 8006f52:	9501      	str	r5, [sp, #4]
 8006f54:	dd32      	ble.n	8006fbc <__ieee754_asin+0x7c>
 8006f56:	ee10 3a10 	vmov	r3, s0
 8006f5a:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8006f5e:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8006f62:	ea5b 0303 	orrs.w	r3, fp, r3
 8006f66:	d117      	bne.n	8006f98 <__ieee754_asin+0x58>
 8006f68:	a3a9      	add	r3, pc, #676	; (adr r3, 8007210 <__ieee754_asin+0x2d0>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	ee10 0a10 	vmov	r0, s0
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 fae8 	bl	8000548 <__aeabi_dmul>
 8006f78:	a3a7      	add	r3, pc, #668	; (adr r3, 8007218 <__ieee754_asin+0x2d8>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460f      	mov	r7, r1
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fadf 	bl	8000548 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 f927 	bl	80001e4 <__adddf3>
 8006f96:	e00a      	b.n	8006fae <__ieee754_asin+0x6e>
 8006f98:	ee10 2a10 	vmov	r2, s0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 f91d 	bl	80001e0 <__aeabi_dsub>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	f7f9 fbf7 	bl	800079c <__aeabi_ddiv>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	ec45 4b10 	vmov	d0, r4, r5
 8006fb6:	b005      	add	sp, #20
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	4baf      	ldr	r3, [pc, #700]	; (800727c <__ieee754_asin+0x33c>)
 8006fbe:	459b      	cmp	fp, r3
 8006fc0:	dc11      	bgt.n	8006fe6 <__ieee754_asin+0xa6>
 8006fc2:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 8006fc6:	f280 80b0 	bge.w	800712a <__ieee754_asin+0x1ea>
 8006fca:	a395      	add	r3, pc, #596	; (adr r3, 8007220 <__ieee754_asin+0x2e0>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	ee10 0a10 	vmov	r0, s0
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 f905 	bl	80001e4 <__adddf3>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4ba8      	ldr	r3, [pc, #672]	; (8007280 <__ieee754_asin+0x340>)
 8006fde:	f7f9 fd43 	bl	8000a68 <__aeabi_dcmpgt>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <__ieee754_asin+0x72>
 8006fe6:	ec45 4b10 	vmov	d0, r4, r5
 8006fea:	f000 fce9 	bl	80079c0 <fabs>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	ec53 2b10 	vmov	r2, r3, d0
 8006ff4:	49a2      	ldr	r1, [pc, #648]	; (8007280 <__ieee754_asin+0x340>)
 8006ff6:	f7f9 f8f3 	bl	80001e0 <__aeabi_dsub>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4ba1      	ldr	r3, [pc, #644]	; (8007284 <__ieee754_asin+0x344>)
 8006ffe:	f7f9 faa3 	bl	8000548 <__aeabi_dmul>
 8007002:	a389      	add	r3, pc, #548	; (adr r3, 8007228 <__ieee754_asin+0x2e8>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	f7f9 fa9c 	bl	8000548 <__aeabi_dmul>
 8007010:	a387      	add	r3, pc, #540	; (adr r3, 8007230 <__ieee754_asin+0x2f0>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 f8e5 	bl	80001e4 <__adddf3>
 800701a:	4622      	mov	r2, r4
 800701c:	462b      	mov	r3, r5
 800701e:	f7f9 fa93 	bl	8000548 <__aeabi_dmul>
 8007022:	a385      	add	r3, pc, #532	; (adr r3, 8007238 <__ieee754_asin+0x2f8>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 f8da 	bl	80001e0 <__aeabi_dsub>
 800702c:	4622      	mov	r2, r4
 800702e:	462b      	mov	r3, r5
 8007030:	f7f9 fa8a 	bl	8000548 <__aeabi_dmul>
 8007034:	a382      	add	r3, pc, #520	; (adr r3, 8007240 <__ieee754_asin+0x300>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f8d3 	bl	80001e4 <__adddf3>
 800703e:	4622      	mov	r2, r4
 8007040:	462b      	mov	r3, r5
 8007042:	f7f9 fa81 	bl	8000548 <__aeabi_dmul>
 8007046:	a380      	add	r3, pc, #512	; (adr r3, 8007248 <__ieee754_asin+0x308>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 f8c8 	bl	80001e0 <__aeabi_dsub>
 8007050:	4622      	mov	r2, r4
 8007052:	462b      	mov	r3, r5
 8007054:	f7f9 fa78 	bl	8000548 <__aeabi_dmul>
 8007058:	a37d      	add	r3, pc, #500	; (adr r3, 8007250 <__ieee754_asin+0x310>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 f8c1 	bl	80001e4 <__adddf3>
 8007062:	4622      	mov	r2, r4
 8007064:	462b      	mov	r3, r5
 8007066:	f7f9 fa6f 	bl	8000548 <__aeabi_dmul>
 800706a:	a37b      	add	r3, pc, #492	; (adr r3, 8007258 <__ieee754_asin+0x318>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	4680      	mov	r8, r0
 8007072:	4689      	mov	r9, r1
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fa66 	bl	8000548 <__aeabi_dmul>
 800707c:	a378      	add	r3, pc, #480	; (adr r3, 8007260 <__ieee754_asin+0x320>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f7f9 f8ad 	bl	80001e0 <__aeabi_dsub>
 8007086:	4622      	mov	r2, r4
 8007088:	462b      	mov	r3, r5
 800708a:	f7f9 fa5d 	bl	8000548 <__aeabi_dmul>
 800708e:	a376      	add	r3, pc, #472	; (adr r3, 8007268 <__ieee754_asin+0x328>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 f8a6 	bl	80001e4 <__adddf3>
 8007098:	4622      	mov	r2, r4
 800709a:	462b      	mov	r3, r5
 800709c:	f7f9 fa54 	bl	8000548 <__aeabi_dmul>
 80070a0:	a373      	add	r3, pc, #460	; (adr r3, 8007270 <__ieee754_asin+0x330>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 f89b 	bl	80001e0 <__aeabi_dsub>
 80070aa:	4622      	mov	r2, r4
 80070ac:	462b      	mov	r3, r5
 80070ae:	f7f9 fa4b 	bl	8000548 <__aeabi_dmul>
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b72      	ldr	r3, [pc, #456]	; (8007280 <__ieee754_asin+0x340>)
 80070b6:	f7f9 f895 	bl	80001e4 <__adddf3>
 80070ba:	ec45 4b10 	vmov	d0, r4, r5
 80070be:	460b      	mov	r3, r1
 80070c0:	4602      	mov	r2, r0
 80070c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070c6:	f000 fa21 	bl	800750c <__ieee754_sqrt>
 80070ca:	496f      	ldr	r1, [pc, #444]	; (8007288 <__ieee754_asin+0x348>)
 80070cc:	458b      	cmp	fp, r1
 80070ce:	ec57 6b10 	vmov	r6, r7, d0
 80070d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070d6:	f340 80d9 	ble.w	800728c <__ieee754_asin+0x34c>
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 fb5d 	bl	800079c <__aeabi_ddiv>
 80070e2:	4632      	mov	r2, r6
 80070e4:	463b      	mov	r3, r7
 80070e6:	f7f9 fa2f 	bl	8000548 <__aeabi_dmul>
 80070ea:	4632      	mov	r2, r6
 80070ec:	463b      	mov	r3, r7
 80070ee:	f7f9 f879 	bl	80001e4 <__adddf3>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	f7f9 f875 	bl	80001e4 <__adddf3>
 80070fa:	a347      	add	r3, pc, #284	; (adr r3, 8007218 <__ieee754_asin+0x2d8>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f86e 	bl	80001e0 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	a141      	add	r1, pc, #260	; (adr r1, 8007210 <__ieee754_asin+0x2d0>)
 800710a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800710e:	f7f9 f867 	bl	80001e0 <__aeabi_dsub>
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfdc      	itt	le
 8007118:	4602      	movle	r2, r0
 800711a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	bfdc      	itt	le
 8007124:	4614      	movle	r4, r2
 8007126:	461d      	movle	r5, r3
 8007128:	e743      	b.n	8006fb2 <__ieee754_asin+0x72>
 800712a:	ee10 2a10 	vmov	r2, s0
 800712e:	ee10 0a10 	vmov	r0, s0
 8007132:	462b      	mov	r3, r5
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 fa07 	bl	8000548 <__aeabi_dmul>
 800713a:	a33b      	add	r3, pc, #236	; (adr r3, 8007228 <__ieee754_asin+0x2e8>)
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	f7f9 fa00 	bl	8000548 <__aeabi_dmul>
 8007148:	a339      	add	r3, pc, #228	; (adr r3, 8007230 <__ieee754_asin+0x2f0>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f849 	bl	80001e4 <__adddf3>
 8007152:	4632      	mov	r2, r6
 8007154:	463b      	mov	r3, r7
 8007156:	f7f9 f9f7 	bl	8000548 <__aeabi_dmul>
 800715a:	a337      	add	r3, pc, #220	; (adr r3, 8007238 <__ieee754_asin+0x2f8>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 f83e 	bl	80001e0 <__aeabi_dsub>
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	f7f9 f9ee 	bl	8000548 <__aeabi_dmul>
 800716c:	a334      	add	r3, pc, #208	; (adr r3, 8007240 <__ieee754_asin+0x300>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f837 	bl	80001e4 <__adddf3>
 8007176:	4632      	mov	r2, r6
 8007178:	463b      	mov	r3, r7
 800717a:	f7f9 f9e5 	bl	8000548 <__aeabi_dmul>
 800717e:	a332      	add	r3, pc, #200	; (adr r3, 8007248 <__ieee754_asin+0x308>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 f82c 	bl	80001e0 <__aeabi_dsub>
 8007188:	4632      	mov	r2, r6
 800718a:	463b      	mov	r3, r7
 800718c:	f7f9 f9dc 	bl	8000548 <__aeabi_dmul>
 8007190:	a32f      	add	r3, pc, #188	; (adr r3, 8007250 <__ieee754_asin+0x310>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 f825 	bl	80001e4 <__adddf3>
 800719a:	4632      	mov	r2, r6
 800719c:	463b      	mov	r3, r7
 800719e:	f7f9 f9d3 	bl	8000548 <__aeabi_dmul>
 80071a2:	a32d      	add	r3, pc, #180	; (adr r3, 8007258 <__ieee754_asin+0x318>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	4680      	mov	r8, r0
 80071aa:	4689      	mov	r9, r1
 80071ac:	4630      	mov	r0, r6
 80071ae:	4639      	mov	r1, r7
 80071b0:	f7f9 f9ca 	bl	8000548 <__aeabi_dmul>
 80071b4:	a32a      	add	r3, pc, #168	; (adr r3, 8007260 <__ieee754_asin+0x320>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f811 	bl	80001e0 <__aeabi_dsub>
 80071be:	4632      	mov	r2, r6
 80071c0:	463b      	mov	r3, r7
 80071c2:	f7f9 f9c1 	bl	8000548 <__aeabi_dmul>
 80071c6:	a328      	add	r3, pc, #160	; (adr r3, 8007268 <__ieee754_asin+0x328>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f80a 	bl	80001e4 <__adddf3>
 80071d0:	4632      	mov	r2, r6
 80071d2:	463b      	mov	r3, r7
 80071d4:	f7f9 f9b8 	bl	8000548 <__aeabi_dmul>
 80071d8:	a325      	add	r3, pc, #148	; (adr r3, 8007270 <__ieee754_asin+0x330>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f8 ffff 	bl	80001e0 <__aeabi_dsub>
 80071e2:	4632      	mov	r2, r6
 80071e4:	463b      	mov	r3, r7
 80071e6:	f7f9 f9af 	bl	8000548 <__aeabi_dmul>
 80071ea:	2200      	movs	r2, #0
 80071ec:	4b24      	ldr	r3, [pc, #144]	; (8007280 <__ieee754_asin+0x340>)
 80071ee:	f7f8 fff9 	bl	80001e4 <__adddf3>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 facf 	bl	800079c <__aeabi_ddiv>
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	f7f9 f9a1 	bl	8000548 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	e6c0      	b.n	8006f92 <__ieee754_asin+0x52>
 8007210:	54442d18 	.word	0x54442d18
 8007214:	3ff921fb 	.word	0x3ff921fb
 8007218:	33145c07 	.word	0x33145c07
 800721c:	3c91a626 	.word	0x3c91a626
 8007220:	8800759c 	.word	0x8800759c
 8007224:	7e37e43c 	.word	0x7e37e43c
 8007228:	0dfdf709 	.word	0x0dfdf709
 800722c:	3f023de1 	.word	0x3f023de1
 8007230:	7501b288 	.word	0x7501b288
 8007234:	3f49efe0 	.word	0x3f49efe0
 8007238:	b5688f3b 	.word	0xb5688f3b
 800723c:	3fa48228 	.word	0x3fa48228
 8007240:	0e884455 	.word	0x0e884455
 8007244:	3fc9c155 	.word	0x3fc9c155
 8007248:	03eb6f7d 	.word	0x03eb6f7d
 800724c:	3fd4d612 	.word	0x3fd4d612
 8007250:	55555555 	.word	0x55555555
 8007254:	3fc55555 	.word	0x3fc55555
 8007258:	b12e9282 	.word	0xb12e9282
 800725c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007260:	1b8d0159 	.word	0x1b8d0159
 8007264:	3fe6066c 	.word	0x3fe6066c
 8007268:	9c598ac8 	.word	0x9c598ac8
 800726c:	40002ae5 	.word	0x40002ae5
 8007270:	1c8a2d4b 	.word	0x1c8a2d4b
 8007274:	40033a27 	.word	0x40033a27
 8007278:	3fefffff 	.word	0x3fefffff
 800727c:	3fdfffff 	.word	0x3fdfffff
 8007280:	3ff00000 	.word	0x3ff00000
 8007284:	3fe00000 	.word	0x3fe00000
 8007288:	3fef3332 	.word	0x3fef3332
 800728c:	4640      	mov	r0, r8
 800728e:	4649      	mov	r1, r9
 8007290:	f7f9 fa84 	bl	800079c <__aeabi_ddiv>
 8007294:	4632      	mov	r2, r6
 8007296:	4680      	mov	r8, r0
 8007298:	4689      	mov	r9, r1
 800729a:	463b      	mov	r3, r7
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f8 ffa0 	bl	80001e4 <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f9 f94c 	bl	8000548 <__aeabi_dmul>
 80072b0:	f04f 0a00 	mov.w	sl, #0
 80072b4:	4680      	mov	r8, r0
 80072b6:	4689      	mov	r9, r1
 80072b8:	4652      	mov	r2, sl
 80072ba:	463b      	mov	r3, r7
 80072bc:	4650      	mov	r0, sl
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f9 f942 	bl	8000548 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 ff88 	bl	80001e0 <__aeabi_dsub>
 80072d0:	4652      	mov	r2, sl
 80072d2:	4604      	mov	r4, r0
 80072d4:	460d      	mov	r5, r1
 80072d6:	463b      	mov	r3, r7
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f8 ff82 	bl	80001e4 <__adddf3>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f9 fa58 	bl	800079c <__aeabi_ddiv>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	f7f8 ff78 	bl	80001e4 <__adddf3>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	a113      	add	r1, pc, #76	; (adr r1, 8007348 <__ieee754_asin+0x408>)
 80072fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072fe:	f7f8 ff6f 	bl	80001e0 <__aeabi_dsub>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ff69 	bl	80001e0 <__aeabi_dsub>
 800730e:	4652      	mov	r2, sl
 8007310:	4604      	mov	r4, r0
 8007312:	460d      	mov	r5, r1
 8007314:	463b      	mov	r3, r7
 8007316:	4650      	mov	r0, sl
 8007318:	4639      	mov	r1, r7
 800731a:	f7f8 ff63 	bl	80001e4 <__adddf3>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	a10b      	add	r1, pc, #44	; (adr r1, 8007350 <__ieee754_asin+0x410>)
 8007324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007328:	f7f8 ff5a 	bl	80001e0 <__aeabi_dsub>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f8 ff54 	bl	80001e0 <__aeabi_dsub>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	a104      	add	r1, pc, #16	; (adr r1, 8007350 <__ieee754_asin+0x410>)
 800733e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007342:	e6e4      	b.n	800710e <__ieee754_asin+0x1ce>
 8007344:	f3af 8000 	nop.w
 8007348:	33145c07 	.word	0x33145c07
 800734c:	3c91a626 	.word	0x3c91a626
 8007350:	54442d18 	.word	0x54442d18
 8007354:	3fe921fb 	.word	0x3fe921fb

08007358 <__ieee754_atan2>:
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	ec57 6b11 	vmov	r6, r7, d1
 8007360:	4273      	negs	r3, r6
 8007362:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007366:	4333      	orrs	r3, r6
 8007368:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007508 <__ieee754_atan2+0x1b0>
 800736c:	ec51 0b10 	vmov	r0, r1, d0
 8007370:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007374:	4563      	cmp	r3, ip
 8007376:	ee11 8a10 	vmov	r8, s2
 800737a:	ee10 9a10 	vmov	r9, s0
 800737e:	468e      	mov	lr, r1
 8007380:	d807      	bhi.n	8007392 <__ieee754_atan2+0x3a>
 8007382:	4244      	negs	r4, r0
 8007384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007388:	4304      	orrs	r4, r0
 800738a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800738e:	4564      	cmp	r4, ip
 8007390:	d907      	bls.n	80073a2 <__ieee754_atan2+0x4a>
 8007392:	4632      	mov	r2, r6
 8007394:	463b      	mov	r3, r7
 8007396:	f7f8 ff25 	bl	80001e4 <__adddf3>
 800739a:	ec41 0b10 	vmov	d0, r0, r1
 800739e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80073a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80073aa:	4334      	orrs	r4, r6
 80073ac:	d103      	bne.n	80073b6 <__ieee754_atan2+0x5e>
 80073ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b2:	f000 b95d 	b.w	8007670 <atan>
 80073b6:	17bc      	asrs	r4, r7, #30
 80073b8:	f004 0402 	and.w	r4, r4, #2
 80073bc:	ea59 0903 	orrs.w	r9, r9, r3
 80073c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80073c4:	d107      	bne.n	80073d6 <__ieee754_atan2+0x7e>
 80073c6:	2c02      	cmp	r4, #2
 80073c8:	d030      	beq.n	800742c <__ieee754_atan2+0xd4>
 80073ca:	2c03      	cmp	r4, #3
 80073cc:	d1e5      	bne.n	800739a <__ieee754_atan2+0x42>
 80073ce:	a13c      	add	r1, pc, #240	; (adr r1, 80074c0 <__ieee754_atan2+0x168>)
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	e7e1      	b.n	800739a <__ieee754_atan2+0x42>
 80073d6:	ea58 0802 	orrs.w	r8, r8, r2
 80073da:	d106      	bne.n	80073ea <__ieee754_atan2+0x92>
 80073dc:	f1be 0f00 	cmp.w	lr, #0
 80073e0:	da6a      	bge.n	80074b8 <__ieee754_atan2+0x160>
 80073e2:	a139      	add	r1, pc, #228	; (adr r1, 80074c8 <__ieee754_atan2+0x170>)
 80073e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e8:	e7d7      	b.n	800739a <__ieee754_atan2+0x42>
 80073ea:	4562      	cmp	r2, ip
 80073ec:	d122      	bne.n	8007434 <__ieee754_atan2+0xdc>
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d111      	bne.n	8007416 <__ieee754_atan2+0xbe>
 80073f2:	2c02      	cmp	r4, #2
 80073f4:	d007      	beq.n	8007406 <__ieee754_atan2+0xae>
 80073f6:	2c03      	cmp	r4, #3
 80073f8:	d009      	beq.n	800740e <__ieee754_atan2+0xb6>
 80073fa:	2c01      	cmp	r4, #1
 80073fc:	d156      	bne.n	80074ac <__ieee754_atan2+0x154>
 80073fe:	a134      	add	r1, pc, #208	; (adr r1, 80074d0 <__ieee754_atan2+0x178>)
 8007400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007404:	e7c9      	b.n	800739a <__ieee754_atan2+0x42>
 8007406:	a134      	add	r1, pc, #208	; (adr r1, 80074d8 <__ieee754_atan2+0x180>)
 8007408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740c:	e7c5      	b.n	800739a <__ieee754_atan2+0x42>
 800740e:	a134      	add	r1, pc, #208	; (adr r1, 80074e0 <__ieee754_atan2+0x188>)
 8007410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007414:	e7c1      	b.n	800739a <__ieee754_atan2+0x42>
 8007416:	2c02      	cmp	r4, #2
 8007418:	d008      	beq.n	800742c <__ieee754_atan2+0xd4>
 800741a:	2c03      	cmp	r4, #3
 800741c:	d0d7      	beq.n	80073ce <__ieee754_atan2+0x76>
 800741e:	2c01      	cmp	r4, #1
 8007420:	f04f 0000 	mov.w	r0, #0
 8007424:	d146      	bne.n	80074b4 <__ieee754_atan2+0x15c>
 8007426:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800742a:	e7b6      	b.n	800739a <__ieee754_atan2+0x42>
 800742c:	a12e      	add	r1, pc, #184	; (adr r1, 80074e8 <__ieee754_atan2+0x190>)
 800742e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007432:	e7b2      	b.n	800739a <__ieee754_atan2+0x42>
 8007434:	4563      	cmp	r3, ip
 8007436:	d0d1      	beq.n	80073dc <__ieee754_atan2+0x84>
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	151b      	asrs	r3, r3, #20
 800743c:	2b3c      	cmp	r3, #60	; 0x3c
 800743e:	dc1e      	bgt.n	800747e <__ieee754_atan2+0x126>
 8007440:	2f00      	cmp	r7, #0
 8007442:	da01      	bge.n	8007448 <__ieee754_atan2+0xf0>
 8007444:	333c      	adds	r3, #60	; 0x3c
 8007446:	db1e      	blt.n	8007486 <__ieee754_atan2+0x12e>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	f7f9 f9a6 	bl	800079c <__aeabi_ddiv>
 8007450:	ec41 0b10 	vmov	d0, r0, r1
 8007454:	f000 fab4 	bl	80079c0 <fabs>
 8007458:	f000 f90a 	bl	8007670 <atan>
 800745c:	ec51 0b10 	vmov	r0, r1, d0
 8007460:	2c01      	cmp	r4, #1
 8007462:	d013      	beq.n	800748c <__ieee754_atan2+0x134>
 8007464:	2c02      	cmp	r4, #2
 8007466:	d014      	beq.n	8007492 <__ieee754_atan2+0x13a>
 8007468:	2c00      	cmp	r4, #0
 800746a:	d096      	beq.n	800739a <__ieee754_atan2+0x42>
 800746c:	a320      	add	r3, pc, #128	; (adr r3, 80074f0 <__ieee754_atan2+0x198>)
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	f7f8 feb5 	bl	80001e0 <__aeabi_dsub>
 8007476:	a31c      	add	r3, pc, #112	; (adr r3, 80074e8 <__ieee754_atan2+0x190>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	e013      	b.n	80074a6 <__ieee754_atan2+0x14e>
 800747e:	a11e      	add	r1, pc, #120	; (adr r1, 80074f8 <__ieee754_atan2+0x1a0>)
 8007480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007484:	e7ec      	b.n	8007460 <__ieee754_atan2+0x108>
 8007486:	2000      	movs	r0, #0
 8007488:	2100      	movs	r1, #0
 800748a:	e7e9      	b.n	8007460 <__ieee754_atan2+0x108>
 800748c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007490:	e783      	b.n	800739a <__ieee754_atan2+0x42>
 8007492:	a317      	add	r3, pc, #92	; (adr r3, 80074f0 <__ieee754_atan2+0x198>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f8 fea2 	bl	80001e0 <__aeabi_dsub>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	a111      	add	r1, pc, #68	; (adr r1, 80074e8 <__ieee754_atan2+0x190>)
 80074a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a6:	f7f8 fe9b 	bl	80001e0 <__aeabi_dsub>
 80074aa:	e776      	b.n	800739a <__ieee754_atan2+0x42>
 80074ac:	a114      	add	r1, pc, #80	; (adr r1, 8007500 <__ieee754_atan2+0x1a8>)
 80074ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b2:	e772      	b.n	800739a <__ieee754_atan2+0x42>
 80074b4:	2100      	movs	r1, #0
 80074b6:	e770      	b.n	800739a <__ieee754_atan2+0x42>
 80074b8:	a10f      	add	r1, pc, #60	; (adr r1, 80074f8 <__ieee754_atan2+0x1a0>)
 80074ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074be:	e76c      	b.n	800739a <__ieee754_atan2+0x42>
 80074c0:	54442d18 	.word	0x54442d18
 80074c4:	c00921fb 	.word	0xc00921fb
 80074c8:	54442d18 	.word	0x54442d18
 80074cc:	bff921fb 	.word	0xbff921fb
 80074d0:	54442d18 	.word	0x54442d18
 80074d4:	bfe921fb 	.word	0xbfe921fb
 80074d8:	7f3321d2 	.word	0x7f3321d2
 80074dc:	4002d97c 	.word	0x4002d97c
 80074e0:	7f3321d2 	.word	0x7f3321d2
 80074e4:	c002d97c 	.word	0xc002d97c
 80074e8:	54442d18 	.word	0x54442d18
 80074ec:	400921fb 	.word	0x400921fb
 80074f0:	33145c07 	.word	0x33145c07
 80074f4:	3ca1a626 	.word	0x3ca1a626
 80074f8:	54442d18 	.word	0x54442d18
 80074fc:	3ff921fb 	.word	0x3ff921fb
 8007500:	54442d18 	.word	0x54442d18
 8007504:	3fe921fb 	.word	0x3fe921fb
 8007508:	7ff00000 	.word	0x7ff00000

0800750c <__ieee754_sqrt>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	ec55 4b10 	vmov	r4, r5, d0
 8007514:	4e54      	ldr	r6, [pc, #336]	; (8007668 <__ieee754_sqrt+0x15c>)
 8007516:	43ae      	bics	r6, r5
 8007518:	ee10 0a10 	vmov	r0, s0
 800751c:	462b      	mov	r3, r5
 800751e:	462a      	mov	r2, r5
 8007520:	4621      	mov	r1, r4
 8007522:	d113      	bne.n	800754c <__ieee754_sqrt+0x40>
 8007524:	ee10 2a10 	vmov	r2, s0
 8007528:	462b      	mov	r3, r5
 800752a:	ee10 0a10 	vmov	r0, s0
 800752e:	4629      	mov	r1, r5
 8007530:	f7f9 f80a 	bl	8000548 <__aeabi_dmul>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f8 fe52 	bl	80001e4 <__adddf3>
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	ec45 4b10 	vmov	d0, r4, r5
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	2d00      	cmp	r5, #0
 800754e:	dc10      	bgt.n	8007572 <__ieee754_sqrt+0x66>
 8007550:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007554:	4330      	orrs	r0, r6
 8007556:	d0f5      	beq.n	8007544 <__ieee754_sqrt+0x38>
 8007558:	b15d      	cbz	r5, 8007572 <__ieee754_sqrt+0x66>
 800755a:	ee10 2a10 	vmov	r2, s0
 800755e:	462b      	mov	r3, r5
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7f8 fe3c 	bl	80001e0 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	f7f9 f916 	bl	800079c <__aeabi_ddiv>
 8007570:	e7e6      	b.n	8007540 <__ieee754_sqrt+0x34>
 8007572:	151b      	asrs	r3, r3, #20
 8007574:	d10c      	bne.n	8007590 <__ieee754_sqrt+0x84>
 8007576:	2a00      	cmp	r2, #0
 8007578:	d06d      	beq.n	8007656 <__ieee754_sqrt+0x14a>
 800757a:	2000      	movs	r0, #0
 800757c:	02d6      	lsls	r6, r2, #11
 800757e:	d56e      	bpl.n	800765e <__ieee754_sqrt+0x152>
 8007580:	1e44      	subs	r4, r0, #1
 8007582:	1b1b      	subs	r3, r3, r4
 8007584:	f1c0 0420 	rsb	r4, r0, #32
 8007588:	fa21 f404 	lsr.w	r4, r1, r4
 800758c:	4322      	orrs	r2, r4
 800758e:	4081      	lsls	r1, r0
 8007590:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007594:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007598:	07dd      	lsls	r5, r3, #31
 800759a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800759e:	bf42      	ittt	mi
 80075a0:	0052      	lslmi	r2, r2, #1
 80075a2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80075a6:	0049      	lslmi	r1, r1, #1
 80075a8:	1058      	asrs	r0, r3, #1
 80075aa:	2500      	movs	r5, #0
 80075ac:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80075b0:	441a      	add	r2, r3
 80075b2:	0049      	lsls	r1, r1, #1
 80075b4:	2316      	movs	r3, #22
 80075b6:	462c      	mov	r4, r5
 80075b8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80075bc:	19a7      	adds	r7, r4, r6
 80075be:	4297      	cmp	r7, r2
 80075c0:	bfde      	ittt	le
 80075c2:	1bd2      	suble	r2, r2, r7
 80075c4:	19bc      	addle	r4, r7, r6
 80075c6:	19ad      	addle	r5, r5, r6
 80075c8:	0052      	lsls	r2, r2, #1
 80075ca:	3b01      	subs	r3, #1
 80075cc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80075d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80075d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80075d8:	d1f0      	bne.n	80075bc <__ieee754_sqrt+0xb0>
 80075da:	f04f 0e20 	mov.w	lr, #32
 80075de:	469c      	mov	ip, r3
 80075e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80075e4:	42a2      	cmp	r2, r4
 80075e6:	eb06 070c 	add.w	r7, r6, ip
 80075ea:	dc02      	bgt.n	80075f2 <__ieee754_sqrt+0xe6>
 80075ec:	d112      	bne.n	8007614 <__ieee754_sqrt+0x108>
 80075ee:	428f      	cmp	r7, r1
 80075f0:	d810      	bhi.n	8007614 <__ieee754_sqrt+0x108>
 80075f2:	2f00      	cmp	r7, #0
 80075f4:	eb07 0c06 	add.w	ip, r7, r6
 80075f8:	da34      	bge.n	8007664 <__ieee754_sqrt+0x158>
 80075fa:	f1bc 0f00 	cmp.w	ip, #0
 80075fe:	db31      	blt.n	8007664 <__ieee754_sqrt+0x158>
 8007600:	f104 0801 	add.w	r8, r4, #1
 8007604:	1b12      	subs	r2, r2, r4
 8007606:	428f      	cmp	r7, r1
 8007608:	bf88      	it	hi
 800760a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800760e:	1bc9      	subs	r1, r1, r7
 8007610:	4433      	add	r3, r6
 8007612:	4644      	mov	r4, r8
 8007614:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007618:	f1be 0e01 	subs.w	lr, lr, #1
 800761c:	443a      	add	r2, r7
 800761e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007622:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007626:	d1dd      	bne.n	80075e4 <__ieee754_sqrt+0xd8>
 8007628:	430a      	orrs	r2, r1
 800762a:	d006      	beq.n	800763a <__ieee754_sqrt+0x12e>
 800762c:	1c5c      	adds	r4, r3, #1
 800762e:	bf13      	iteet	ne
 8007630:	3301      	addne	r3, #1
 8007632:	3501      	addeq	r5, #1
 8007634:	4673      	moveq	r3, lr
 8007636:	f023 0301 	bicne.w	r3, r3, #1
 800763a:	106a      	asrs	r2, r5, #1
 800763c:	085b      	lsrs	r3, r3, #1
 800763e:	07e9      	lsls	r1, r5, #31
 8007640:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007644:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007648:	bf48      	it	mi
 800764a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800764e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007652:	461c      	mov	r4, r3
 8007654:	e776      	b.n	8007544 <__ieee754_sqrt+0x38>
 8007656:	0aca      	lsrs	r2, r1, #11
 8007658:	3b15      	subs	r3, #21
 800765a:	0549      	lsls	r1, r1, #21
 800765c:	e78b      	b.n	8007576 <__ieee754_sqrt+0x6a>
 800765e:	0052      	lsls	r2, r2, #1
 8007660:	3001      	adds	r0, #1
 8007662:	e78b      	b.n	800757c <__ieee754_sqrt+0x70>
 8007664:	46a0      	mov	r8, r4
 8007666:	e7cd      	b.n	8007604 <__ieee754_sqrt+0xf8>
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	00000000 	.word	0x00000000

08007670 <atan>:
 8007670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	ec55 4b10 	vmov	r4, r5, d0
 8007678:	4bc7      	ldr	r3, [pc, #796]	; (8007998 <atan+0x328>)
 800767a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800767e:	429e      	cmp	r6, r3
 8007680:	46ab      	mov	fp, r5
 8007682:	dd18      	ble.n	80076b6 <atan+0x46>
 8007684:	4ac5      	ldr	r2, [pc, #788]	; (800799c <atan+0x32c>)
 8007686:	4296      	cmp	r6, r2
 8007688:	dc01      	bgt.n	800768e <atan+0x1e>
 800768a:	d109      	bne.n	80076a0 <atan+0x30>
 800768c:	b144      	cbz	r4, 80076a0 <atan+0x30>
 800768e:	4622      	mov	r2, r4
 8007690:	462b      	mov	r3, r5
 8007692:	4620      	mov	r0, r4
 8007694:	4629      	mov	r1, r5
 8007696:	f7f8 fda5 	bl	80001e4 <__adddf3>
 800769a:	4604      	mov	r4, r0
 800769c:	460d      	mov	r5, r1
 800769e:	e006      	b.n	80076ae <atan+0x3e>
 80076a0:	f1bb 0f00 	cmp.w	fp, #0
 80076a4:	f300 813a 	bgt.w	800791c <atan+0x2ac>
 80076a8:	a59f      	add	r5, pc, #636	; (adr r5, 8007928 <atan+0x2b8>)
 80076aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076ae:	ec45 4b10 	vmov	d0, r4, r5
 80076b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	4bba      	ldr	r3, [pc, #744]	; (80079a0 <atan+0x330>)
 80076b8:	429e      	cmp	r6, r3
 80076ba:	dc14      	bgt.n	80076e6 <atan+0x76>
 80076bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80076c0:	429e      	cmp	r6, r3
 80076c2:	dc0d      	bgt.n	80076e0 <atan+0x70>
 80076c4:	a39a      	add	r3, pc, #616	; (adr r3, 8007930 <atan+0x2c0>)
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	ee10 0a10 	vmov	r0, s0
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 fd88 	bl	80001e4 <__adddf3>
 80076d4:	2200      	movs	r2, #0
 80076d6:	4bb3      	ldr	r3, [pc, #716]	; (80079a4 <atan+0x334>)
 80076d8:	f7f9 f9c6 	bl	8000a68 <__aeabi_dcmpgt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1e6      	bne.n	80076ae <atan+0x3e>
 80076e0:	f04f 3aff 	mov.w	sl, #4294967295
 80076e4:	e02b      	b.n	800773e <atan+0xce>
 80076e6:	f000 f96b 	bl	80079c0 <fabs>
 80076ea:	4baf      	ldr	r3, [pc, #700]	; (80079a8 <atan+0x338>)
 80076ec:	429e      	cmp	r6, r3
 80076ee:	ec55 4b10 	vmov	r4, r5, d0
 80076f2:	f300 80bf 	bgt.w	8007874 <atan+0x204>
 80076f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80076fa:	429e      	cmp	r6, r3
 80076fc:	f300 80a0 	bgt.w	8007840 <atan+0x1d0>
 8007700:	ee10 2a10 	vmov	r2, s0
 8007704:	ee10 0a10 	vmov	r0, s0
 8007708:	462b      	mov	r3, r5
 800770a:	4629      	mov	r1, r5
 800770c:	f7f8 fd6a 	bl	80001e4 <__adddf3>
 8007710:	2200      	movs	r2, #0
 8007712:	4ba4      	ldr	r3, [pc, #656]	; (80079a4 <atan+0x334>)
 8007714:	f7f8 fd64 	bl	80001e0 <__aeabi_dsub>
 8007718:	2200      	movs	r2, #0
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fd5d 	bl	80001e4 <__adddf3>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f9 f833 	bl	800079c <__aeabi_ddiv>
 8007736:	f04f 0a00 	mov.w	sl, #0
 800773a:	4604      	mov	r4, r0
 800773c:	460d      	mov	r5, r1
 800773e:	4622      	mov	r2, r4
 8007740:	462b      	mov	r3, r5
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f8 feff 	bl	8000548 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4680      	mov	r8, r0
 8007750:	4689      	mov	r9, r1
 8007752:	f7f8 fef9 	bl	8000548 <__aeabi_dmul>
 8007756:	a378      	add	r3, pc, #480	; (adr r3, 8007938 <atan+0x2c8>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	f7f8 fef2 	bl	8000548 <__aeabi_dmul>
 8007764:	a376      	add	r3, pc, #472	; (adr r3, 8007940 <atan+0x2d0>)
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f7f8 fd3b 	bl	80001e4 <__adddf3>
 800776e:	4632      	mov	r2, r6
 8007770:	463b      	mov	r3, r7
 8007772:	f7f8 fee9 	bl	8000548 <__aeabi_dmul>
 8007776:	a374      	add	r3, pc, #464	; (adr r3, 8007948 <atan+0x2d8>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f7f8 fd32 	bl	80001e4 <__adddf3>
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	f7f8 fee0 	bl	8000548 <__aeabi_dmul>
 8007788:	a371      	add	r3, pc, #452	; (adr r3, 8007950 <atan+0x2e0>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fd29 	bl	80001e4 <__adddf3>
 8007792:	4632      	mov	r2, r6
 8007794:	463b      	mov	r3, r7
 8007796:	f7f8 fed7 	bl	8000548 <__aeabi_dmul>
 800779a:	a36f      	add	r3, pc, #444	; (adr r3, 8007958 <atan+0x2e8>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f7f8 fd20 	bl	80001e4 <__adddf3>
 80077a4:	4632      	mov	r2, r6
 80077a6:	463b      	mov	r3, r7
 80077a8:	f7f8 fece 	bl	8000548 <__aeabi_dmul>
 80077ac:	a36c      	add	r3, pc, #432	; (adr r3, 8007960 <atan+0x2f0>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f7f8 fd17 	bl	80001e4 <__adddf3>
 80077b6:	4642      	mov	r2, r8
 80077b8:	464b      	mov	r3, r9
 80077ba:	f7f8 fec5 	bl	8000548 <__aeabi_dmul>
 80077be:	a36a      	add	r3, pc, #424	; (adr r3, 8007968 <atan+0x2f8>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f8 febc 	bl	8000548 <__aeabi_dmul>
 80077d0:	a367      	add	r3, pc, #412	; (adr r3, 8007970 <atan+0x300>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 fd03 	bl	80001e0 <__aeabi_dsub>
 80077da:	4632      	mov	r2, r6
 80077dc:	463b      	mov	r3, r7
 80077de:	f7f8 feb3 	bl	8000548 <__aeabi_dmul>
 80077e2:	a365      	add	r3, pc, #404	; (adr r3, 8007978 <atan+0x308>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 fcfa 	bl	80001e0 <__aeabi_dsub>
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	f7f8 feaa 	bl	8000548 <__aeabi_dmul>
 80077f4:	a362      	add	r3, pc, #392	; (adr r3, 8007980 <atan+0x310>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fcf1 	bl	80001e0 <__aeabi_dsub>
 80077fe:	4632      	mov	r2, r6
 8007800:	463b      	mov	r3, r7
 8007802:	f7f8 fea1 	bl	8000548 <__aeabi_dmul>
 8007806:	a360      	add	r3, pc, #384	; (adr r3, 8007988 <atan+0x318>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fce8 	bl	80001e0 <__aeabi_dsub>
 8007810:	4632      	mov	r2, r6
 8007812:	463b      	mov	r3, r7
 8007814:	f7f8 fe98 	bl	8000548 <__aeabi_dmul>
 8007818:	f1ba 3fff 	cmp.w	sl, #4294967295
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	d155      	bne.n	80078ce <atan+0x25e>
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 fcdd 	bl	80001e4 <__adddf3>
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f7f8 fe8b 	bl	8000548 <__aeabi_dmul>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f8 fcd1 	bl	80001e0 <__aeabi_dsub>
 800783e:	e72c      	b.n	800769a <atan+0x2a>
 8007840:	ee10 0a10 	vmov	r0, s0
 8007844:	2200      	movs	r2, #0
 8007846:	4b57      	ldr	r3, [pc, #348]	; (80079a4 <atan+0x334>)
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fcc9 	bl	80001e0 <__aeabi_dsub>
 800784e:	2200      	movs	r2, #0
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4b53      	ldr	r3, [pc, #332]	; (80079a4 <atan+0x334>)
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fcc3 	bl	80001e4 <__adddf3>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4630      	mov	r0, r6
 8007864:	4639      	mov	r1, r7
 8007866:	f7f8 ff99 	bl	800079c <__aeabi_ddiv>
 800786a:	f04f 0a01 	mov.w	sl, #1
 800786e:	4604      	mov	r4, r0
 8007870:	460d      	mov	r5, r1
 8007872:	e764      	b.n	800773e <atan+0xce>
 8007874:	4b4d      	ldr	r3, [pc, #308]	; (80079ac <atan+0x33c>)
 8007876:	429e      	cmp	r6, r3
 8007878:	dc1d      	bgt.n	80078b6 <atan+0x246>
 800787a:	ee10 0a10 	vmov	r0, s0
 800787e:	2200      	movs	r2, #0
 8007880:	4b4b      	ldr	r3, [pc, #300]	; (80079b0 <atan+0x340>)
 8007882:	4629      	mov	r1, r5
 8007884:	f7f8 fcac 	bl	80001e0 <__aeabi_dsub>
 8007888:	2200      	movs	r2, #0
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	4b48      	ldr	r3, [pc, #288]	; (80079b0 <atan+0x340>)
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fe58 	bl	8000548 <__aeabi_dmul>
 8007898:	2200      	movs	r2, #0
 800789a:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <atan+0x334>)
 800789c:	f7f8 fca2 	bl	80001e4 <__adddf3>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 ff78 	bl	800079c <__aeabi_ddiv>
 80078ac:	f04f 0a02 	mov.w	sl, #2
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	e743      	b.n	800773e <atan+0xce>
 80078b6:	462b      	mov	r3, r5
 80078b8:	ee10 2a10 	vmov	r2, s0
 80078bc:	2000      	movs	r0, #0
 80078be:	493d      	ldr	r1, [pc, #244]	; (80079b4 <atan+0x344>)
 80078c0:	f7f8 ff6c 	bl	800079c <__aeabi_ddiv>
 80078c4:	f04f 0a03 	mov.w	sl, #3
 80078c8:	4604      	mov	r4, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	e737      	b.n	800773e <atan+0xce>
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	f7f8 fc87 	bl	80001e4 <__adddf3>
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	f7f8 fe35 	bl	8000548 <__aeabi_dmul>
 80078de:	4e36      	ldr	r6, [pc, #216]	; (80079b8 <atan+0x348>)
 80078e0:	4b36      	ldr	r3, [pc, #216]	; (80079bc <atan+0x34c>)
 80078e2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80078e6:	4456      	add	r6, sl
 80078e8:	449a      	add	sl, r3
 80078ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80078ee:	f7f8 fc77 	bl	80001e0 <__aeabi_dsub>
 80078f2:	4622      	mov	r2, r4
 80078f4:	462b      	mov	r3, r5
 80078f6:	f7f8 fc73 	bl	80001e0 <__aeabi_dsub>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007902:	f7f8 fc6d 	bl	80001e0 <__aeabi_dsub>
 8007906:	f1bb 0f00 	cmp.w	fp, #0
 800790a:	4604      	mov	r4, r0
 800790c:	460d      	mov	r5, r1
 800790e:	f6bf aece 	bge.w	80076ae <atan+0x3e>
 8007912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007916:	4604      	mov	r4, r0
 8007918:	461d      	mov	r5, r3
 800791a:	e6c8      	b.n	80076ae <atan+0x3e>
 800791c:	a51c      	add	r5, pc, #112	; (adr r5, 8007990 <atan+0x320>)
 800791e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007922:	e6c4      	b.n	80076ae <atan+0x3e>
 8007924:	f3af 8000 	nop.w
 8007928:	54442d18 	.word	0x54442d18
 800792c:	bff921fb 	.word	0xbff921fb
 8007930:	8800759c 	.word	0x8800759c
 8007934:	7e37e43c 	.word	0x7e37e43c
 8007938:	e322da11 	.word	0xe322da11
 800793c:	3f90ad3a 	.word	0x3f90ad3a
 8007940:	24760deb 	.word	0x24760deb
 8007944:	3fa97b4b 	.word	0x3fa97b4b
 8007948:	a0d03d51 	.word	0xa0d03d51
 800794c:	3fb10d66 	.word	0x3fb10d66
 8007950:	c54c206e 	.word	0xc54c206e
 8007954:	3fb745cd 	.word	0x3fb745cd
 8007958:	920083ff 	.word	0x920083ff
 800795c:	3fc24924 	.word	0x3fc24924
 8007960:	5555550d 	.word	0x5555550d
 8007964:	3fd55555 	.word	0x3fd55555
 8007968:	2c6a6c2f 	.word	0x2c6a6c2f
 800796c:	bfa2b444 	.word	0xbfa2b444
 8007970:	52defd9a 	.word	0x52defd9a
 8007974:	3fadde2d 	.word	0x3fadde2d
 8007978:	af749a6d 	.word	0xaf749a6d
 800797c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007980:	fe231671 	.word	0xfe231671
 8007984:	3fbc71c6 	.word	0x3fbc71c6
 8007988:	9998ebc4 	.word	0x9998ebc4
 800798c:	3fc99999 	.word	0x3fc99999
 8007990:	54442d18 	.word	0x54442d18
 8007994:	3ff921fb 	.word	0x3ff921fb
 8007998:	440fffff 	.word	0x440fffff
 800799c:	7ff00000 	.word	0x7ff00000
 80079a0:	3fdbffff 	.word	0x3fdbffff
 80079a4:	3ff00000 	.word	0x3ff00000
 80079a8:	3ff2ffff 	.word	0x3ff2ffff
 80079ac:	40037fff 	.word	0x40037fff
 80079b0:	3ff80000 	.word	0x3ff80000
 80079b4:	bff00000 	.word	0xbff00000
 80079b8:	08007b20 	.word	0x08007b20
 80079bc:	08007b40 	.word	0x08007b40

080079c0 <fabs>:
 80079c0:	ec53 2b10 	vmov	r2, r3, d0
 80079c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	ec43 2b10 	vmov	d0, r2, r3
 80079cc:	4770      	bx	lr

080079ce <matherr>:
 80079ce:	2000      	movs	r0, #0
 80079d0:	4770      	bx	lr
 80079d2:	0000      	movs	r0, r0
 80079d4:	0000      	movs	r0, r0
	...

080079d8 <nan>:
 80079d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80079e0 <nan+0x8>
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	00000000 	.word	0x00000000
 80079e4:	7ff80000 	.word	0x7ff80000

080079e8 <__errno>:
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <__errno+0x8>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000054 	.word	0x20000054

080079f4 <_write>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <_write+0xc>)
 80079f6:	2258      	movs	r2, #88	; 0x58
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	4770      	bx	lr
 8007a00:	200003e0 	.word	0x200003e0

08007a04 <_init>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr

08007a10 <_fini>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr
